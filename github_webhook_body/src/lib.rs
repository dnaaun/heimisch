#![allow(clippy::all)]
#![allow(irrefutable_let_patterns)]

#[doc = r" Error types."]
pub mod error {
    #[doc = r" Error from a TryFrom or FromStr implementation."]
    pub struct ConversionError(::std::borrow::Cow<'static, str>);
    impl ::std::error::Error for ConversionError {}
    impl ::std::fmt::Display for ConversionError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> Result<(), ::std::fmt::Error> {
            ::std::fmt::Display::fmt(&self.0, f)
        }
    }
    impl ::std::fmt::Debug for ConversionError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> Result<(), ::std::fmt::Error> {
            ::std::fmt::Debug::fmt(&self.0, f)
        }
    }
    impl From<&'static str> for ConversionError {
        fn from(value: &'static str) -> Self {
            Self(value.into())
        }
    }
    impl From<String> for ConversionError {
        fn from(value: String) -> Self {
            Self(value.into())
        }
    }
}
#[doc = "BranchProtectionConfiguration"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"branch_protection_configuration\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"BranchProtectionConfigurationDisabled\","]
#[doc = "      \"description\": \"<p>All branch protections were disabled for a repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"BranchProtectionConfigurationDisabledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"disabled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"BranchProtectionConfigurationEnabled\","]
#[doc = "      \"description\": \"<p>All branch protections were enabled for a repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"BranchProtectionConfigurationEnabledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"enabled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum BranchProtectionConfiguration {
    #[doc = "BranchProtectionConfigurationDisabled\n\n<p>All branch protections were disabled for a repository.</p>"]
    #[serde(rename = "disabled")]
    Disabled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "BranchProtectionConfigurationEnabled\n\n<p>All branch protections were enabled for a repository.</p>"]
    #[serde(rename = "enabled")]
    Enabled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&BranchProtectionConfiguration> for BranchProtectionConfiguration {
    fn from(value: &BranchProtectionConfiguration) -> Self {
        value.clone()
    }
}
#[doc = "BranchProtectionRule"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"branch_protection_rule\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreated\","]
#[doc = "      \"description\": \"<p>A branch protection rule was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"rule\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"BranchProtectionRuleCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"rule\": {"]
#[doc = "          \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRule\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"BranchProtectionRuleDeleted\","]
#[doc = "      \"description\": \"<p>A branch protection rule was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"rule\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"BranchProtectionRuleDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"rule\": {"]
#[doc = "          \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRule\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"BranchProtectionRuleEdited\","]
#[doc = "      \"description\": \"<p>A branch protection rule was edited.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"rule\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"BranchProtectionRuleEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/BranchProtectionRuleEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"rule\": {"]
#[doc = "          \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRule\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum BranchProtectionRule {
    #[doc = "BranchProtectionRuleCreated\n\n<p>A branch protection rule was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        rule: BranchProtectionRuleCreatedRule,
        sender: Untyped,
    },
    #[doc = "BranchProtectionRuleDeleted\n\n<p>A branch protection rule was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        rule: BranchProtectionRuleCreatedRule,
        sender: Untyped,
    },
    #[doc = "BranchProtectionRuleEdited\n\n<p>A branch protection rule was edited.</p>"]
    #[serde(rename = "edited")]
    Edited {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<BranchProtectionRuleEditedChanges>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        rule: BranchProtectionRuleCreatedRule,
        sender: Untyped,
    },
}
impl From<&BranchProtectionRule> for BranchProtectionRule {
    fn from(value: &BranchProtectionRule) -> Self {
        value.clone()
    }
}
#[doc = "<p>The branch protection rule. Includes a <code>name</code> and all the <a href=\"https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings\">branch protection settings</a> applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of <code>off</code>, <code>non_admins</code>, or <code>everyone</code>. Actor and build lists are arrays of strings.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BranchProtectionRuleCreatedRule\","]
#[doc = "  \"description\": \"<p>The branch protection rule. Includes a <code>name</code> and all the <a href=\\\"https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings\\\">branch protection settings</a> applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of <code>off</code>, <code>non_admins</code>, or <code>everyone</code>. Actor and build lists are arrays of strings.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"admin_enforced\","]
#[doc = "    \"allow_deletions_enforcement_level\","]
#[doc = "    \"allow_force_pushes_enforcement_level\","]
#[doc = "    \"authorized_actor_names\","]
#[doc = "    \"authorized_actors_only\","]
#[doc = "    \"authorized_dismissal_actors_only\","]
#[doc = "    \"created_at\","]
#[doc = "    \"dismiss_stale_reviews_on_push\","]
#[doc = "    \"id\","]
#[doc = "    \"ignore_approvals_from_contributors\","]
#[doc = "    \"linear_history_requirement_enforcement_level\","]
#[doc = "    \"lock_branch_enforcement_level\","]
#[doc = "    \"merge_queue_enforcement_level\","]
#[doc = "    \"name\","]
#[doc = "    \"pull_request_reviews_enforcement_level\","]
#[doc = "    \"repository_id\","]
#[doc = "    \"require_code_owner_review\","]
#[doc = "    \"required_approving_review_count\","]
#[doc = "    \"required_conversation_resolution_level\","]
#[doc = "    \"required_deployments_enforcement_level\","]
#[doc = "    \"required_status_checks\","]
#[doc = "    \"required_status_checks_enforcement_level\","]
#[doc = "    \"signature_requirement_enforcement_level\","]
#[doc = "    \"strict_required_status_checks_policy\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"admin_enforced\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleAdminEnforced\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_deletions_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"allow_force_pushes_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"authorized_actor_names\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleAuthorizedActorNames\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"authorized_actors_only\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleAuthorizedActorsOnly\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"authorized_dismissal_actors_only\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleAuthorizedDismissalActorsOnly\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"create_protected\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleCreateProtected\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dismiss_stale_reviews_on_push\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleDismissStaleReviewsOnPush\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"ignore_approvals_from_contributors\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleIgnoreApprovalsFromContributors\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"linear_history_requirement_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"lock_allows_fork_sync\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleLockAllowsForkSync\","]
#[doc = "      \"description\": \"<p>Whether users can pull changes from upstream when the branch is locked. Set to <code>true</code> to allow users to pull changes from upstream when the branch is locked. This setting is only applicable for forks.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"lock_branch_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"merge_queue_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pull_request_reviews_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"repository_id\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleRepositoryId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"require_code_owner_review\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleRequireCodeOwnerReview\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"require_last_push_approval\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleRequireLastPushApproval\","]
#[doc = "      \"description\": \"<p>Whether the most recent push must be approved by someone other than the person who pushed it</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"required_approving_review_count\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleRequiredApprovingReviewCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"required_conversation_resolution_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"required_deployments_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"required_status_checks\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleRequiredStatusChecks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"required_status_checks_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"signature_requirement_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"strict_required_status_checks_policy\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleStrictRequiredStatusChecksPolicy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleCreatedRuleUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BranchProtectionRuleCreatedRule {
    #[doc = ""]
    pub admin_enforced: bool,
    pub allow_deletions_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    pub allow_force_pushes_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    #[doc = ""]
    pub authorized_actor_names: Vec<String>,
    #[doc = ""]
    pub authorized_actors_only: bool,
    #[doc = ""]
    pub authorized_dismissal_actors_only: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub create_protected: Option<bool>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub dismiss_stale_reviews_on_push: bool,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub ignore_approvals_from_contributors: bool,
    pub linear_history_requirement_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    #[doc = "<p>Whether users can pull changes from upstream when the branch is locked. Set to <code>true</code> to allow users to pull changes from upstream when the branch is locked. This setting is only applicable for forks.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lock_allows_fork_sync: Option<bool>,
    pub lock_branch_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    pub merge_queue_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    #[doc = ""]
    pub name: String,
    pub pull_request_reviews_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    #[doc = ""]
    pub repository_id: i64,
    #[doc = ""]
    pub require_code_owner_review: bool,
    #[doc = "<p>Whether the most recent push must be approved by someone other than the person who pushed it</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_last_push_approval: Option<bool>,
    #[doc = ""]
    pub required_approving_review_count: i64,
    pub required_conversation_resolution_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    pub required_deployments_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    #[doc = ""]
    pub required_status_checks: Vec<String>,
    pub required_status_checks_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    pub signature_requirement_enforcement_level:
        BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
    #[doc = ""]
    pub strict_required_status_checks_policy: bool,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&BranchProtectionRuleCreatedRule> for BranchProtectionRuleCreatedRule {
    fn from(value: &BranchProtectionRuleCreatedRule) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"everyone\","]
#[doc = "    \"non_admins\","]
#[doc = "    \"off\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel {
    #[serde(rename = "everyone")]
    Everyone,
    #[serde(rename = "non_admins")]
    NonAdmins,
    #[serde(rename = "off")]
    Off,
}
impl From<&BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel>
    for BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel
{
    fn from(value: &BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Everyone => write!(f, "everyone"),
            Self::NonAdmins => write!(f, "non_admins"),
            Self::Off => write!(f, "off"),
        }
    }
}
impl std::str::FromStr for BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "everyone" => Ok(Self::Everyone),
            "non_admins" => Ok(Self::NonAdmins),
            "off" => Ok(Self::Off),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>If the action was <code>edited</code>, the changes to the rule.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BranchProtectionRuleEditedChanges\","]
#[doc = "  \"description\": \"<p>If the action was <code>edited</code>, the changes to the rule.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"admin_enforced\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesAdminEnforced\""]
#[doc = "    },"]
#[doc = "    \"authorized_actor_names\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude\""]
#[doc = "    },"]
#[doc = "    \"authorized_actors_only\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesAdminEnforced\""]
#[doc = "    },"]
#[doc = "    \"authorized_dismissal_actors_only\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesAdminEnforced\""]
#[doc = "    },"]
#[doc = "    \"linear_history_requirement_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"lock_allows_fork_sync\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesAdminEnforced\""]
#[doc = "    },"]
#[doc = "    \"lock_branch_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"pull_request_reviews_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel\""]
#[doc = "    },"]
#[doc = "    \"require_last_push_approval\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesAdminEnforced\""]
#[doc = "    },"]
#[doc = "    \"required_status_checks\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude\""]
#[doc = "    },"]
#[doc = "    \"required_status_checks_enforcement_level\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BranchProtectionRuleEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub admin_enforced: Option<BranchProtectionRuleEditedChangesAdminEnforced>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorized_actor_names:
        Option<RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorized_actors_only: Option<BranchProtectionRuleEditedChangesAdminEnforced>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub authorized_dismissal_actors_only: Option<BranchProtectionRuleEditedChangesAdminEnforced>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub linear_history_requirement_enforcement_level:
        Option<BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lock_allows_fork_sync: Option<BranchProtectionRuleEditedChangesAdminEnforced>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lock_branch_enforcement_level:
        Option<BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request_reviews_enforcement_level:
        Option<BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub require_last_push_approval: Option<BranchProtectionRuleEditedChangesAdminEnforced>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required_status_checks:
        Option<RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required_status_checks_enforcement_level:
        Option<BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel>,
}
impl From<&BranchProtectionRuleEditedChanges> for BranchProtectionRuleEditedChanges {
    fn from(value: &BranchProtectionRuleEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BranchProtectionRuleEditedChangesAdminEnforced\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"from\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"title\": \"BranchProtectionRuleEditedChangesAdminEnforcedFrom\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BranchProtectionRuleEditedChangesAdminEnforced {
    #[doc = ""]
    pub from: Option<bool>,
}
impl From<&BranchProtectionRuleEditedChangesAdminEnforced>
    for BranchProtectionRuleEditedChangesAdminEnforced
{
    fn from(value: &BranchProtectionRuleEditedChangesAdminEnforced) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"from\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"$ref\": \"#/$defs/BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel {
    pub from: BranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel,
}
impl From<&BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel>
    for BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel
{
    fn from(
        value: &BranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel,
    ) -> Self {
        value.clone()
    }
}
#[doc = "CheckRun"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"check_run\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"CheckRunCompleted\","]
#[doc = "      \"description\": \"<p>A check run was completed, and a conclusion is available.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"check_run\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CheckRunCompletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"completed\""]
#[doc = "        },"]
#[doc = "        \"check_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunCompletedCheckRun\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CheckRunCreated\","]
#[doc = "      \"description\": \"<p>A new check run was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"check_run\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CheckRunCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"check_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunCompletedCheckRun\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CheckRunRequestedAction\","]
#[doc = "      \"description\": \"<p>A check run completed, and someone requested a followup action that your app provides. Only the GitHub App someone requests to perform an action will receive the <code>requested_action</code> payload. For more information, see \\\"<a href=\\\"https://docs.github.com/developers/apps/guides/creating-ci-tests-with-the-checks-api\\\">Creating CI tests with the Checks API</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"check_run\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CheckRunRequestedActionAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"requested_action\""]
#[doc = "        },"]
#[doc = "        \"check_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunCompletedCheckRun\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requested_action\": {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunRequestedActionRequestedAction\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CheckRunRerequested\","]
#[doc = "      \"description\": \"<p>Someone requested to re-run a check run. Only the GitHub App that someone requests to re-run the check will receive the <code>rerequested</code> payload.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"check_run\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CheckRunRerequestedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"rerequested\""]
#[doc = "        },"]
#[doc = "        \"check_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunCompletedCheckRun\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum CheckRun {
    Completed {
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        action: Option<String>,
        check_run: CheckRunCompletedCheckRun,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    Created {
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        action: Option<String>,
        check_run: CheckRunCompletedCheckRun,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    RequestedAction {
        #[doc = ""]
        action: String,
        check_run: CheckRunCompletedCheckRun,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        requested_action: Option<CheckRunRequestedActionRequestedAction>,
        sender: Untyped,
    },
    Rerequested {
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        action: Option<String>,
        check_run: CheckRunCompletedCheckRun,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&CheckRun> for CheckRun {
    fn from(value: &CheckRun) -> Self {
        value.clone()
    }
}
#[doc = "<p>A check performed on the code of a given code change</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRun\","]
#[doc = "  \"description\": \"<p>A check performed on the code of a given code change</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"app\","]
#[doc = "    \"check_suite\","]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"details_url\","]
#[doc = "    \"external_id\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"output\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"app\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunApp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"check_suite\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuite\""]
#[doc = "    },"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunCompletedCheckRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"deployment\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunDeployment\""]
#[doc = "    },"]
#[doc = "    \"details_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDetailsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"external_id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunExternalId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunHeadSha\","]
#[doc = "      \"description\": \"<p>The SHA of the commit that is being checked.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunId\","]
#[doc = "      \"description\": \"<p>The id of the check.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunName\","]
#[doc = "      \"description\": \"<p>The name of the check.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"output\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunOutput\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuitePullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunStatus\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRun {
    #[doc = ""]
    pub app: (),
    pub check_suite: CheckRunCompletedCheckRunCheckSuite,
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = ""]
    pub conclusion: Option<CheckRunCompletedCheckRunConclusion>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<CheckRunCompletedCheckRunDeployment>,
    #[doc = ""]
    pub details_url: String,
    #[doc = ""]
    pub external_id: String,
    #[doc = "<p>The SHA of the commit that is being checked.</p>"]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>The id of the check.</p>"]
    pub id: i64,
    #[doc = "<p>The name of the check.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    pub output: CheckRunCompletedCheckRunOutput,
    #[doc = ""]
    pub pull_requests: Vec<CheckRunCompletedCheckRunCheckSuitePullRequests>,
    #[doc = ""]
    pub started_at: String,
    pub status: CheckRunCompletedCheckRunStatus,
    #[doc = ""]
    pub url: String,
}
impl From<&CheckRunCompletedCheckRun> for CheckRunCompletedCheckRun {
    fn from(value: &CheckRunCompletedCheckRun) -> Self {
        value.clone()
    }
}
#[doc = "<p>A suite of checks performed on the code of a given code change</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunCheckSuite\","]
#[doc = "  \"description\": \"<p>A suite of checks performed on the code of a given code change</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"after\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteAfter\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"app\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentDeletedCommentPerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"before\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteBefore\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteHeadSha\","]
#[doc = "      \"description\": \"<p>The SHA of the head commit that is being checked.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuitePullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepository\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedCheckRunStatus\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuite {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub after: Option<String>,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app: Option<IssueCommentDeletedCommentPerformedViaGithubApp>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub before: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conclusion: Option<WorkflowRunCompletedWorkflowRunConclusion>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_branch: Option<String>,
    #[doc = "<p>The SHA of the head commit that is being checked.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub pull_requests: Vec<CheckRunCompletedCheckRunCheckSuitePullRequests>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<CheckRunCompletedCheckRunCheckSuiteRepository>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<DeploymentStatusCreatedCheckRunStatus>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&CheckRunCompletedCheckRunCheckSuite> for CheckRunCompletedCheckRunCheckSuite {
    fn from(value: &CheckRunCompletedCheckRunCheckSuite) -> Self {
        value.clone()
    }
}
#[doc = "CheckRunCompletedCheckRunCheckSuitePullRequests"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"base\","]
#[doc = "    \"head\","]
#[doc = "    \"id\","]
#[doc = "    \"number\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuitePullRequestsHead\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuitePullRequestsHead\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuitePullRequests {
    pub base: CheckRunCompletedCheckRunCheckSuitePullRequestsHead,
    pub head: CheckRunCompletedCheckRunCheckSuitePullRequestsHead,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub url: String,
}
impl From<&CheckRunCompletedCheckRunCheckSuitePullRequests>
    for CheckRunCompletedCheckRunCheckSuitePullRequests
{
    fn from(value: &CheckRunCompletedCheckRunCheckSuitePullRequests) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsHead\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepo\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuitePullRequestsHead {
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repo: CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepo,
    #[doc = ""]
    pub sha: String,
}
impl From<&CheckRunCompletedCheckRunCheckSuitePullRequestsHead>
    for CheckRunCompletedCheckRunCheckSuitePullRequestsHead
{
    fn from(value: &CheckRunCompletedCheckRunCheckSuitePullRequestsHead) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepo\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepoId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepoName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepoUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepo {
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub url: String,
}
impl From<&CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepo>
    for CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepo
{
    fn from(value: &CheckRunCompletedCheckRunCheckSuitePullRequestsHeadRepo) -> Self {
        value.clone()
    }
}
#[doc = "<p>Minimal Repository</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepository\","]
#[doc = "  \"description\": \"<p>Minimal Repository</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryAllowForking\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryArchived\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"code_of_conduct\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConduct\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryDefaultBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryDisabled\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_discussions\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHasDiscussions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHasDownloads\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHasIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHasProjects\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHasWiki\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositoryLicense\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"network_count\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryNetworkCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryPrivate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryRoleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"security_and_analysis\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySize\","]
#[doc = "      \"description\": \"<p>The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_count\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySubscribersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"temp_clone_token\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryTempCloneToken\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryVisibility\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuiteRepository {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clone_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code_of_conduct: Option<CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConduct>,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_branch: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete_branch_on_merge: Option<bool>,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forks: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forks_count: Option<i64>,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_discussions: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_downloads: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_issues: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_pages: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_projects: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_wiki: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub license: Option<CheckRunCompletedCheckRunCheckSuiteRepositoryLicense>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mirror_url: Option<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network_count: Option<i64>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_issues: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_issues_count: Option<i64>,
    pub owner: DiscussionTransferredChangesNewRepositoryOrganization,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions>,
    #[doc = ""]
    pub private: bool,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pushed_at: Option<String>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security_and_analysis:
        Option<CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis>,
    #[doc = "<p>The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssh_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers_count: Option<i64>,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscribers_count: Option<i64>,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub svn_url: Option<String>,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temp_clone_token: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub watchers: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub watchers_count: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web_commit_signoff_required: Option<bool>,
}
impl From<&CheckRunCompletedCheckRunCheckSuiteRepository>
    for CheckRunCompletedCheckRunCheckSuiteRepository
{
    fn from(value: &CheckRunCompletedCheckRunCheckSuiteRepository) -> Self {
        value.clone()
    }
}
#[doc = "<p>Code Of Conduct</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConduct\","]
#[doc = "  \"description\": \"<p>Code Of Conduct</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"html_url\","]
#[doc = "    \"key\","]
#[doc = "    \"name\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConductBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConductHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"key\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConductKey\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConductName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConductUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConduct {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[doc = ""]
    pub html_url: Option<String>,
    #[doc = ""]
    pub key: String,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub url: String,
}
impl From<&CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConduct>
    for CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConduct
{
    fn from(value: &CheckRunCompletedCheckRunCheckSuiteRepositoryCodeOfConduct) -> Self {
        value.clone()
    }
}
#[doc = "CheckRunCompletedCheckRunCheckSuiteRepositoryLicense"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"key\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLicenseKey\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLicenseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLicenseNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"spdx_id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLicenseSpdxId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositoryLicenseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuiteRepositoryLicense {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spdx_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&CheckRunCompletedCheckRunCheckSuiteRepositoryLicense>
    for CheckRunCompletedCheckRunCheckSuiteRepositoryLicense
{
    fn from(value: &CheckRunCompletedCheckRunCheckSuiteRepositoryLicense) -> Self {
        value.clone()
    }
}
#[doc = "CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"advanced_security\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity\""]
#[doc = "    },"]
#[doc = "    \"dependabot_security_updates\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity\""]
#[doc = "    },"]
#[doc = "    \"secret_scanning\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity\""]
#[doc = "    },"]
#[doc = "    \"secret_scanning_ai_detection\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity\""]
#[doc = "    },"]
#[doc = "    \"secret_scanning_non_provider_patterns\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity\""]
#[doc = "    },"]
#[doc = "    \"secret_scanning_push_protection\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub advanced_security:
        Option<CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependabot_security_updates:
        Option<CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_scanning:
        Option<CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_scanning_ai_detection:
        Option<CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_scanning_non_provider_patterns:
        Option<CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_scanning_push_protection:
        Option<CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity>,
}
impl From<&CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis>
    for CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis
{
    fn from(value: &CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<
        CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus,
    >,
}
impl From<&CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity>
    for CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity
{
    fn from(
        value: &CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurity,
    ) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"disabled\","]
#[doc = "    \"enabled\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "enabled")]
    Enabled,
}
impl From<&CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus>
    for CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus
{
    fn from(
        value : & CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Disabled => write!(f, "disabled"),
            Self::Enabled => write!(f, "enabled"),
        }
    }
}
impl std::str::FromStr
    for CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "disabled" => Ok(Self::Disabled),
            "enabled" => Ok(Self::Enabled),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysisAdvancedSecurityStatus
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "CheckRunCompletedCheckRunConclusion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"action_required\","]
#[doc = "    \"cancelled\","]
#[doc = "    \"failure\","]
#[doc = "    \"neutral\","]
#[doc = "    \"pending\","]
#[doc = "    \"skipped\","]
#[doc = "    \"stale\","]
#[doc = "    \"startup_failure\","]
#[doc = "    \"success\","]
#[doc = "    \"timed_out\","]
#[doc = "    \"waiting\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CheckRunCompletedCheckRunConclusion {
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "startup_failure")]
    StartupFailure,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "timed_out")]
    TimedOut,
    #[serde(rename = "waiting")]
    Waiting,
}
impl From<&CheckRunCompletedCheckRunConclusion> for CheckRunCompletedCheckRunConclusion {
    fn from(value: &CheckRunCompletedCheckRunConclusion) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CheckRunCompletedCheckRunConclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::ActionRequired => write!(f, "action_required"),
            Self::Cancelled => write!(f, "cancelled"),
            Self::Failure => write!(f, "failure"),
            Self::Neutral => write!(f, "neutral"),
            Self::Pending => write!(f, "pending"),
            Self::Skipped => write!(f, "skipped"),
            Self::Stale => write!(f, "stale"),
            Self::StartupFailure => write!(f, "startup_failure"),
            Self::Success => write!(f, "success"),
            Self::TimedOut => write!(f, "timed_out"),
            Self::Waiting => write!(f, "waiting"),
        }
    }
}
impl std::str::FromStr for CheckRunCompletedCheckRunConclusion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "action_required" => Ok(Self::ActionRequired),
            "cancelled" => Ok(Self::Cancelled),
            "failure" => Ok(Self::Failure),
            "neutral" => Ok(Self::Neutral),
            "pending" => Ok(Self::Pending),
            "skipped" => Ok(Self::Skipped),
            "stale" => Ok(Self::Stale),
            "startup_failure" => Ok(Self::StartupFailure),
            "success" => Ok(Self::Success),
            "timed_out" => Ok(Self::TimedOut),
            "waiting" => Ok(Self::Waiting),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CheckRunCompletedCheckRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CheckRunCompletedCheckRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CheckRunCompletedCheckRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>A deployment created as the result of an Actions check run from a workflow that references an environment</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunDeployment\","]
#[doc = "  \"description\": \"<p>A deployment created as the result of an Actions check run from a workflow that references an environment</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"environment\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"task\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentEnvironment\","]
#[doc = "      \"description\": \"<p>Name for the target deployment environment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the deployment</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_environment\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentOriginalEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentPerformedViaGithubApp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"production_environment\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentProductionEnvironment\","]
#[doc = "      \"description\": \"<p>Specifies if the given environment is one that end-users directly interact with. Default: false.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"task\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentTask\","]
#[doc = "      \"description\": \"<p>Parameter to specify a task to execute</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"transient_environment\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentTransientEnvironment\","]
#[doc = "      \"description\": \"<p>Specifies if the given environment is will no longer exist at some point in the future. Default: false.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunDeploymentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunDeployment {
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Name for the target deployment environment.</p>"]
    pub environment: String,
    #[doc = "<p>Unique identifier of the deployment</p>"]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub original_environment: Option<String>,
    #[doc = ""]
    #[serde(default)]
    pub performed_via_github_app: (),
    #[doc = "<p>Specifies if the given environment is one that end-users directly interact with. Default: false.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub production_environment: Option<bool>,
    #[doc = ""]
    pub repository_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>Parameter to specify a task to execute</p>"]
    pub task: String,
    #[doc = "<p>Specifies if the given environment is will no longer exist at some point in the future. Default: false.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transient_environment: Option<bool>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&CheckRunCompletedCheckRunDeployment> for CheckRunCompletedCheckRunDeployment {
    fn from(value: &CheckRunCompletedCheckRunDeployment) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunOutput\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"annotations_count\","]
#[doc = "    \"annotations_url\","]
#[doc = "    \"summary\","]
#[doc = "    \"text\","]
#[doc = "    \"title\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"annotations_count\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunOutputAnnotationsCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"annotations_url\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunOutputAnnotationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunOutputSummary\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"text\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunOutputText\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"CheckRunCompletedCheckRunOutputTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunCompletedCheckRunOutput {
    #[doc = ""]
    pub annotations_count: i64,
    #[doc = ""]
    pub annotations_url: String,
    #[doc = ""]
    pub summary: Option<String>,
    #[doc = ""]
    pub text: Option<String>,
    #[doc = ""]
    pub title: Option<String>,
}
impl From<&CheckRunCompletedCheckRunOutput> for CheckRunCompletedCheckRunOutput {
    fn from(value: &CheckRunCompletedCheckRunOutput) -> Self {
        value.clone()
    }
}
#[doc = "<p>The phase of the lifecycle that the check is currently in.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunCompletedCheckRunStatus\","]
#[doc = "  \"description\": \"<p>The phase of the lifecycle that the check is currently in.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"in_progress\","]
#[doc = "    \"pending\","]
#[doc = "    \"queued\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CheckRunCompletedCheckRunStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "queued")]
    Queued,
}
impl From<&CheckRunCompletedCheckRunStatus> for CheckRunCompletedCheckRunStatus {
    fn from(value: &CheckRunCompletedCheckRunStatus) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CheckRunCompletedCheckRunStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::InProgress => write!(f, "in_progress"),
            Self::Pending => write!(f, "pending"),
            Self::Queued => write!(f, "queued"),
        }
    }
}
impl std::str::FromStr for CheckRunCompletedCheckRunStatus {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "in_progress" => Ok(Self::InProgress),
            "pending" => Ok(Self::Pending),
            "queued" => Ok(Self::Queued),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CheckRunCompletedCheckRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CheckRunCompletedCheckRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CheckRunCompletedCheckRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The action requested by the user.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckRunRequestedActionRequestedAction\","]
#[doc = "  \"description\": \"<p>The action requested by the user.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"identifier\": {"]
#[doc = "      \"title\": \"CheckRunRequestedActionRequestedActionIdentifier\","]
#[doc = "      \"description\": \"<p>The integrator reference of the action requested by the user.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckRunRequestedActionRequestedAction {
    #[doc = "<p>The integrator reference of the action requested by the user.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
}
impl From<&CheckRunRequestedActionRequestedAction> for CheckRunRequestedActionRequestedAction {
    fn from(value: &CheckRunRequestedActionRequestedAction) -> Self {
        value.clone()
    }
}
#[doc = "CheckSuite"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"check_suite\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"CheckSuiteCompleted\","]
#[doc = "      \"description\": \"<p>All check runs in a check suite have completed, and a conclusion is available.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"check_suite\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CheckSuiteCompletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"completed\""]
#[doc = "        },"]
#[doc = "        \"check_suite\": {"]
#[doc = "          \"$ref\": \"#/$defs/CheckSuiteCompletedCheckSuite\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CheckSuiteRequested\","]
#[doc = "      \"description\": \"<p>Someone requested to run a check suite. By default, check suites are automatically created when you create a check run. For more information, see <a href=\\\"https://docs.github.com/graphql/reference/mutations#createcheckrun\\\">the GraphQL API documentation for creating a check run</a> or \\\"<a href=\\\"https://docs.github.com/rest/checks/runs#create-a-check-run\\\">Create a check run</a>\\\" in the REST API documentation.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"check_suite\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CheckSuiteRequestedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"requested\""]
#[doc = "        },"]
#[doc = "        \"check_suite\": {"]
#[doc = "          \"$ref\": \"#/$defs/CheckSuiteRequestedCheckSuite\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CheckSuiteRerequested\","]
#[doc = "      \"description\": \"<p>Someone requested to re-run the check runs in a check suite. For more information, see <a href=\\\"https://docs.github.com/graphql/reference/mutations#createchecksuite\\\">the GraphQL API documentation for creating a check suite</a> or \\\"<a href=\\\"https://docs.github.com/rest/checks/suites#create-a-check-suite\\\">Create a check suite</a>\\\" in the REST API documentation.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"check_suite\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CheckSuiteRerequestedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"rerequested\""]
#[doc = "        },"]
#[doc = "        \"check_suite\": {"]
#[doc = "          \"$ref\": \"#/$defs/CheckSuiteRerequestedCheckSuite\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum CheckSuite {
    #[doc = "CheckSuiteCompleted\n\n<p>All check runs in a check suite have completed, and a conclusion is available.</p>"]
    #[serde(rename = "completed")]
    Completed {
        check_suite: CheckSuiteCompletedCheckSuite,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "CheckSuiteRequested\n\n<p>Someone requested to run a check suite. By default, check suites are automatically created when you create a check run. For more information, see <a href=\"https://docs.github.com/graphql/reference/mutations#createcheckrun\">the GraphQL API documentation for creating a check run</a> or \"<a href=\"https://docs.github.com/rest/checks/runs#create-a-check-run\">Create a check run</a>\" in the REST API documentation.</p>"]
    #[serde(rename = "requested")]
    Requested {
        check_suite: CheckSuiteRequestedCheckSuite,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "CheckSuiteRerequested\n\n<p>Someone requested to re-run the check runs in a check suite. For more information, see <a href=\"https://docs.github.com/graphql/reference/mutations#createchecksuite\">the GraphQL API documentation for creating a check suite</a> or \"<a href=\"https://docs.github.com/rest/checks/suites#create-a-check-suite\">Create a check suite</a>\" in the REST API documentation.</p>"]
    #[serde(rename = "rerequested")]
    Rerequested {
        check_suite: CheckSuiteRerequestedCheckSuite,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&CheckSuite> for CheckSuite {
    fn from(value: &CheckSuite) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/checks/suites#get-a-check-suite\">check_suite</a>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckSuiteCompletedCheckSuite\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/checks/suites#get-a-check-suite\\\">check_suite</a>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"after\","]
#[doc = "    \"app\","]
#[doc = "    \"before\","]
#[doc = "    \"check_runs_url\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_commit\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"id\","]
#[doc = "    \"latest_check_runs_count\","]
#[doc = "    \"node_id\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"status\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"after\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAfter\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"app\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckSuiteCompletedCheckSuiteApp\""]
#[doc = "    },"]
#[doc = "    \"before\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteBefore\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"check_runs_url\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteCheckRunsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteConclusion\","]
#[doc = "      \"description\": \"<p>The summary conclusion for all check runs that are part of the check suite. This value will be <code>null</code> until the check run has <code>completed</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteHeadBranch\","]
#[doc = "      \"description\": \"<p>The head branch name the changes are on.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadCommit\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteHeadSha\","]
#[doc = "      \"description\": \"<p>The SHA of the head commit that is being checked.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"latest_check_runs_count\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteLatestCheckRunsCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuitePullRequests\","]
#[doc = "      \"description\": \"<p>An array of pull requests that match this check suite. A pull request matches a check suite if they have the same <code>head_sha</code> and <code>head_branch</code>. When the check suite's <code>head_branch</code> is in a forked repository it will be <code>null</code> and the <code>pull_requests</code> array will be empty.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"rerequestable\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteRerequestable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"runs_rerequestable\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteRunsRerequestable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteStatus\","]
#[doc = "      \"description\": \"<p>The summary status for all check runs that are part of the check suite. Can be <code>requested</code>, <code>in_progress</code>, or <code>completed</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowRunInProgressWorkflowRunStatus\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteUrl\","]
#[doc = "      \"description\": \"<p>URL that points to the check suite API resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckSuiteCompletedCheckSuite {
    #[doc = ""]
    pub after: Option<String>,
    pub app: CheckSuiteCompletedCheckSuiteApp,
    #[doc = ""]
    pub before: Option<String>,
    #[doc = ""]
    pub check_runs_url: String,
    #[doc = "<p>The summary conclusion for all check runs that are part of the check suite. This value will be <code>null</code> until the check run has <code>completed</code>.</p>"]
    pub conclusion: Option<WorkflowRunCompletedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The head branch name the changes are on.</p>"]
    pub head_branch: Option<String>,
    pub head_commit: WorkflowRunCompletedWorkflowRunHeadCommit,
    #[doc = "<p>The SHA of the head commit that is being checked.</p>"]
    pub head_sha: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub latest_check_runs_count: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>An array of pull requests that match this check suite. A pull request matches a check suite if they have the same <code>head_sha</code> and <code>head_branch</code>. When the check suite's <code>head_branch</code> is in a forked repository it will be <code>null</code> and the <code>pull_requests</code> array will be empty.</p>"]
    pub pull_requests: Vec<DeploymentStatusCreatedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rerequestable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runs_rerequestable: Option<bool>,
    #[doc = "<p>The summary status for all check runs that are part of the check suite. Can be <code>requested</code>, <code>in_progress</code>, or <code>completed</code>.</p>"]
    pub status: Option<WorkflowRunInProgressWorkflowRunStatus>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL that points to the check suite API resource.</p>"]
    pub url: String,
}
impl From<&CheckSuiteCompletedCheckSuite> for CheckSuiteCompletedCheckSuite {
    fn from(value: &CheckSuiteCompletedCheckSuite) -> Self {
        value.clone()
    }
}
#[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckSuiteCompletedCheckSuiteApp\","]
#[doc = "  \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"external_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"owner\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"client_id\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppClientId\","]
#[doc = "      \"description\": \"<p>The client ID of the GitHub app</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppEvents\","]
#[doc = "      \"description\": \"<p>The list of events for the GitHub app\\nSupported values are: <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>content_reference</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_review</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_dispatch</code>, <code>secret_scanning_alert</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_dispatch</code>, <code>workflow_run</code>, <code>merge_group</code>, <code>pull_request_review_thread</code>, <code>workflow_job</code>, <code>merge_queue_entry</code>, <code>security_and_analysis</code>, <code>projects_v2_item</code>, <code>secret_scanning_alert_location</code></p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"external_url\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppExternalUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the GitHub app</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppName\","]
#[doc = "      \"description\": \"<p>The name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssuesReopenedIssuePerformedViaGithubAppPermissions\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppSlug\","]
#[doc = "      \"description\": \"<p>The slug name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CheckSuiteCompletedCheckSuiteAppUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckSuiteCompletedCheckSuiteApp {
    #[doc = "<p>The client ID of the GitHub app</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>The list of events for the GitHub app\nSupported values are: <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>content_reference</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_review</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_dispatch</code>, <code>secret_scanning_alert</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_dispatch</code>, <code>workflow_run</code>, <code>merge_group</code>, <code>pull_request_review_thread</code>, <code>workflow_job</code>, <code>merge_queue_entry</code>, <code>security_and_analysis</code>, <code>projects_v2_item</code>, <code>secret_scanning_alert_location</code></p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub events: Vec<String>,
    #[doc = ""]
    pub external_url: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the GitHub app</p>"]
    pub id: Option<i64>,
    #[doc = "<p>The name of the GitHub app</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<IssuesReopenedIssuePerformedViaGithubAppPermissions>,
    #[doc = "<p>The slug name of the GitHub app</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[doc = ""]
    pub updated_at: Option<String>,
}
impl From<&CheckSuiteCompletedCheckSuiteApp> for CheckSuiteCompletedCheckSuiteApp {
    fn from(value: &CheckSuiteCompletedCheckSuiteApp) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/checks/suites#get-a-check-suite\">check_suite</a>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckSuiteRequestedCheckSuite\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/checks/suites#get-a-check-suite\\\">check_suite</a>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"after\","]
#[doc = "    \"app\","]
#[doc = "    \"before\","]
#[doc = "    \"check_runs_url\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_commit\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"id\","]
#[doc = "    \"latest_check_runs_count\","]
#[doc = "    \"node_id\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"status\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"after\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteAfter\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"app\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckSuiteCompletedCheckSuiteApp\""]
#[doc = "    },"]
#[doc = "    \"before\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteBefore\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"check_runs_url\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteCheckRunsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteConclusion\","]
#[doc = "      \"description\": \"<p>The summary conclusion for all check runs that are part of the check suite. This value will be <code>null</code> until the check run has completed.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedCheckRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteHeadBranch\","]
#[doc = "      \"description\": \"<p>The head branch name the changes are on.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadCommit\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteHeadSha\","]
#[doc = "      \"description\": \"<p>The SHA of the head commit that is being checked.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"latest_check_runs_count\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteLatestCheckRunsCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuitePullRequests\","]
#[doc = "      \"description\": \"<p>An array of pull requests that match this check suite. A pull request matches a check suite if they have the same <code>head_sha</code> and <code>head_branch</code>. When the check suite's <code>head_branch</code> is in a forked repository it will be <code>null</code> and the <code>pull_requests</code> array will be empty.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"rerequestable\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteRerequestable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"runs_rerequestable\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteRunsRerequestable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteStatus\","]
#[doc = "      \"description\": \"<p>The summary status for all check runs that are part of the check suite. Can be <code>requested</code>, <code>in_progress</code>, or <code>completed</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CheckSuiteRequestedCheckSuiteStatus\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckSuiteRequestedCheckSuiteUrl\","]
#[doc = "      \"description\": \"<p>URL that points to the check suite API resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckSuiteRequestedCheckSuite {
    #[doc = ""]
    pub after: Option<String>,
    pub app: CheckSuiteCompletedCheckSuiteApp,
    #[doc = ""]
    pub before: Option<String>,
    #[doc = ""]
    pub check_runs_url: String,
    #[doc = "<p>The summary conclusion for all check runs that are part of the check suite. This value will be <code>null</code> until the check run has completed.</p>"]
    pub conclusion: Option<DeploymentStatusCreatedCheckRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The head branch name the changes are on.</p>"]
    pub head_branch: Option<String>,
    pub head_commit: WorkflowRunCompletedWorkflowRunHeadCommit,
    #[doc = "<p>The SHA of the head commit that is being checked.</p>"]
    pub head_sha: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub latest_check_runs_count: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>An array of pull requests that match this check suite. A pull request matches a check suite if they have the same <code>head_sha</code> and <code>head_branch</code>. When the check suite's <code>head_branch</code> is in a forked repository it will be <code>null</code> and the <code>pull_requests</code> array will be empty.</p>"]
    pub pull_requests: Vec<DeploymentStatusCreatedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rerequestable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runs_rerequestable: Option<bool>,
    #[doc = "<p>The summary status for all check runs that are part of the check suite. Can be <code>requested</code>, <code>in_progress</code>, or <code>completed</code>.</p>"]
    pub status: Option<CheckSuiteRequestedCheckSuiteStatus>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL that points to the check suite API resource.</p>"]
    pub url: String,
}
impl From<&CheckSuiteRequestedCheckSuite> for CheckSuiteRequestedCheckSuite {
    fn from(value: &CheckSuiteRequestedCheckSuite) -> Self {
        value.clone()
    }
}
#[doc = "CheckSuiteRequestedCheckSuiteStatus"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"in_progress\","]
#[doc = "    \"queued\","]
#[doc = "    \"requested\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CheckSuiteRequestedCheckSuiteStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "requested")]
    Requested,
}
impl From<&CheckSuiteRequestedCheckSuiteStatus> for CheckSuiteRequestedCheckSuiteStatus {
    fn from(value: &CheckSuiteRequestedCheckSuiteStatus) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CheckSuiteRequestedCheckSuiteStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::InProgress => write!(f, "in_progress"),
            Self::Queued => write!(f, "queued"),
            Self::Requested => write!(f, "requested"),
        }
    }
}
impl std::str::FromStr for CheckSuiteRequestedCheckSuiteStatus {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "in_progress" => Ok(Self::InProgress),
            "queued" => Ok(Self::Queued),
            "requested" => Ok(Self::Requested),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CheckSuiteRequestedCheckSuiteStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CheckSuiteRequestedCheckSuiteStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CheckSuiteRequestedCheckSuiteStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/checks/suites#get-a-check-suite\">check_suite</a>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CheckSuiteRerequestedCheckSuite\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/checks/suites#get-a-check-suite\\\">check_suite</a>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"after\","]
#[doc = "    \"app\","]
#[doc = "    \"before\","]
#[doc = "    \"check_runs_url\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_commit\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"id\","]
#[doc = "    \"latest_check_runs_count\","]
#[doc = "    \"node_id\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"status\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"after\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteAfter\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"app\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckSuiteCompletedCheckSuiteApp\""]
#[doc = "    },"]
#[doc = "    \"before\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteBefore\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"check_runs_url\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteCheckRunsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteConclusion\","]
#[doc = "      \"description\": \"<p>The summary conclusion for all check runs that are part of the check suite. This value will be <code>null</code> until the check run has completed.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentCreatedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteHeadBranch\","]
#[doc = "      \"description\": \"<p>The head branch name the changes are on.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadCommit\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteHeadSha\","]
#[doc = "      \"description\": \"<p>The SHA of the head commit that is being checked.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"latest_check_runs_count\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteLatestCheckRunsCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuitePullRequests\","]
#[doc = "      \"description\": \"<p>An array of pull requests that match this check suite. A pull request matches a check suite if they have the same <code>head_sha</code> and <code>head_branch</code>. When the check suite's <code>head_branch</code> is in a forked repository it will be <code>null</code> and the <code>pull_requests</code> array will be empty.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"rerequestable\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteRerequestable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"runs_rerequestable\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteRunsRerequestable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteStatus\","]
#[doc = "      \"description\": \"<p>The summary status for all check runs that are part of the check suite. Can be <code>requested</code>, <code>in_progress</code>, or <code>completed</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CheckSuiteRequestedCheckSuiteStatus\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CheckSuiteRerequestedCheckSuiteUrl\","]
#[doc = "      \"description\": \"<p>URL that points to the check suite API resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CheckSuiteRerequestedCheckSuite {
    #[doc = ""]
    pub after: Option<String>,
    pub app: CheckSuiteCompletedCheckSuiteApp,
    #[doc = ""]
    pub before: Option<String>,
    #[doc = ""]
    pub check_runs_url: String,
    #[doc = "<p>The summary conclusion for all check runs that are part of the check suite. This value will be <code>null</code> until the check run has completed.</p>"]
    pub conclusion: Option<DeploymentCreatedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The head branch name the changes are on.</p>"]
    pub head_branch: Option<String>,
    pub head_commit: WorkflowRunCompletedWorkflowRunHeadCommit,
    #[doc = "<p>The SHA of the head commit that is being checked.</p>"]
    pub head_sha: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub latest_check_runs_count: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>An array of pull requests that match this check suite. A pull request matches a check suite if they have the same <code>head_sha</code> and <code>head_branch</code>. When the check suite's <code>head_branch</code> is in a forked repository it will be <code>null</code> and the <code>pull_requests</code> array will be empty.</p>"]
    pub pull_requests: Vec<DeploymentStatusCreatedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rerequestable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runs_rerequestable: Option<bool>,
    #[doc = "<p>The summary status for all check runs that are part of the check suite. Can be <code>requested</code>, <code>in_progress</code>, or <code>completed</code>.</p>"]
    pub status: Option<CheckSuiteRequestedCheckSuiteStatus>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL that points to the check suite API resource.</p>"]
    pub url: String,
}
impl From<&CheckSuiteRerequestedCheckSuite> for CheckSuiteRerequestedCheckSuite {
    fn from(value: &CheckSuiteRerequestedCheckSuite) -> Self {
        value.clone()
    }
}
#[doc = "CodeScanningAlert"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"code_scanning_alert\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranch\","]
#[doc = "      \"description\": \"<p>A previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"commit_oid\","]
#[doc = "        \"ref\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CodeScanningAlertAppearedInBranchAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"appeared_in_branch\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlert\""]
#[doc = "        },"]
#[doc = "        \"commit_oid\": {"]
#[doc = "          \"title\": \"CodeScanningAlertAppearedInBranchCommitOid\","]
#[doc = "          \"description\": \"<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"ref\": {"]
#[doc = "          \"title\": \"CodeScanningAlertAppearedInBranchRef\","]
#[doc = "          \"description\": \"<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUser\","]
#[doc = "      \"description\": \"<p>Someone closed a code scanning alert.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"commit_oid\","]
#[doc = "        \"ref\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CodeScanningAlertClosedByUserAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"closed_by_user\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlert\""]
#[doc = "        },"]
#[doc = "        \"commit_oid\": {"]
#[doc = "          \"title\": \"CodeScanningAlertClosedByUserCommitOid\","]
#[doc = "          \"description\": \"<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"ref\": {"]
#[doc = "          \"title\": \"CodeScanningAlertClosedByUserRef\","]
#[doc = "          \"description\": \"<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CodeScanningAlertCreated\","]
#[doc = "      \"description\": \"<p>A code scanning alert was created in a repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"commit_oid\","]
#[doc = "        \"ref\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CodeScanningAlertCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertCreatedAlert\""]
#[doc = "        },"]
#[doc = "        \"commit_oid\": {"]
#[doc = "          \"title\": \"CodeScanningAlertCreatedCommitOid\","]
#[doc = "          \"description\": \"<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"ref\": {"]
#[doc = "          \"title\": \"CodeScanningAlertCreatedRef\","]
#[doc = "          \"description\": \"<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CodeScanningAlertFixed\","]
#[doc = "      \"description\": \"<p>A code scanning alert was fixed in a branch by a commit.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"commit_oid\","]
#[doc = "        \"ref\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CodeScanningAlertFixedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"fixed\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertFixedAlert\""]
#[doc = "        },"]
#[doc = "        \"commit_oid\": {"]
#[doc = "          \"title\": \"CodeScanningAlertFixedCommitOid\","]
#[doc = "          \"description\": \"<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"ref\": {"]
#[doc = "          \"title\": \"CodeScanningAlertFixedRef\","]
#[doc = "          \"description\": \"<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CodeScanningAlertReopened\","]
#[doc = "      \"description\": \"<p>A previously fixed code scanning alert reappeared in a branch.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"commit_oid\","]
#[doc = "        \"ref\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CodeScanningAlertReopenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reopened\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"title\": \"CodeScanningAlertReopenedAlert\","]
#[doc = "          \"description\": \"<p>The code scanning alert involved in the event.</p>\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/CodeScanningAlertReopenedAlert\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"commit_oid\": {"]
#[doc = "          \"title\": \"CodeScanningAlertReopenedCommitOid\","]
#[doc = "          \"description\": \"<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"ref\": {"]
#[doc = "          \"title\": \"CodeScanningAlertReopenedRef\","]
#[doc = "          \"description\": \"<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUser\","]
#[doc = "      \"description\": \"<p>Someone reopened a code scanning alert.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"commit_oid\","]
#[doc = "        \"ref\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CodeScanningAlertReopenedByUserAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reopened_by_user\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertReopenedByUserAlert\""]
#[doc = "        },"]
#[doc = "        \"commit_oid\": {"]
#[doc = "          \"title\": \"CodeScanningAlertReopenedByUserCommitOid\","]
#[doc = "          \"description\": \"<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"ref\": {"]
#[doc = "          \"title\": \"CodeScanningAlertReopenedByUserRef\","]
#[doc = "          \"description\": \"<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum CodeScanningAlert {
    #[doc = "CodeScanningAlertAppearedInBranch\n\n<p>A previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.</p>"]
    #[serde(rename = "appeared_in_branch")]
    AppearedInBranch {
        alert: CodeScanningAlertAppearedInBranchAlert,
        #[doc = "<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        commit_oid: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        #[serde(rename = "ref")]
        ref_: String,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "CodeScanningAlertClosedByUser\n\n<p>Someone closed a code scanning alert.</p>"]
    #[serde(rename = "closed_by_user")]
    ClosedByUser {
        alert: CodeScanningAlertClosedByUserAlert,
        #[doc = "<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        commit_oid: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        #[serde(rename = "ref")]
        ref_: String,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "CodeScanningAlertCreated\n\n<p>A code scanning alert was created in a repository.</p>"]
    #[serde(rename = "created")]
    Created {
        alert: CodeScanningAlertCreatedAlert,
        #[doc = "<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        commit_oid: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        #[serde(rename = "ref")]
        ref_: String,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "CodeScanningAlertFixed\n\n<p>A code scanning alert was fixed in a branch by a commit.</p>"]
    #[serde(rename = "fixed")]
    Fixed {
        alert: CodeScanningAlertFixedAlert,
        #[doc = "<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        commit_oid: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        #[serde(rename = "ref")]
        ref_: String,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "CodeScanningAlertReopened\n\n<p>A previously fixed code scanning alert reappeared in a branch.</p>"]
    #[serde(rename = "reopened")]
    Reopened {
        #[doc = "<p>The code scanning alert involved in the event.</p>"]
        alert: Option<CodeScanningAlertReopenedAlert>,
        #[doc = "<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        commit_oid: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        #[serde(rename = "ref")]
        ref_: Option<String>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "CodeScanningAlertReopenedByUser\n\n<p>Someone reopened a code scanning alert.</p>"]
    #[serde(rename = "reopened_by_user")]
    ReopenedByUser {
        alert: CodeScanningAlertReopenedByUserAlert,
        #[doc = "<p>The commit SHA of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        commit_oid: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>The Git reference of the code scanning alert. When the action is <code>reopened_by_user</code> or <code>closed_by_user</code>, the event was triggered by the <code>sender</code> and this value will be empty.</p>"]
        #[serde(rename = "ref")]
        ref_: String,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&CodeScanningAlert> for CodeScanningAlert {
    fn from(value: &CodeScanningAlert) -> Self {
        value.clone()
    }
}
#[doc = "<p>The code scanning alert involved in the event.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertAppearedInBranchAlert\","]
#[doc = "  \"description\": \"<p>The code scanning alert involved in the event.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"dismissed_at\","]
#[doc = "    \"dismissed_by\","]
#[doc = "    \"dismissed_reason\","]
#[doc = "    \"html_url\","]
#[doc = "    \"number\","]
#[doc = "    \"rule\","]
#[doc = "    \"state\","]
#[doc = "    \"tool\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dismissed_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertDismissedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_by\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertDismissedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_reason\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertDismissedReason\","]
#[doc = "      \"description\": \"<p>The reason for dismissing or closing the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertDismissedReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertHtmlUrl\","]
#[doc = "      \"description\": \"<p>The GitHub URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"most_recent_instance\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstance\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstance\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertNumber\","]
#[doc = "      \"description\": \"<p>The code scanning alert number.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"rule\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertRule\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState\""]
#[doc = "    },"]
#[doc = "    \"tool\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertTool\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertAppearedInBranchAlert {
    #[doc = "<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>"]
    pub created_at: String,
    #[doc = "<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub dismissed_at: Option<String>,
    #[doc = ""]
    pub dismissed_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>The reason for dismissing or closing the alert.</p>"]
    pub dismissed_reason: Option<CodeScanningAlertAppearedInBranchAlertDismissedReason>,
    #[doc = "<p>The GitHub URL of the alert resource.</p>"]
    pub html_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub most_recent_instance: Option<CodeScanningAlertAppearedInBranchAlertMostRecentInstance>,
    #[doc = "<p>The code scanning alert number.</p>"]
    pub number: i64,
    pub rule: CodeScanningAlertAppearedInBranchAlertRule,
    pub state: CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState,
    pub tool: CodeScanningAlertAppearedInBranchAlertTool,
    #[doc = ""]
    pub url: String,
}
impl From<&CodeScanningAlertAppearedInBranchAlert> for CodeScanningAlertAppearedInBranchAlert {
    fn from(value: &CodeScanningAlertAppearedInBranchAlert) -> Self {
        value.clone()
    }
}
#[doc = "CodeScanningAlertAppearedInBranchAlertDismissedReason"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"false positive\","]
#[doc = "    \"used in tests\","]
#[doc = "    \"won't fix\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CodeScanningAlertAppearedInBranchAlertDismissedReason {
    #[serde(rename = "false positive")]
    FalsePositive,
    #[serde(rename = "used in tests")]
    UsedInTests,
    #[serde(rename = "won't fix")]
    WontFix,
}
impl From<&CodeScanningAlertAppearedInBranchAlertDismissedReason>
    for CodeScanningAlertAppearedInBranchAlertDismissedReason
{
    fn from(value: &CodeScanningAlertAppearedInBranchAlertDismissedReason) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CodeScanningAlertAppearedInBranchAlertDismissedReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::FalsePositive => write!(f, "false positive"),
            Self::UsedInTests => write!(f, "used in tests"),
            Self::WontFix => write!(f, "won't fix"),
        }
    }
}
impl std::str::FromStr for CodeScanningAlertAppearedInBranchAlertDismissedReason {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "false positive" => Ok(Self::FalsePositive),
            "used in tests" => Ok(Self::UsedInTests),
            "won't fix" => Ok(Self::WontFix),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CodeScanningAlertAppearedInBranchAlertDismissedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CodeScanningAlertAppearedInBranchAlertDismissedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CodeScanningAlertAppearedInBranchAlertDismissedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "CodeScanningAlertAppearedInBranchAlertMostRecentInstance"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"analysis_key\","]
#[doc = "    \"environment\","]
#[doc = "    \"ref\","]
#[doc = "    \"state\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"analysis_key\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceAnalysisKey\","]
#[doc = "      \"description\": \"<p>Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"category\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceCategory\","]
#[doc = "      \"description\": \"<p>Identifies the configuration under which the analysis was executed.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"classifications\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceClassifications\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"commit_sha\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceEnvironment\","]
#[doc = "      \"description\": \"<p>Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"location\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation\""]
#[doc = "    },"]
#[doc = "    \"message\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceRef\","]
#[doc = "      \"description\": \"<p>The full Git reference, formatted as <code>refs/heads/&#x3C;branch name></code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertAppearedInBranchAlertMostRecentInstance {
    #[doc = "<p>Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.</p>"]
    pub analysis_key: String,
    #[doc = "<p>Identifies the configuration under which the analysis was executed.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub classifications: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commit_sha: Option<String>,
    #[doc = "<p>Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.</p>"]
    pub environment: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<CodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage>,
    #[doc = "<p>The full Git reference, formatted as <code>refs/heads/&#x3C;branch name></code>.</p>"]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub state: CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState,
}
impl From<&CodeScanningAlertAppearedInBranchAlertMostRecentInstance>
    for CodeScanningAlertAppearedInBranchAlertMostRecentInstance
{
    fn from(value: &CodeScanningAlertAppearedInBranchAlertMostRecentInstance) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"end_column\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocationEndColumn\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"end_line\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocationEndLine\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocationPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"start_column\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocationStartColumn\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"start_line\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocationStartLine\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end_column: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end_line: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start_column: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start_line: Option<i64>,
}
impl From<&CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation>
    for CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation
{
    fn from(value: &CodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"text\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessageText\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}
impl From<&CodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage>
    for CodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage
{
    fn from(value: &CodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage) -> Self {
        value.clone()
    }
}
#[doc = "<p>State of a code scanning alert.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState\","]
#[doc = "  \"description\": \"<p>State of a code scanning alert.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"dismissed\","]
#[doc = "    \"fixed\","]
#[doc = "    \"open\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState {
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "open")]
    Open,
}
impl From<&CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState>
    for CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState
{
    fn from(value: &CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Dismissed => write!(f, "dismissed"),
            Self::Fixed => write!(f, "fixed"),
            Self::Open => write!(f, "open"),
        }
    }
}
impl std::str::FromStr for CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "dismissed" => Ok(Self::Dismissed),
            "fixed" => Ok(Self::Fixed),
            "open" => Ok(Self::Open),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertAppearedInBranchAlertRule\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"id\","]
#[doc = "    \"severity\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertRuleDescription\","]
#[doc = "      \"description\": \"<p>A short description of the rule used to detect the alert.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertRuleId\","]
#[doc = "      \"description\": \"<p>A unique identifier for the rule used to detect the alert.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"severity\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertRuleSeverity\","]
#[doc = "      \"description\": \"<p>The severity of the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertRuleSeverity\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertAppearedInBranchAlertRule {
    #[doc = "<p>A short description of the rule used to detect the alert.</p>"]
    pub description: String,
    #[doc = "<p>A unique identifier for the rule used to detect the alert.</p>"]
    pub id: String,
    #[doc = "<p>The severity of the alert.</p>"]
    pub severity: Option<CodeScanningAlertAppearedInBranchAlertRuleSeverity>,
}
impl From<&CodeScanningAlertAppearedInBranchAlertRule>
    for CodeScanningAlertAppearedInBranchAlertRule
{
    fn from(value: &CodeScanningAlertAppearedInBranchAlertRule) -> Self {
        value.clone()
    }
}
#[doc = "CodeScanningAlertAppearedInBranchAlertRuleSeverity"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"error\","]
#[doc = "    \"none\","]
#[doc = "    \"note\","]
#[doc = "    \"warning\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CodeScanningAlertAppearedInBranchAlertRuleSeverity {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "note")]
    Note,
    #[serde(rename = "warning")]
    Warning,
}
impl From<&CodeScanningAlertAppearedInBranchAlertRuleSeverity>
    for CodeScanningAlertAppearedInBranchAlertRuleSeverity
{
    fn from(value: &CodeScanningAlertAppearedInBranchAlertRuleSeverity) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CodeScanningAlertAppearedInBranchAlertRuleSeverity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Error => write!(f, "error"),
            Self::None => write!(f, "none"),
            Self::Note => write!(f, "note"),
            Self::Warning => write!(f, "warning"),
        }
    }
}
impl std::str::FromStr for CodeScanningAlertAppearedInBranchAlertRuleSeverity {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "error" => Ok(Self::Error),
            "none" => Ok(Self::None),
            "note" => Ok(Self::Note),
            "warning" => Ok(Self::Warning),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CodeScanningAlertAppearedInBranchAlertRuleSeverity {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CodeScanningAlertAppearedInBranchAlertRuleSeverity {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CodeScanningAlertAppearedInBranchAlertRuleSeverity {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertAppearedInBranchAlertTool\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"version\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertToolName\","]
#[doc = "      \"description\": \"<p>The name of the tool used to generate the code scanning analysis alert.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"CodeScanningAlertAppearedInBranchAlertToolVersion\","]
#[doc = "      \"description\": \"<p>The version of the tool used to detect the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertAppearedInBranchAlertTool {
    #[doc = "<p>The name of the tool used to generate the code scanning analysis alert.</p>"]
    pub name: String,
    #[doc = "<p>The version of the tool used to detect the alert.</p>"]
    pub version: Option<String>,
}
impl From<&CodeScanningAlertAppearedInBranchAlertTool>
    for CodeScanningAlertAppearedInBranchAlertTool
{
    fn from(value: &CodeScanningAlertAppearedInBranchAlertTool) -> Self {
        value.clone()
    }
}
#[doc = "<p>The code scanning alert involved in the event.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertClosedByUserAlert\","]
#[doc = "  \"description\": \"<p>The code scanning alert involved in the event.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"dismissed_at\","]
#[doc = "    \"dismissed_by\","]
#[doc = "    \"dismissed_reason\","]
#[doc = "    \"html_url\","]
#[doc = "    \"number\","]
#[doc = "    \"rule\","]
#[doc = "    \"state\","]
#[doc = "    \"tool\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dismissed_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertDismissedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dismissed_by\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertDismissedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_reason\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertDismissedReason\","]
#[doc = "      \"description\": \"<p>The reason for dismissing or closing the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertDismissedReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertHtmlUrl\","]
#[doc = "      \"description\": \"<p>The GitHub URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"most_recent_instance\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertMostRecentInstance\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstance\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertNumber\","]
#[doc = "      \"description\": \"<p>The code scanning alert number.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"rule\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlertRule\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertState\","]
#[doc = "      \"description\": \"<p>State of a code scanning alert.</p>\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"dismissed\","]
#[doc = "        \"fixed\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"tool\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlertTool\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertClosedByUserAlert {
    #[doc = "<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>"]
    pub created_at: String,
    #[doc = "<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub dismissed_at: String,
    #[doc = ""]
    pub dismissed_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>The reason for dismissing or closing the alert.</p>"]
    pub dismissed_reason: Option<CodeScanningAlertAppearedInBranchAlertDismissedReason>,
    #[doc = "<p>The GitHub URL of the alert resource.</p>"]
    pub html_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub most_recent_instance: Option<CodeScanningAlertAppearedInBranchAlertMostRecentInstance>,
    #[doc = "<p>The code scanning alert number.</p>"]
    pub number: i64,
    pub rule: CodeScanningAlertClosedByUserAlertRule,
    #[doc = "<p>State of a code scanning alert.</p>"]
    pub state: CodeScanningAlertClosedByUserAlertState,
    pub tool: CodeScanningAlertClosedByUserAlertTool,
    #[doc = ""]
    pub url: String,
}
impl From<&CodeScanningAlertClosedByUserAlert> for CodeScanningAlertClosedByUserAlert {
    fn from(value: &CodeScanningAlertClosedByUserAlert) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertClosedByUserAlertRule\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"id\","]
#[doc = "    \"severity\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertRuleDescription\","]
#[doc = "      \"description\": \"<p>A short description of the rule used to detect the alert.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_description\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertRuleFullDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"help\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertRuleHelp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"help_uri\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertRuleHelpUri\","]
#[doc = "      \"description\": \"<p>A link to the documentation for the rule used to detect the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertRuleId\","]
#[doc = "      \"description\": \"<p>A unique identifier for the rule used to detect the alert.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertRuleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"severity\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertRuleSeverity\","]
#[doc = "      \"description\": \"<p>The severity of the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertRuleSeverity\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"tags\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertRuleTags\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertClosedByUserAlertRule {
    #[doc = "<p>A short description of the rule used to detect the alert.</p>"]
    pub description: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub full_description: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub help: Option<String>,
    #[doc = "<p>A link to the documentation for the rule used to detect the alert.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub help_uri: Option<String>,
    #[doc = "<p>A unique identifier for the rule used to detect the alert.</p>"]
    pub id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "<p>The severity of the alert.</p>"]
    pub severity: Option<CodeScanningAlertAppearedInBranchAlertRuleSeverity>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}
impl From<&CodeScanningAlertClosedByUserAlertRule> for CodeScanningAlertClosedByUserAlertRule {
    fn from(value: &CodeScanningAlertClosedByUserAlertRule) -> Self {
        value.clone()
    }
}
#[doc = "<p>State of a code scanning alert.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertClosedByUserAlertState\","]
#[doc = "  \"description\": \"<p>State of a code scanning alert.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"dismissed\","]
#[doc = "    \"fixed\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CodeScanningAlertClosedByUserAlertState {
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
}
impl From<&CodeScanningAlertClosedByUserAlertState> for CodeScanningAlertClosedByUserAlertState {
    fn from(value: &CodeScanningAlertClosedByUserAlertState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CodeScanningAlertClosedByUserAlertState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Dismissed => write!(f, "dismissed"),
            Self::Fixed => write!(f, "fixed"),
        }
    }
}
impl std::str::FromStr for CodeScanningAlertClosedByUserAlertState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "dismissed" => Ok(Self::Dismissed),
            "fixed" => Ok(Self::Fixed),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CodeScanningAlertClosedByUserAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CodeScanningAlertClosedByUserAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CodeScanningAlertClosedByUserAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertClosedByUserAlertTool\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\","]
#[doc = "    \"version\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"guid\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertToolGuid\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertToolName\","]
#[doc = "      \"description\": \"<p>The name of the tool used to generate the code scanning analysis alert.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"CodeScanningAlertClosedByUserAlertToolVersion\","]
#[doc = "      \"description\": \"<p>The version of the tool used to detect the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertClosedByUserAlertTool {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub guid: Option<String>,
    #[doc = "<p>The name of the tool used to generate the code scanning analysis alert.</p>"]
    pub name: String,
    #[doc = "<p>The version of the tool used to detect the alert.</p>"]
    pub version: Option<String>,
}
impl From<&CodeScanningAlertClosedByUserAlertTool> for CodeScanningAlertClosedByUserAlertTool {
    fn from(value: &CodeScanningAlertClosedByUserAlertTool) -> Self {
        value.clone()
    }
}
#[doc = "<p>The code scanning alert involved in the event.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertCreatedAlert\","]
#[doc = "  \"description\": \"<p>The code scanning alert involved in the event.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"dismissed_at\","]
#[doc = "    \"dismissed_by\","]
#[doc = "    \"dismissed_reason\","]
#[doc = "    \"html_url\","]
#[doc = "    \"number\","]
#[doc = "    \"rule\","]
#[doc = "    \"state\","]
#[doc = "    \"tool\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertDismissedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"dismissed_by\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertDismissedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"dismissed_comment\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertDismissedComment\","]
#[doc = "      \"description\": \"<p>The dismissal comment associated with the dismissal of the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_reason\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertDismissedReason\","]
#[doc = "      \"description\": \"<p>The reason for dismissing or closing the alert. Can be one of: <code>false positive</code>, <code>won't fix</code>, and <code>used in tests</code>.</p>\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"fixed_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertFixedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertHtmlUrl\","]
#[doc = "      \"description\": \"<p>The GitHub URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"instances_url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertInstancesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"most_recent_instance\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertMostRecentInstance\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstance\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertNumber\","]
#[doc = "      \"description\": \"<p>The code scanning alert number.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"rule\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlertRule\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertState\","]
#[doc = "      \"description\": \"<p>State of a code scanning alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"dismissed\","]
#[doc = "            \"open\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"tool\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertTool\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlertTool\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertCreatedAlertUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertCreatedAlert {
    #[doc = "<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>"]
    pub created_at: Option<String>,
    #[doc = "<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub dismissed_at: (),
    #[doc = ""]
    pub dismissed_by: (),
    #[doc = "<p>The dismissal comment associated with the dismissal of the alert.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dismissed_comment: Option<String>,
    #[doc = "<p>The reason for dismissing or closing the alert. Can be one of: <code>false positive</code>, <code>won't fix</code>, and <code>used in tests</code>.</p>"]
    pub dismissed_reason: (),
    #[doc = ""]
    #[serde(default)]
    pub fixed_at: (),
    #[doc = "<p>The GitHub URL of the alert resource.</p>"]
    pub html_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub most_recent_instance: Option<CodeScanningAlertAppearedInBranchAlertMostRecentInstance>,
    #[doc = "<p>The code scanning alert number.</p>"]
    pub number: i64,
    pub rule: CodeScanningAlertClosedByUserAlertRule,
    #[doc = "<p>State of a code scanning alert.</p>"]
    pub state: Option<CodeScanningAlertCreatedAlertState>,
    #[doc = ""]
    pub tool: Option<CodeScanningAlertClosedByUserAlertTool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[doc = ""]
    pub url: String,
}
impl From<&CodeScanningAlertCreatedAlert> for CodeScanningAlertCreatedAlert {
    fn from(value: &CodeScanningAlertCreatedAlert) -> Self {
        value.clone()
    }
}
#[doc = "CodeScanningAlertCreatedAlertState"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"dismissed\","]
#[doc = "    \"open\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CodeScanningAlertCreatedAlertState {
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "open")]
    Open,
}
impl From<&CodeScanningAlertCreatedAlertState> for CodeScanningAlertCreatedAlertState {
    fn from(value: &CodeScanningAlertCreatedAlertState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CodeScanningAlertCreatedAlertState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Dismissed => write!(f, "dismissed"),
            Self::Open => write!(f, "open"),
        }
    }
}
impl std::str::FromStr for CodeScanningAlertCreatedAlertState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "dismissed" => Ok(Self::Dismissed),
            "open" => Ok(Self::Open),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CodeScanningAlertCreatedAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CodeScanningAlertCreatedAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CodeScanningAlertCreatedAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The code scanning alert involved in the event.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertFixedAlert\","]
#[doc = "  \"description\": \"<p>The code scanning alert involved in the event.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"dismissed_at\","]
#[doc = "    \"dismissed_by\","]
#[doc = "    \"dismissed_reason\","]
#[doc = "    \"html_url\","]
#[doc = "    \"number\","]
#[doc = "    \"rule\","]
#[doc = "    \"state\","]
#[doc = "    \"tool\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dismissed_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertDismissedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_by\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertDismissedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_reason\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertDismissedReason\","]
#[doc = "      \"description\": \"<p>The reason for dismissing or closing the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertDismissedReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertHtmlUrl\","]
#[doc = "      \"description\": \"<p>The GitHub URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"instances_url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertInstancesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"most_recent_instance\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertMostRecentInstance\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstance\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertNumber\","]
#[doc = "      \"description\": \"<p>The code scanning alert number.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"rule\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlertRule\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertState\","]
#[doc = "      \"description\": \"<p>State of a code scanning alert.</p>\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"fixed\""]
#[doc = "    },"]
#[doc = "    \"tool\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlertTool\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertFixedAlertUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertFixedAlert {
    #[doc = "<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>"]
    pub created_at: String,
    #[doc = "<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub dismissed_at: Option<String>,
    #[doc = ""]
    pub dismissed_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>The reason for dismissing or closing the alert.</p>"]
    pub dismissed_reason: Option<CodeScanningAlertAppearedInBranchAlertDismissedReason>,
    #[doc = "<p>The GitHub URL of the alert resource.</p>"]
    pub html_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub most_recent_instance: Option<CodeScanningAlertAppearedInBranchAlertMostRecentInstance>,
    #[doc = "<p>The code scanning alert number.</p>"]
    pub number: i64,
    pub rule: CodeScanningAlertClosedByUserAlertRule,
    #[doc = "<p>State of a code scanning alert.</p>"]
    pub state: String,
    pub tool: CodeScanningAlertClosedByUserAlertTool,
    #[doc = ""]
    pub url: String,
}
impl From<&CodeScanningAlertFixedAlert> for CodeScanningAlertFixedAlert {
    fn from(value: &CodeScanningAlertFixedAlert) -> Self {
        value.clone()
    }
}
#[doc = "CodeScanningAlertReopenedAlert"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"dismissed_at\","]
#[doc = "    \"dismissed_by\","]
#[doc = "    \"dismissed_reason\","]
#[doc = "    \"html_url\","]
#[doc = "    \"number\","]
#[doc = "    \"rule\","]
#[doc = "    \"state\","]
#[doc = "    \"tool\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedAlertCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dismissed_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedAlertDismissedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_by\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedAlertDismissedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_reason\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedAlertDismissedReason\","]
#[doc = "      \"description\": \"<p>The reason for dismissing or closing the alert. Can be one of: <code>false positive</code>, <code>won't fix</code>, and <code>used in tests</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedAlertHtmlUrl\","]
#[doc = "      \"description\": \"<p>The GitHub URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"most_recent_instance\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedAlertMostRecentInstance\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstance\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedAlertNumber\","]
#[doc = "      \"description\": \"<p>The code scanning alert number.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"rule\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlertRule\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState\""]
#[doc = "    },"]
#[doc = "    \"tool\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertClosedByUserAlertTool\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedAlertUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertReopenedAlert {
    #[doc = "<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>"]
    pub created_at: String,
    #[doc = "<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub dismissed_at: Option<String>,
    #[doc = ""]
    pub dismissed_by: Option<Untyped>,
    #[doc = "<p>The reason for dismissing or closing the alert. Can be one of: <code>false positive</code>, <code>won't fix</code>, and <code>used in tests</code>.</p>"]
    pub dismissed_reason: Option<String>,
    #[doc = "<p>The GitHub URL of the alert resource.</p>"]
    pub html_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub most_recent_instance: Option<CodeScanningAlertAppearedInBranchAlertMostRecentInstance>,
    #[doc = "<p>The code scanning alert number.</p>"]
    pub number: i64,
    pub rule: CodeScanningAlertClosedByUserAlertRule,
    pub state: CodeScanningAlertAppearedInBranchAlertMostRecentInstanceState,
    pub tool: CodeScanningAlertClosedByUserAlertTool,
    #[doc = ""]
    pub url: String,
}
impl From<&CodeScanningAlertReopenedAlert> for CodeScanningAlertReopenedAlert {
    fn from(value: &CodeScanningAlertReopenedAlert) -> Self {
        value.clone()
    }
}
#[doc = "<p>The code scanning alert involved in the event.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertReopenedByUserAlert\","]
#[doc = "  \"description\": \"<p>The code scanning alert involved in the event.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"dismissed_at\","]
#[doc = "    \"dismissed_by\","]
#[doc = "    \"dismissed_reason\","]
#[doc = "    \"html_url\","]
#[doc = "    \"number\","]
#[doc = "    \"rule\","]
#[doc = "    \"state\","]
#[doc = "    \"tool\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dismissed_at\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertDismissedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"dismissed_by\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertDismissedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"dismissed_reason\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertDismissedReason\","]
#[doc = "      \"description\": \"<p>The reason for dismissing or closing the alert. Can be one of: <code>false positive</code>, <code>won't fix</code>, and <code>used in tests</code>.</p>\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertHtmlUrl\","]
#[doc = "      \"description\": \"<p>The GitHub URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"most_recent_instance\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertMostRecentInstance\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertMostRecentInstance\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertNumber\","]
#[doc = "      \"description\": \"<p>The code scanning alert number.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"rule\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertRule\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertState\","]
#[doc = "      \"description\": \"<p>State of a code scanning alert.</p>\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"fixed\","]
#[doc = "        \"open\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"tool\": {"]
#[doc = "      \"$ref\": \"#/$defs/CodeScanningAlertAppearedInBranchAlertTool\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CodeScanningAlertReopenedByUserAlertUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CodeScanningAlertReopenedByUserAlert {
    #[doc = "<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ.</code></p>"]
    pub created_at: String,
    #[doc = "<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub dismissed_at: (),
    #[doc = ""]
    pub dismissed_by: (),
    #[doc = "<p>The reason for dismissing or closing the alert. Can be one of: <code>false positive</code>, <code>won't fix</code>, and <code>used in tests</code>.</p>"]
    pub dismissed_reason: (),
    #[doc = "<p>The GitHub URL of the alert resource.</p>"]
    pub html_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub most_recent_instance: Option<CodeScanningAlertAppearedInBranchAlertMostRecentInstance>,
    #[doc = "<p>The code scanning alert number.</p>"]
    pub number: i64,
    pub rule: CodeScanningAlertAppearedInBranchAlertRule,
    #[doc = "<p>State of a code scanning alert.</p>"]
    pub state: CodeScanningAlertReopenedByUserAlertState,
    pub tool: CodeScanningAlertAppearedInBranchAlertTool,
    #[doc = ""]
    pub url: String,
}
impl From<&CodeScanningAlertReopenedByUserAlert> for CodeScanningAlertReopenedByUserAlert {
    fn from(value: &CodeScanningAlertReopenedByUserAlert) -> Self {
        value.clone()
    }
}
#[doc = "<p>State of a code scanning alert.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CodeScanningAlertReopenedByUserAlertState\","]
#[doc = "  \"description\": \"<p>State of a code scanning alert.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"fixed\","]
#[doc = "    \"open\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CodeScanningAlertReopenedByUserAlertState {
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "open")]
    Open,
}
impl From<&CodeScanningAlertReopenedByUserAlertState>
    for CodeScanningAlertReopenedByUserAlertState
{
    fn from(value: &CodeScanningAlertReopenedByUserAlertState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CodeScanningAlertReopenedByUserAlertState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Fixed => write!(f, "fixed"),
            Self::Open => write!(f, "open"),
        }
    }
}
impl std::str::FromStr for CodeScanningAlertReopenedByUserAlertState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "fixed" => Ok(Self::Fixed),
            "open" => Ok(Self::Open),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CodeScanningAlertReopenedByUserAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CodeScanningAlertReopenedByUserAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CodeScanningAlertReopenedByUserAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "CommitComment"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"commit_comment\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"CommitCommentCreated\","]
#[doc = "      \"description\": \"<p>Someone commented on a commit.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"comment\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CommitCommentCreatedAction\","]
#[doc = "          \"description\": \"<p>The action performed. Can be <code>created</code>.</p>\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/CommitCommentCreatedComment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum CommitComment {
    #[doc = "CommitCommentCreated\n\n<p>Someone commented on a commit.</p>"]
    #[serde(rename = "created")]
    Created {
        comment: CommitCommentCreatedComment,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&CommitComment> for CommitComment {
    fn from(value: &CommitComment) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"$%7BexternalDocsUpapp/api/description/components/schemas/webhooks/issue-comment-created.yamlrl%7D/rest/commits/comments#get-a-commit-comment\">commit comment</a> resource.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CommitCommentCreatedComment\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"$%7BexternalDocsUpapp/api/description/components/schemas/webhooks/issue-comment-created.yamlrl%7D/rest/commits/comments#get-a-commit-comment\\\">commit comment</a> resource.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"commit_id\","]
#[doc = "    \"created_at\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"line\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"position\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentBody\","]
#[doc = "      \"description\": \"<p>The text of the comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commit_id\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentCommitId\","]
#[doc = "      \"description\": \"<p>The SHA of the commit to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentId\","]
#[doc = "      \"description\": \"<p>The ID of the commit comment.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"line\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentLine\","]
#[doc = "      \"description\": \"<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentNodeId\","]
#[doc = "      \"description\": \"<p>The node ID of the commit comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentPath\","]
#[doc = "      \"description\": \"<p>The relative path of the file to which the comment applies.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"position\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentPosition\","]
#[doc = "      \"description\": \"<p>The line index in the diff to which the comment applies.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"CommitCommentCreatedCommentUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CommitCommentCreatedComment {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The text of the comment.</p>"]
    pub body: String,
    #[doc = "<p>The SHA of the commit to which the comment applies.</p>"]
    pub commit_id: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>The ID of the commit comment.</p>"]
    pub id: i64,
    #[doc = "<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>"]
    pub line: Option<i64>,
    #[doc = "<p>The node ID of the commit comment.</p>"]
    pub node_id: String,
    #[doc = "<p>The relative path of the file to which the comment applies.</p>"]
    pub path: Option<String>,
    #[doc = "<p>The line index in the diff to which the comment applies.</p>"]
    pub position: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reactions: Option<DiscussionAnsweredAnswerReactions>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&CommitCommentCreatedComment> for CommitCommentCreatedComment {
    fn from(value: &CommitCommentCreatedComment) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CreateDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"master_branch\","]
#[doc = "    \"pusher_type\","]
#[doc = "    \"ref\","]
#[doc = "    \"ref_type\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"CreateDefaultDescription\","]
#[doc = "      \"description\": \"<p>The repository's current description.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"CreateDefaultMasterBranch\","]
#[doc = "      \"description\": \"<p>The name of the repository's default branch (usually <code>main</code>).</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"pusher_type\": {"]
#[doc = "      \"title\": \"CreateDefaultPusherType\","]
#[doc = "      \"description\": \"<p>The pusher type for the event. Can be either <code>user</code> or a deploy key.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"CreateDefaultRef\","]
#[doc = "      \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/git/refs#get-a-reference\\\"><code>git ref</code></a> resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeleteDefaultRefType\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Create {
    #[doc = "<p>The repository's current description.</p>"]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[doc = "<p>The name of the repository's default branch (usually <code>main</code>).</p>"]
    pub master_branch: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    #[doc = "<p>The pusher type for the event. Can be either <code>user</code> or a deploy key.</p>"]
    pub pusher_type: String,
    #[doc = "<p>The <a href=\"https://docs.github.com/rest/git/refs#get-a-reference\"><code>git ref</code></a> resource.</p>"]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub ref_type: DeleteDefaultRefType,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
}
impl From<&Create> for Create {
    fn from(value: &Create) -> Self {
        value.clone()
    }
}
#[doc = "CustomProperty"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"custom_property\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"CustomPropertyCreated\","]
#[doc = "      \"description\": \"<p>A new custom property was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"definition\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CustomPropertyCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"definition\": {"]
#[doc = "          \"$ref\": \"#/$defs/CustomPropertyCreatedDefinition\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CustomPropertyDeleted\","]
#[doc = "      \"description\": \"<p>A custom property was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"definition\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CustomPropertyDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"definition\": {"]
#[doc = "          \"$ref\": \"#/$defs/CustomPropertyDeletedDefinition\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"CustomPropertyUpdated\","]
#[doc = "      \"description\": \"<p>A custom property was updated.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"definition\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CustomPropertyUpdatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"updated\""]
#[doc = "        },"]
#[doc = "        \"definition\": {"]
#[doc = "          \"$ref\": \"#/$defs/CustomPropertyCreatedDefinition\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum CustomProperty {
    #[doc = "CustomPropertyCreated\n\n<p>A new custom property was created.</p>"]
    #[serde(rename = "created")]
    Created {
        definition: CustomPropertyCreatedDefinition,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "CustomPropertyDeleted\n\n<p>A custom property was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        definition: CustomPropertyDeletedDefinition,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "CustomPropertyUpdated\n\n<p>A custom property was updated.</p>"]
    #[serde(rename = "updated")]
    Updated {
        definition: CustomPropertyCreatedDefinition,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
}
impl From<&CustomProperty> for CustomProperty {
    fn from(value: &CustomProperty) -> Self {
        value.clone()
    }
}
#[doc = "<p>Custom property defined on an organization</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CustomPropertyCreatedDefinition\","]
#[doc = "  \"description\": \"<p>Custom property defined on an organization</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"property_name\","]
#[doc = "    \"value_type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allowed_values\": {"]
#[doc = "      \"title\": \"CustomPropertyCreatedDefinitionAllowedValues\","]
#[doc = "      \"description\": \"<p>An ordered list of the allowed values of the property.\\nThe property can have up to 200 allowed values.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"default_value\": {"]
#[doc = "      \"title\": \"CustomPropertyCreatedDefinitionDefaultValue\","]
#[doc = "      \"description\": \"<p>Default value of the property</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {}"]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"CustomPropertyCreatedDefinitionDescription\","]
#[doc = "      \"description\": \"<p>Short description of the property</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"property_name\": {"]
#[doc = "      \"title\": \"CustomPropertyCreatedDefinitionPropertyName\","]
#[doc = "      \"description\": \"<p>The name of the property</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"required\": {"]
#[doc = "      \"title\": \"CustomPropertyCreatedDefinitionRequired\","]
#[doc = "      \"description\": \"<p>Whether the property is required.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"CustomPropertyCreatedDefinitionUrl\","]
#[doc = "      \"description\": \"<p>The URL that can be used to fetch, update, or delete info about this property via the API.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/CustomPropertyCreatedDefinitionValueType\""]
#[doc = "    },"]
#[doc = "    \"values_editable_by\": {"]
#[doc = "      \"title\": \"CustomPropertyCreatedDefinitionValuesEditableBy\","]
#[doc = "      \"description\": \"<p>Who can edit the values of the property</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CustomPropertyCreatedDefinitionValuesEditableBy\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CustomPropertyCreatedDefinition {
    #[doc = "<p>An ordered list of the allowed values of the property.\nThe property can have up to 200 allowed values.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allowed_values: Option<Vec<String>>,
    #[doc = "<p>Default value of the property</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_value: Option<CustomPropertyCreatedDefinitionDefaultValue>,
    #[doc = "<p>Short description of the property</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = "<p>The name of the property</p>"]
    pub property_name: String,
    #[doc = "<p>Whether the property is required.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    #[doc = "<p>The URL that can be used to fetch, update, or delete info about this property via the API.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    pub value_type: CustomPropertyCreatedDefinitionValueType,
    #[doc = "<p>Who can edit the values of the property</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values_editable_by: Option<CustomPropertyCreatedDefinitionValuesEditableBy>,
}
impl From<&CustomPropertyCreatedDefinition> for CustomPropertyCreatedDefinition {
    fn from(value: &CustomPropertyCreatedDefinition) -> Self {
        value.clone()
    }
}
#[doc = "CustomPropertyCreatedDefinitionDefaultValue"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum CustomPropertyCreatedDefinitionDefaultValue {
    Variant0(String),
    Variant1(Vec<::serde_json::Value>),
}
impl From<&CustomPropertyCreatedDefinitionDefaultValue>
    for CustomPropertyCreatedDefinitionDefaultValue
{
    fn from(value: &CustomPropertyCreatedDefinitionDefaultValue) -> Self {
        value.clone()
    }
}
impl From<Vec<::serde_json::Value>> for CustomPropertyCreatedDefinitionDefaultValue {
    fn from(value: Vec<::serde_json::Value>) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "<p>The type of the value for the property</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CustomPropertyCreatedDefinitionValueType\","]
#[doc = "  \"description\": \"<p>The type of the value for the property</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"multi_select\","]
#[doc = "    \"single_select\","]
#[doc = "    \"string\","]
#[doc = "    \"true_false\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CustomPropertyCreatedDefinitionValueType {
    #[serde(rename = "multi_select")]
    MultiSelect,
    #[serde(rename = "single_select")]
    SingleSelect,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "true_false")]
    TrueFalse,
}
impl From<&CustomPropertyCreatedDefinitionValueType> for CustomPropertyCreatedDefinitionValueType {
    fn from(value: &CustomPropertyCreatedDefinitionValueType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CustomPropertyCreatedDefinitionValueType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::MultiSelect => write!(f, "multi_select"),
            Self::SingleSelect => write!(f, "single_select"),
            Self::String => write!(f, "string"),
            Self::TrueFalse => write!(f, "true_false"),
        }
    }
}
impl std::str::FromStr for CustomPropertyCreatedDefinitionValueType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "multi_select" => Ok(Self::MultiSelect),
            "single_select" => Ok(Self::SingleSelect),
            "string" => Ok(Self::String),
            "true_false" => Ok(Self::TrueFalse),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CustomPropertyCreatedDefinitionValueType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CustomPropertyCreatedDefinitionValueType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CustomPropertyCreatedDefinitionValueType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "CustomPropertyCreatedDefinitionValuesEditableBy"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"org_actors\","]
#[doc = "    \"org_and_repo_actors\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum CustomPropertyCreatedDefinitionValuesEditableBy {
    #[serde(rename = "org_actors")]
    OrgActors,
    #[serde(rename = "org_and_repo_actors")]
    OrgAndRepoActors,
}
impl From<&CustomPropertyCreatedDefinitionValuesEditableBy>
    for CustomPropertyCreatedDefinitionValuesEditableBy
{
    fn from(value: &CustomPropertyCreatedDefinitionValuesEditableBy) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for CustomPropertyCreatedDefinitionValuesEditableBy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::OrgActors => write!(f, "org_actors"),
            Self::OrgAndRepoActors => write!(f, "org_and_repo_actors"),
        }
    }
}
impl std::str::FromStr for CustomPropertyCreatedDefinitionValuesEditableBy {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "org_actors" => Ok(Self::OrgActors),
            "org_and_repo_actors" => Ok(Self::OrgAndRepoActors),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for CustomPropertyCreatedDefinitionValuesEditableBy {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for CustomPropertyCreatedDefinitionValuesEditableBy {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for CustomPropertyCreatedDefinitionValuesEditableBy {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"CustomPropertyDeletedDefinition\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"property_name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"property_name\": {"]
#[doc = "      \"title\": \"CustomPropertyDeletedDefinitionPropertyName\","]
#[doc = "      \"description\": \"<p>The name of the property that was deleted.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CustomPropertyDeletedDefinition {
    #[doc = "<p>The name of the property that was deleted.</p>"]
    pub property_name: String,
}
impl From<&CustomPropertyDeletedDefinition> for CustomPropertyDeletedDefinition {
    fn from(value: &CustomPropertyDeletedDefinition) -> Self {
        value.clone()
    }
}
#[doc = "CustomPropertyValues"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"custom_property_values\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"CustomPropertyValuesUpdated\","]
#[doc = "      \"description\": \"<p>The custom property values of a repository were updated.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"new_property_values\","]
#[doc = "        \"old_property_values\","]
#[doc = "        \"organization\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"CustomPropertyValuesUpdatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"updated\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"new_property_values\": {"]
#[doc = "          \"title\": \"CustomPropertyValuesUpdatedNewPropertyValues\","]
#[doc = "          \"description\": \"<p>The new custom property values for the repository.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/CustomPropertyValuesUpdatedNewPropertyValues\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"old_property_values\": {"]
#[doc = "          \"title\": \"CustomPropertyValuesUpdatedOldPropertyValues\","]
#[doc = "          \"description\": \"<p>The old custom property values for the repository.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/CustomPropertyValuesUpdatedNewPropertyValues\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum CustomPropertyValues {
    #[doc = "CustomPropertyValuesUpdated\n\n<p>The custom property values of a repository were updated.</p>"]
    #[serde(rename = "updated")]
    Updated {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The new custom property values for the repository.</p>"]
        new_property_values: Vec<CustomPropertyValuesUpdatedNewPropertyValues>,
        #[doc = "<p>The old custom property values for the repository.</p>"]
        old_property_values: Vec<CustomPropertyValuesUpdatedNewPropertyValues>,
        organization: Untyped,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
}
impl From<&CustomPropertyValues> for CustomPropertyValues {
    fn from(value: &CustomPropertyValues) -> Self {
        value.clone()
    }
}
#[doc = "CustomPropertyValuesUpdatedNewPropertyValues"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"property_name\","]
#[doc = "    \"value\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"property_name\": {"]
#[doc = "      \"title\": \"CustomPropertyValuesUpdatedNewPropertyValuesPropertyName\","]
#[doc = "      \"description\": \"<p>The name of the property</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"title\": \"CustomPropertyValuesUpdatedNewPropertyValuesValue\","]
#[doc = "      \"description\": \"<p>The value assigned to the property</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {}"]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CustomPropertyValuesUpdatedNewPropertyValues {
    #[doc = "<p>The name of the property</p>"]
    pub property_name: String,
    #[doc = "<p>The value assigned to the property</p>"]
    pub value: Option<CustomPropertyValuesUpdatedNewPropertyValuesValue>,
}
impl From<&CustomPropertyValuesUpdatedNewPropertyValues>
    for CustomPropertyValuesUpdatedNewPropertyValues
{
    fn from(value: &CustomPropertyValuesUpdatedNewPropertyValues) -> Self {
        value.clone()
    }
}
#[doc = "CustomPropertyValuesUpdatedNewPropertyValuesValue"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum CustomPropertyValuesUpdatedNewPropertyValuesValue {
    Variant0(String),
    Variant1(Vec<::serde_json::Value>),
}
impl From<&CustomPropertyValuesUpdatedNewPropertyValuesValue>
    for CustomPropertyValuesUpdatedNewPropertyValuesValue
{
    fn from(value: &CustomPropertyValuesUpdatedNewPropertyValuesValue) -> Self {
        value.clone()
    }
}
impl From<Vec<::serde_json::Value>> for CustomPropertyValuesUpdatedNewPropertyValuesValue {
    fn from(value: Vec<::serde_json::Value>) -> Self {
        Self::Variant1(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeleteDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"pusher_type\","]
#[doc = "    \"ref\","]
#[doc = "    \"ref_type\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"pusher_type\": {"]
#[doc = "      \"title\": \"DeleteDefaultPusherType\","]
#[doc = "      \"description\": \"<p>The pusher type for the event. Can be either <code>user</code> or a deploy key.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"DeleteDefaultRef\","]
#[doc = "      \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/git/refs#get-a-reference\\\"><code>git ref</code></a> resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeleteDefaultRefType\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Delete {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    #[doc = "<p>The pusher type for the event. Can be either <code>user</code> or a deploy key.</p>"]
    pub pusher_type: String,
    #[doc = "<p>The <a href=\"https://docs.github.com/rest/git/refs#get-a-reference\"><code>git ref</code></a> resource.</p>"]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub ref_type: DeleteDefaultRefType,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
}
impl From<&Delete> for Delete {
    fn from(value: &Delete) -> Self {
        value.clone()
    }
}
#[doc = "<p>The type of Git ref object deleted in the repository.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeleteDefaultRefType\","]
#[doc = "  \"description\": \"<p>The type of Git ref object deleted in the repository.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"branch\","]
#[doc = "    \"tag\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeleteDefaultRefType {
    #[serde(rename = "branch")]
    Branch,
    #[serde(rename = "tag")]
    Tag,
}
impl From<&DeleteDefaultRefType> for DeleteDefaultRefType {
    fn from(value: &DeleteDefaultRefType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeleteDefaultRefType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Branch => write!(f, "branch"),
            Self::Tag => write!(f, "tag"),
        }
    }
}
impl std::str::FromStr for DeleteDefaultRefType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "branch" => Ok(Self::Branch),
            "tag" => Ok(Self::Tag),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeleteDefaultRefType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeleteDefaultRefType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeleteDefaultRefType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "DependabotAlert"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"dependabot_alert\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissed\","]
#[doc = "      \"description\": \"<p>A Dependabot alert was automatically closed by a Dependabot auto-triage rule.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DependabotAlertAutoDismissedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"auto_dismissed\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DependabotAlertAutoReopened\","]
#[doc = "      \"description\": \"<p>A Dependabot alert, that had been automatically closed by a Dependabot auto-triage rule, was automatically reopened because the alert metadata or rule changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DependabotAlertAutoReopenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"auto_reopened\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DependabotAlertCreated\","]
#[doc = "      \"description\": \"<p>A manifest file change introduced a vulnerable dependency, or a GitHub Security Advisory was published and an existing dependency was found to be vulnerable.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DependabotAlertCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DependabotAlertDismissed\","]
#[doc = "      \"description\": \"<p>A Dependabot alert was manually closed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DependabotAlertDismissedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"dismissed\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DependabotAlertFixed\","]
#[doc = "      \"description\": \"<p>A manifest file change removed a vulnerability.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DependabotAlertFixedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"fixed\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DependabotAlertReintroduced\","]
#[doc = "      \"description\": \"<p>A manifest file change introduced a vulnerable dependency that had previously been fixed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DependabotAlertReintroducedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reintroduced\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DependabotAlertReopened\","]
#[doc = "      \"description\": \"<p>A Dependabot alert was manually reopened.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DependabotAlertReopenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reopened\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum DependabotAlert {
    #[doc = "DependabotAlertAutoDismissed\n\n<p>A Dependabot alert was automatically closed by a Dependabot auto-triage rule.</p>"]
    #[serde(rename = "auto_dismissed")]
    AutoDismissed {
        alert: DependabotAlertAutoDismissedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DependabotAlertAutoReopened\n\n<p>A Dependabot alert, that had been automatically closed by a Dependabot auto-triage rule, was automatically reopened because the alert metadata or rule changed.</p>"]
    #[serde(rename = "auto_reopened")]
    AutoReopened {
        alert: DependabotAlertAutoDismissedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DependabotAlertCreated\n\n<p>A manifest file change introduced a vulnerable dependency, or a GitHub Security Advisory was published and an existing dependency was found to be vulnerable.</p>"]
    #[serde(rename = "created")]
    Created {
        alert: DependabotAlertAutoDismissedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DependabotAlertDismissed\n\n<p>A Dependabot alert was manually closed.</p>"]
    #[serde(rename = "dismissed")]
    Dismissed {
        alert: DependabotAlertAutoDismissedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DependabotAlertFixed\n\n<p>A manifest file change removed a vulnerability.</p>"]
    #[serde(rename = "fixed")]
    Fixed {
        alert: DependabotAlertAutoDismissedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DependabotAlertReintroduced\n\n<p>A manifest file change introduced a vulnerable dependency that had previously been fixed.</p>"]
    #[serde(rename = "reintroduced")]
    Reintroduced {
        alert: DependabotAlertAutoDismissedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DependabotAlertReopened\n\n<p>A Dependabot alert was manually reopened.</p>"]
    #[serde(rename = "reopened")]
    Reopened {
        alert: DependabotAlertAutoDismissedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&DependabotAlert> for DependabotAlert {
    fn from(value: &DependabotAlert) -> Self {
        value.clone()
    }
}
#[doc = "<p>A Dependabot alert.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DependabotAlertAutoDismissedAlert\","]
#[doc = "  \"description\": \"<p>A Dependabot alert.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"dependency\","]
#[doc = "    \"dismissed_at\","]
#[doc = "    \"dismissed_by\","]
#[doc = "    \"dismissed_comment\","]
#[doc = "    \"dismissed_reason\","]
#[doc = "    \"fixed_at\","]
#[doc = "    \"html_url\","]
#[doc = "    \"number\","]
#[doc = "    \"security_advisory\","]
#[doc = "    \"security_vulnerability\","]
#[doc = "    \"state\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"auto_dismissed_at\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertAutoDismissedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was auto-dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dependency\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertDependency\""]
#[doc = "    },"]
#[doc = "    \"dismissed_at\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertDismissedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_by\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"dismissed_comment\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertDismissedComment\","]
#[doc = "      \"description\": \"<p>An optional comment associated with the alert's dismissal.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dismissed_reason\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertDismissedReason\","]
#[doc = "      \"description\": \"<p>The reason that the alert was dismissed.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertDismissedReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"fixed_at\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertFixedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was no longer detected and was considered fixed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertHtmlUrl\","]
#[doc = "      \"description\": \"<p>The GitHub URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertNumber\","]
#[doc = "      \"description\": \"<p>The security alert number.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"security_advisory\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisory\""]
#[doc = "    },"]
#[doc = "    \"security_vulnerability\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertState\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertUpdatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was last updated in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertUrl\","]
#[doc = "      \"description\": \"<p>The REST API URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DependabotAlertAutoDismissedAlert {
    #[doc = "<p>The time that the alert was auto-dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_dismissed_at: Option<String>,
    #[doc = "<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub created_at: String,
    pub dependency: DependabotAlertAutoDismissedAlertDependency,
    #[doc = "<p>The time that the alert was dismissed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub dismissed_at: Option<String>,
    pub dismissed_by: DiscussionTransferredChangesNewRepositoryOrganization,
    #[doc = "<p>An optional comment associated with the alert's dismissal.</p>"]
    pub dismissed_comment: Option<String>,
    #[doc = "<p>The reason that the alert was dismissed.</p>"]
    pub dismissed_reason: Option<DependabotAlertAutoDismissedAlertDismissedReason>,
    #[doc = "<p>The time that the alert was no longer detected and was considered fixed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub fixed_at: Option<String>,
    #[doc = "<p>The GitHub URL of the alert resource.</p>"]
    pub html_url: String,
    #[doc = "<p>The security alert number.</p>"]
    pub number: i64,
    pub security_advisory: DependabotAlertAutoDismissedAlertSecurityAdvisory,
    pub security_vulnerability: DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities,
    pub state: DependabotAlertAutoDismissedAlertState,
    #[doc = "<p>The time that the alert was last updated in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub updated_at: String,
    #[doc = "<p>The REST API URL of the alert resource.</p>"]
    pub url: String,
}
impl From<&DependabotAlertAutoDismissedAlert> for DependabotAlertAutoDismissedAlert {
    fn from(value: &DependabotAlertAutoDismissedAlert) -> Self {
        value.clone()
    }
}
#[doc = "<p>Details for the vulnerable dependency.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DependabotAlertAutoDismissedAlertDependency\","]
#[doc = "  \"description\": \"<p>Details for the vulnerable dependency.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"manifest_path\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertDependencyManifestPath\","]
#[doc = "      \"description\": \"<p>The full path to the dependency manifest file, relative to the root of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"package\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertDependencyPackage\""]
#[doc = "    },"]
#[doc = "    \"scope\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertDependencyScope\","]
#[doc = "      \"description\": \"<p>The execution scope of the vulnerable dependency.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertDependencyScope\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DependabotAlertAutoDismissedAlertDependency {
    #[doc = "<p>The full path to the dependency manifest file, relative to the root of the repository.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifest_path: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package: Option<DependabotAlertAutoDismissedAlertDependencyPackage>,
    #[doc = "<p>The execution scope of the vulnerable dependency.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<DependabotAlertAutoDismissedAlertDependencyScope>,
}
impl From<&DependabotAlertAutoDismissedAlertDependency>
    for DependabotAlertAutoDismissedAlertDependency
{
    fn from(value: &DependabotAlertAutoDismissedAlertDependency) -> Self {
        value.clone()
    }
}
#[doc = "<p>Details for the vulnerable package.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DependabotAlertAutoDismissedAlertDependencyPackage\","]
#[doc = "  \"description\": \"<p>Details for the vulnerable package.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"ecosystem\","]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"ecosystem\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertDependencyPackageEcosystem\","]
#[doc = "      \"description\": \"<p>The package's language or package management ecosystem.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertDependencyPackageName\","]
#[doc = "      \"description\": \"<p>The unique package name within its ecosystem.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DependabotAlertAutoDismissedAlertDependencyPackage {
    #[doc = "<p>The package's language or package management ecosystem.</p>"]
    pub ecosystem: String,
    #[doc = "<p>The unique package name within its ecosystem.</p>"]
    pub name: String,
}
impl From<&DependabotAlertAutoDismissedAlertDependencyPackage>
    for DependabotAlertAutoDismissedAlertDependencyPackage
{
    fn from(value: &DependabotAlertAutoDismissedAlertDependencyPackage) -> Self {
        value.clone()
    }
}
#[doc = "DependabotAlertAutoDismissedAlertDependencyScope"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"development\","]
#[doc = "    \"runtime\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DependabotAlertAutoDismissedAlertDependencyScope {
    #[serde(rename = "development")]
    Development,
    #[serde(rename = "runtime")]
    Runtime,
}
impl From<&DependabotAlertAutoDismissedAlertDependencyScope>
    for DependabotAlertAutoDismissedAlertDependencyScope
{
    fn from(value: &DependabotAlertAutoDismissedAlertDependencyScope) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DependabotAlertAutoDismissedAlertDependencyScope {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Development => write!(f, "development"),
            Self::Runtime => write!(f, "runtime"),
        }
    }
}
impl std::str::FromStr for DependabotAlertAutoDismissedAlertDependencyScope {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "development" => Ok(Self::Development),
            "runtime" => Ok(Self::Runtime),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DependabotAlertAutoDismissedAlertDependencyScope {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DependabotAlertAutoDismissedAlertDependencyScope {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DependabotAlertAutoDismissedAlertDependencyScope {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "DependabotAlertAutoDismissedAlertDismissedReason"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"fix_started\","]
#[doc = "    \"inaccurate\","]
#[doc = "    \"no_bandwidth\","]
#[doc = "    \"not_used\","]
#[doc = "    \"tolerable_risk\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DependabotAlertAutoDismissedAlertDismissedReason {
    #[serde(rename = "fix_started")]
    FixStarted,
    #[serde(rename = "inaccurate")]
    Inaccurate,
    #[serde(rename = "no_bandwidth")]
    NoBandwidth,
    #[serde(rename = "not_used")]
    NotUsed,
    #[serde(rename = "tolerable_risk")]
    TolerableRisk,
}
impl From<&DependabotAlertAutoDismissedAlertDismissedReason>
    for DependabotAlertAutoDismissedAlertDismissedReason
{
    fn from(value: &DependabotAlertAutoDismissedAlertDismissedReason) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DependabotAlertAutoDismissedAlertDismissedReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::FixStarted => write!(f, "fix_started"),
            Self::Inaccurate => write!(f, "inaccurate"),
            Self::NoBandwidth => write!(f, "no_bandwidth"),
            Self::NotUsed => write!(f, "not_used"),
            Self::TolerableRisk => write!(f, "tolerable_risk"),
        }
    }
}
impl std::str::FromStr for DependabotAlertAutoDismissedAlertDismissedReason {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "fix_started" => Ok(Self::FixStarted),
            "inaccurate" => Ok(Self::Inaccurate),
            "no_bandwidth" => Ok(Self::NoBandwidth),
            "not_used" => Ok(Self::NotUsed),
            "tolerable_risk" => Ok(Self::TolerableRisk),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DependabotAlertAutoDismissedAlertDismissedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DependabotAlertAutoDismissedAlertDismissedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DependabotAlertAutoDismissedAlertDismissedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>Details for the GitHub Security Advisory.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisory\","]
#[doc = "  \"description\": \"<p>Details for the GitHub Security Advisory.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"cve_id\","]
#[doc = "    \"cvss\","]
#[doc = "    \"cwes\","]
#[doc = "    \"description\","]
#[doc = "    \"ghsa_id\","]
#[doc = "    \"identifiers\","]
#[doc = "    \"published_at\","]
#[doc = "    \"references\","]
#[doc = "    \"severity\","]
#[doc = "    \"summary\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"vulnerabilities\","]
#[doc = "    \"withdrawn_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"cve_id\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryCveId\","]
#[doc = "      \"description\": \"<p>The unique CVE ID assigned to the advisory.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cvss\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss\""]
#[doc = "    },"]
#[doc = "    \"cvss_severities\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryCvssSeverities\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cwes\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryCwes\","]
#[doc = "      \"description\": \"<p>Details for the advisory pertaining to Common Weakness Enumeration.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCwes\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryDescription\","]
#[doc = "      \"description\": \"<p>A long-form Markdown-supported description of the advisory.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ghsa_id\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryGhsaId\","]
#[doc = "      \"description\": \"<p>The unique GitHub Security Advisory ID assigned to the advisory.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"identifiers\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryIdentifiers\","]
#[doc = "      \"description\": \"<p>Values that identify this advisory among security information sources.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryPublishedAt\","]
#[doc = "      \"description\": \"<p>The time that the advisory was published in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"references\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences\","]
#[doc = "      \"description\": \"<p>Links to additional advisory information.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"severity\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisorySeverity\""]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisorySummary\","]
#[doc = "      \"description\": \"<p>A short, plain text summary of the advisory.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryUpdatedAt\","]
#[doc = "      \"description\": \"<p>The time that the advisory was last modified in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"vulnerabilities\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities\","]
#[doc = "      \"description\": \"<p>Vulnerable version range information for the advisory.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"withdrawn_at\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryWithdrawnAt\","]
#[doc = "      \"description\": \"<p>The time that the advisory was withdrawn in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DependabotAlertAutoDismissedAlertSecurityAdvisory {
    #[doc = "<p>The unique CVE ID assigned to the advisory.</p>"]
    pub cve_id: Option<String>,
    pub cvss: DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cvss_severities: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities>,
    #[doc = "<p>Details for the advisory pertaining to Common Weakness Enumeration.</p>"]
    pub cwes: Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryCwes>,
    #[doc = "<p>A long-form Markdown-supported description of the advisory.</p>"]
    pub description: String,
    #[doc = "<p>The unique GitHub Security Advisory ID assigned to the advisory.</p>"]
    pub ghsa_id: String,
    #[doc = "<p>Values that identify this advisory among security information sources.</p>"]
    pub identifiers: Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers>,
    #[doc = "<p>The time that the advisory was published in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub published_at: String,
    #[doc = "<p>Links to additional advisory information.</p>"]
    pub references: Vec<DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences>,
    pub severity: RepositoryAdvisoryPublishedRepositoryAdvisorySeverity,
    #[doc = "<p>A short, plain text summary of the advisory.</p>"]
    pub summary: String,
    #[doc = "<p>The time that the advisory was last modified in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub updated_at: String,
    #[doc = "<p>Vulnerable version range information for the advisory.</p>"]
    pub vulnerabilities: Vec<DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities>,
    #[doc = "<p>The time that the advisory was withdrawn in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    pub withdrawn_at: Option<String>,
}
impl From<&DependabotAlertAutoDismissedAlertSecurityAdvisory>
    for DependabotAlertAutoDismissedAlertSecurityAdvisory
{
    fn from(value: &DependabotAlertAutoDismissedAlertSecurityAdvisory) -> Self {
        value.clone()
    }
}
#[doc = "<p>Details for the advisory pertaining to the Common Vulnerability Scoring System.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss\","]
#[doc = "  \"description\": \"<p>Details for the advisory pertaining to the Common Vulnerability Scoring System.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"score\","]
#[doc = "    \"vector_string\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"score\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryCvssScore\","]
#[doc = "      \"description\": \"<p>The overall CVSS score of the advisory.</p>\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"vector_string\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryCvssVectorString\","]
#[doc = "      \"description\": \"<p>The full CVSS vector string for the advisory.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss {
    pub score: f64,
    #[doc = "<p>The full CVSS vector string for the advisory.</p>"]
    pub vector_string: Option<String>,
}
impl From<&DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss>
    for DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss
{
    fn from(value: &DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss) -> Self {
        value.clone()
    }
}
#[doc = "DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryReferencesUrl\","]
#[doc = "      \"description\": \"<p>The URL of the reference.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences {
    #[doc = "<p>The URL of the reference.</p>"]
    pub url: String,
}
impl From<&DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences>
    for DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences
{
    fn from(value: &DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences) -> Self {
        value.clone()
    }
}
#[doc = "DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"first_patched_version\","]
#[doc = "    \"package\","]
#[doc = "    \"severity\","]
#[doc = "    \"vulnerable_version_range\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"first_patched_version\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilitiesFirstPatchedVersion\","]
#[doc = "      \"description\": \"<p>Details pertaining to the package version that patches this vulnerability.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunRequestedActionRequestedAction\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"package\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertDependencyPackage\""]
#[doc = "    },"]
#[doc = "    \"severity\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisorySeverity\""]
#[doc = "    },"]
#[doc = "    \"vulnerable_version_range\": {"]
#[doc = "      \"title\": \"DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilitiesVulnerableVersionRange\","]
#[doc = "      \"description\": \"<p>Conditions that identify vulnerable versions of this vulnerability's package.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities {
    #[doc = "<p>Details pertaining to the package version that patches this vulnerability.</p>"]
    pub first_patched_version: Option<CheckRunRequestedActionRequestedAction>,
    pub package: DependabotAlertAutoDismissedAlertDependencyPackage,
    pub severity: RepositoryAdvisoryPublishedRepositoryAdvisorySeverity,
    #[doc = "<p>Conditions that identify vulnerable versions of this vulnerability's package.</p>"]
    pub vulnerable_version_range: String,
}
impl From<&DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities>
    for DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities
{
    fn from(value: &DependabotAlertAutoDismissedAlertSecurityAdvisoryVulnerabilities) -> Self {
        value.clone()
    }
}
#[doc = "<p>The state of the Dependabot alert.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DependabotAlertAutoDismissedAlertState\","]
#[doc = "  \"description\": \"<p>The state of the Dependabot alert.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"auto_dismissed\","]
#[doc = "    \"dismissed\","]
#[doc = "    \"fixed\","]
#[doc = "    \"open\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DependabotAlertAutoDismissedAlertState {
    #[serde(rename = "auto_dismissed")]
    AutoDismissed,
    #[serde(rename = "dismissed")]
    Dismissed,
    #[serde(rename = "fixed")]
    Fixed,
    #[serde(rename = "open")]
    Open,
}
impl From<&DependabotAlertAutoDismissedAlertState> for DependabotAlertAutoDismissedAlertState {
    fn from(value: &DependabotAlertAutoDismissedAlertState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DependabotAlertAutoDismissedAlertState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::AutoDismissed => write!(f, "auto_dismissed"),
            Self::Dismissed => write!(f, "dismissed"),
            Self::Fixed => write!(f, "fixed"),
            Self::Open => write!(f, "open"),
        }
    }
}
impl std::str::FromStr for DependabotAlertAutoDismissedAlertState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "auto_dismissed" => Ok(Self::AutoDismissed),
            "dismissed" => Ok(Self::Dismissed),
            "fixed" => Ok(Self::Fixed),
            "open" => Ok(Self::Open),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DependabotAlertAutoDismissedAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DependabotAlertAutoDismissedAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DependabotAlertAutoDismissedAlertState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "DeployKey"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"deploy_key\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"DeployKeyCreated\","]
#[doc = "      \"description\": \"<p>A deploy key was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"key\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DeployKeyCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"key\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeployKeyCreatedKey\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DeployKeyDeleted\","]
#[doc = "      \"description\": \"<p>A deploy key was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"key\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DeployKeyDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"key\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeployKeyCreatedKey\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum DeployKey {
    #[doc = "DeployKeyCreated\n\n<p>A deploy key was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        key: DeployKeyCreatedKey,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DeployKeyDeleted\n\n<p>A deploy key was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        key: DeployKeyCreatedKey,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&DeployKey> for DeployKey {
    fn from(value: &DeployKey) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key\"><code>deploy key</code></a> resource.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeployKeyCreatedKey\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key\\\"><code>deploy key</code></a> resource.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"id\","]
#[doc = "    \"key\","]
#[doc = "    \"read_only\","]
#[doc = "    \"title\","]
#[doc = "    \"url\","]
#[doc = "    \"verified\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"added_by\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyAddedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"key\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyKey\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"last_used\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyLastUsed\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"read_only\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyReadOnly\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"verified\": {"]
#[doc = "      \"title\": \"DeployKeyCreatedKeyVerified\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeployKeyCreatedKey {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub added_by: Option<String>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub key: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub last_used: Option<String>,
    #[doc = ""]
    pub read_only: bool,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub verified: bool,
}
impl From<&DeployKeyCreatedKey> for DeployKeyCreatedKey {
    fn from(value: &DeployKeyCreatedKey) -> Self {
        value.clone()
    }
}
#[doc = "Deployment"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"deployment\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"DeploymentCreated\","]
#[doc = "      \"description\": \"<p>A deployment was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"deployment\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"workflow\","]
#[doc = "        \"workflow_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DeploymentCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentCreatedDeployment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow\": {"]
#[doc = "          \"title\": \"DeploymentCreatedWorkflow\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflow\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"title\": \"DeploymentCreatedWorkflowRun\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentCreatedWorkflowRun\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Deployment {
    #[doc = "DeploymentCreated\n\n<p>A deployment was created.</p>"]
    #[serde(rename = "created")]
    Created {
        deployment: DeploymentCreatedDeployment,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        #[doc = ""]
        workflow: Option<DeploymentStatusCreatedWorkflow>,
        #[doc = ""]
        workflow_run: Option<DeploymentCreatedWorkflowRun>,
    },
}
impl From<&Deployment> for Deployment {
    fn from(value: &Deployment) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/deployments/deployments#list-deployments\">deployment</a>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentCreatedDeployment\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/deployments/deployments#list-deployments\\\">deployment</a>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"description\","]
#[doc = "    \"environment\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"original_environment\","]
#[doc = "    \"payload\","]
#[doc = "    \"ref\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"sha\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"task\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_environment\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentOriginalEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"payload\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentPayload\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentPerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"production_environment\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentProductionEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"task\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentTask\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"transient_environment\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentTransientEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedDeploymentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentCreatedDeployment {
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub environment: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub original_environment: String,
    #[doc = ""]
    pub payload: DeploymentCreatedDeploymentPayload,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubApp>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub production_environment: Option<bool>,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    #[doc = ""]
    pub repository_url: String,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub task: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transient_environment: Option<bool>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentCreatedDeployment> for DeploymentCreatedDeployment {
    fn from(value: &DeploymentCreatedDeployment) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentCreatedDeploymentPayload\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum DeploymentCreatedDeploymentPayload {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&DeploymentCreatedDeploymentPayload> for DeploymentCreatedDeploymentPayload {
    fn from(value: &DeploymentCreatedDeploymentPayload) -> Self {
        value.clone()
    }
}
impl From<Untyped> for DeploymentCreatedDeploymentPayload {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "DeploymentCreatedWorkflowRun"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor\","]
#[doc = "    \"check_suite_id\","]
#[doc = "    \"check_suite_node_id\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"display_title\","]
#[doc = "    \"event\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_number\","]
#[doc = "    \"run_started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"artifacts_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunArtifactsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cancel_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunCancelUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_id\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"check_suite_node_id\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentCreatedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"display_title\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunDisplayTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunEvent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunHeadCommit\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"head_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"jobs_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunJobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"logs_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunLogsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"previous_attempt_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunPreviousAttemptUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"referenced_workflows\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunReferencedWorkflows\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunReferencedWorkflows\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"rerun_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunRerunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_number\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunRunNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_started_at\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunStatus\""]
#[doc = "    },"]
#[doc = "    \"triggering_actor\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunTriggeringActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_id\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"workflow_url\": {"]
#[doc = "      \"title\": \"DeploymentCreatedWorkflowRunWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentCreatedWorkflowRun {
    #[doc = ""]
    pub actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub artifacts_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cancel_url: Option<String>,
    #[doc = ""]
    pub check_suite_id: i64,
    #[doc = ""]
    pub check_suite_node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_suite_url: Option<String>,
    #[doc = ""]
    pub conclusion: Option<DeploymentCreatedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub display_title: String,
    #[doc = ""]
    pub event: String,
    #[doc = ""]
    pub head_branch: String,
    #[doc = ""]
    #[serde(default)]
    pub head_commit: (),
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_repository: Option<DeploymentStatusCreatedWorkflowRunHeadRepository>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jobs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs_url: Option<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    #[serde(default)]
    pub previous_attempt_url: (),
    #[doc = ""]
    pub pull_requests: Vec<DeploymentStatusCreatedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub referenced_workflows: Option<Vec<DeploymentStatusCreatedWorkflowRunReferencedWorkflows>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<DeploymentStatusCreatedWorkflowRunHeadRepository>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rerun_url: Option<String>,
    #[doc = ""]
    pub run_attempt: i64,
    #[doc = ""]
    pub run_number: i64,
    #[doc = ""]
    pub run_started_at: String,
    pub status: DeploymentStatusCreatedWorkflowRunStatus,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub triggering_actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub workflow_id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow_url: Option<String>,
}
impl From<&DeploymentCreatedWorkflowRun> for DeploymentCreatedWorkflowRun {
    fn from(value: &DeploymentCreatedWorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentCreatedWorkflowRunConclusion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"action_required\","]
#[doc = "    \"cancelled\","]
#[doc = "    \"failure\","]
#[doc = "    \"neutral\","]
#[doc = "    \"stale\","]
#[doc = "    \"success\","]
#[doc = "    \"timed_out\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentCreatedWorkflowRunConclusion {
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "timed_out")]
    TimedOut,
}
impl From<&DeploymentCreatedWorkflowRunConclusion> for DeploymentCreatedWorkflowRunConclusion {
    fn from(value: &DeploymentCreatedWorkflowRunConclusion) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentCreatedWorkflowRunConclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::ActionRequired => write!(f, "action_required"),
            Self::Cancelled => write!(f, "cancelled"),
            Self::Failure => write!(f, "failure"),
            Self::Neutral => write!(f, "neutral"),
            Self::Stale => write!(f, "stale"),
            Self::Success => write!(f, "success"),
            Self::TimedOut => write!(f, "timed_out"),
        }
    }
}
impl std::str::FromStr for DeploymentCreatedWorkflowRunConclusion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "action_required" => Ok(Self::ActionRequired),
            "cancelled" => Ok(Self::Cancelled),
            "failure" => Ok(Self::Failure),
            "neutral" => Ok(Self::Neutral),
            "stale" => Ok(Self::Stale),
            "success" => Ok(Self::Success),
            "timed_out" => Ok(Self::TimedOut),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentCreatedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentCreatedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentCreatedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>A deployment protection rule was requested for an environment.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequested\","]
#[doc = "  \"description\": \"<p>A deployment protection rule was requested for an environment.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"action\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedAction\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"requested\""]
#[doc = "    },"]
#[doc = "    \"deployment\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedDeployment\""]
#[doc = "    },"]
#[doc = "    \"deployment_callback_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentCallbackUrl\","]
#[doc = "      \"description\": \"<p>The URL to review the deployment protection rule.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedEnvironment\","]
#[doc = "      \"description\": \"<p>The name of the environment that has the deployment protection rule.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedEvent\","]
#[doc = "      \"description\": \"<p>The event that triggered the deployment protection rule.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRule {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment: Option<DeploymentProtectionRuleRequestedDeployment>,
    #[doc = "<p>The URL to review the deployment protection rule.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployment_callback_url: Option<String>,
    #[doc = "<p>The name of the environment that has the deployment protection rule.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    #[doc = "<p>The event that triggered the deployment protection rule.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub event: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub pull_requests: Vec<DeploymentProtectionRuleRequestedPullRequests>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<Untyped>,
}
impl From<&DeploymentProtectionRule> for DeploymentProtectionRule {
    fn from(value: &DeploymentProtectionRule) -> Self {
        value.clone()
    }
}
#[doc = "<p>A request for a specific ref(branch,sha,tag) to be deployed</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedDeployment\","]
#[doc = "  \"description\": \"<p>A request for a specific ref(branch,sha,tag) to be deployed</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"description\","]
#[doc = "    \"environment\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"payload\","]
#[doc = "    \"ref\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"sha\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"task\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentEnvironment\","]
#[doc = "      \"description\": \"<p>Name for the target deployment environment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the deployment</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_environment\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentOriginalEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"payload\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentPayload\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentPerformedViaGithubApp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"production_environment\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentProductionEnvironment\","]
#[doc = "      \"description\": \"<p>Specifies if the given environment is one that end-users directly interact with. Default: false.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentRef\","]
#[doc = "      \"description\": \"<p>The ref to deploy. This can be a branch, tag, or sha.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"task\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentTask\","]
#[doc = "      \"description\": \"<p>Parameter to specify a task to execute</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"transient_environment\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentTransientEnvironment\","]
#[doc = "      \"description\": \"<p>Specifies if the given environment is will no longer exist at some point in the future. Default: false.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedDeploymentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRuleRequestedDeployment {
    #[doc = ""]
    pub created_at: String,
    pub creator: DiscussionTransferredChangesNewRepositoryOrganization,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Name for the target deployment environment.</p>"]
    pub environment: String,
    #[doc = "<p>Unique identifier of the deployment</p>"]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub original_environment: Option<String>,
    #[doc = ""]
    pub payload: DeploymentProtectionRuleRequestedDeploymentPayload,
    #[doc = ""]
    #[serde(default)]
    pub performed_via_github_app: (),
    #[doc = "<p>Specifies if the given environment is one that end-users directly interact with. Default: false.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub production_environment: Option<bool>,
    #[doc = "<p>The ref to deploy. This can be a branch, tag, or sha.</p>"]
    #[serde(rename = "ref")]
    pub ref_: String,
    #[doc = ""]
    pub repository_url: String,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>Parameter to specify a task to execute</p>"]
    pub task: String,
    #[doc = "<p>Specifies if the given environment is will no longer exist at some point in the future. Default: false.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transient_environment: Option<bool>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentProtectionRuleRequestedDeployment>
    for DeploymentProtectionRuleRequestedDeployment
{
    fn from(value: &DeploymentProtectionRuleRequestedDeployment) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedDeploymentPayload\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum DeploymentProtectionRuleRequestedDeploymentPayload {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&DeploymentProtectionRuleRequestedDeploymentPayload>
    for DeploymentProtectionRuleRequestedDeploymentPayload
{
    fn from(value: &DeploymentProtectionRuleRequestedDeploymentPayload) -> Self {
        value.clone()
    }
}
impl From<Untyped> for DeploymentProtectionRuleRequestedDeploymentPayload {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "DeploymentProtectionRuleRequestedPullRequests"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"additions\","]
#[doc = "    \"assignee\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"changed_files\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"deletions\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"maintainer_can_modify\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"mergeable\","]
#[doc = "    \"mergeable_state\","]
#[doc = "    \"merged\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"merged_by\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHead\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionAnsweredDiscussionLabels\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsMilestone\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsRequestedTeams\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRuleRequestedPullRequests {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active_lock_reason: Option<String>,
    #[doc = ""]
    pub additions: i64,
    pub assignee: DiscussionTransferredChangesNewRepositoryOrganization,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignees: Option<Vec<DiscussionTransferredChangesNewRepositoryOrganization>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<DeploymentProtectionRuleRequestedPullRequestsAutoMerge>,
    pub base: DeploymentProtectionRuleRequestedPullRequestsHead,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub changed_files: i64,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits: i64,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub deletions: i64,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    pub head: DeploymentProtectionRuleRequestedPullRequestsHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionAnsweredDiscussionLabels>,
    #[serde(rename = "_links")]
    pub links: DeploymentProtectionRuleRequestedPullRequestsLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    pub maintainer_can_modify: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub mergeable: Option<bool>,
    #[doc = ""]
    pub mergeable_state: String,
    #[doc = ""]
    pub merged: bool,
    #[doc = ""]
    pub merged_at: Option<String>,
    pub merged_by: DiscussionTransferredChangesNewRepositoryOrganization,
    pub milestone: DeploymentProtectionRuleRequestedPullRequestsMilestone,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requested_reviewers: Option<Vec<DiscussionTransferredChangesNewRepositoryOrganization>>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requested_teams: Option<Vec<DeploymentProtectionRuleRequestedPullRequestsRequestedTeams>>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments: i64,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    pub user: DiscussionTransferredChangesNewRepositoryOrganization,
}
impl From<&DeploymentProtectionRuleRequestedPullRequests>
    for DeploymentProtectionRuleRequestedPullRequests
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequests) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentProtectionRuleRequestedPullRequestsAutoMerge"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"commit_message\","]
#[doc = "    \"commit_title\","]
#[doc = "    \"enabled_by\","]
#[doc = "    \"merge_method\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"commit_message\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsAutoMergeCommitMessage\","]
#[doc = "      \"description\": \"<p>Commit message for the merge commit.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commit_title\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsAutoMergeCommitTitle\","]
#[doc = "      \"description\": \"<p>Title for the merge commit message.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"enabled_by\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"merge_method\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRuleRequestedPullRequestsAutoMerge {
    #[doc = "<p>Commit message for the merge commit.</p>"]
    pub commit_message: String,
    #[doc = "<p>Title for the merge commit message.</p>"]
    pub commit_title: String,
    pub enabled_by: DiscussionTransferredChangesNewRepositoryOrganization,
    pub merge_method: DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsAutoMerge>
    for DeploymentProtectionRuleRequestedPullRequestsAutoMerge
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsAutoMerge) -> Self {
        value.clone()
    }
}
#[doc = "<p>The merge method to use.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod\","]
#[doc = "  \"description\": \"<p>The merge method to use.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"merge\","]
#[doc = "    \"rebase\","]
#[doc = "    \"squash\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod {
    #[serde(rename = "merge")]
    Merge,
    #[serde(rename = "rebase")]
    Rebase,
    #[serde(rename = "squash")]
    Squash,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod>
    for DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Merge => write!(f, "merge"),
            Self::Rebase => write!(f, "rebase"),
            Self::Squash => write!(f, "squash"),
        }
    }
}
impl std::str::FromStr for DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "merge" => Ok(Self::Merge),
            "rebase" => Ok(Self::Rebase),
            "squash" => Ok(Self::Squash),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHead\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHeadRepo\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRuleRequestedPullRequestsHead {
    #[doc = ""]
    pub label: String,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repo: DeploymentProtectionRuleRequestedPullRequestsHeadRepo,
    #[doc = ""]
    pub sha: String,
    pub user: DiscussionTransferredChangesNewRepositoryOrganization,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsHead>
    for DeploymentProtectionRuleRequestedPullRequestsHead
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsHead) -> Self {
        value.clone()
    }
}
#[doc = "<p>A repository on GitHub.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepo\","]
#[doc = "  \"description\": \"<p>A repository on GitHub.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"disabled\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow Auto-merge to be used on pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoAllowForking\","]
#[doc = "      \"description\": \"<p>Whether to allow forking this repo</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoAllowUpdateBranch\","]
#[doc = "      \"description\": \"<p>Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"anonymous_access_enabled\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoAnonymousAccessEnabled\","]
#[doc = "      \"description\": \"<p>Whether anonymous git access is enabled for this repository</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoDisabled\","]
#[doc = "      \"description\": \"<p>Returns whether or not this repository disabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_discussions\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHasDiscussions\","]
#[doc = "      \"description\": \"<p>Whether discussions are enabled.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoIsTemplate\","]
#[doc = "      \"description\": \"<p>Whether this repository acts as a template that can be used to generate new repositories.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryLicense\""]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoSize\","]
#[doc = "      \"description\": \"<p>The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoSshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"starred_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoStarredAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoSubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoSubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoSvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"temp_clone_token\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoTempCloneToken\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"use_squash_pr_title_as_default\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoUseSquashPrTitleAsDefault\","]
#[doc = "      \"description\": \"<p>Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoVisibility\","]
#[doc = "      \"description\": \"<p>The repository visibility: public, private, or internal.</p>\","]
#[doc = "      \"default\": \"public\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsHeadRepoWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"<p>Whether to require contributors to sign off on web-based commits</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRuleRequestedPullRequestsHeadRepo {
    #[doc = "<p>Whether to allow Auto-merge to be used on pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow forking this repo</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = "<p>Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.</p>"]
    #[serde(default)]
    pub allow_update_branch: bool,
    #[doc = "<p>Whether anonymous git access is enabled for this repository</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub anonymous_access_enabled: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Returns whether or not this repository disabled.</p>"]
    pub disabled: bool,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether discussions are enabled.</p>"]
    #[serde(default)]
    pub has_discussions: bool,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = "<p>Whether this repository acts as a template that can be used to generate new repositories.</p>"]
    #[serde(default)]
    pub is_template: bool,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    pub license: DiscussionTransferredChangesNewRepositoryLicense,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    pub owner: DiscussionTransferredChangesNewRepositoryOrganization,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<DiscussionTransferredChangesNewRepositoryPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<String>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = "<p>The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.</p>"]
    pub size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle>,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_at: Option<String>,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temp_clone_token: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: Option<String>,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</p>"]
    #[serde(default)]
    pub use_squash_pr_title_as_default: bool,
    #[doc = "<p>The repository visibility: public, private, or internal.</p>"]
    #[serde(
        default = "defaults::deployment_protection_rule_requested_pull_requests_head_repo_visibility"
    )]
    pub visibility: String,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
    #[doc = "<p>Whether to require contributors to sign off on web-based commits</p>"]
    #[serde(default)]
    pub web_commit_signoff_required: bool,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsHeadRepo>
    for DeploymentProtectionRuleRequestedPullRequestsHeadRepo
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsHeadRepo) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedPullRequestsLinks\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"comments\","]
#[doc = "    \"commits\","]
#[doc = "    \"html\","]
#[doc = "    \"issue\","]
#[doc = "    \"review_comment\","]
#[doc = "    \"review_comments\","]
#[doc = "    \"self\","]
#[doc = "    \"statuses\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"comments\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"html\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"issue\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"review_comment\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"self\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"statuses\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRuleRequestedPullRequestsLinks {
    pub comments: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub commits: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub html: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub issue: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub review_comment: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub review_comments: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    #[serde(rename = "self")]
    pub self_: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub statuses: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsLinks>
    for DeploymentProtectionRuleRequestedPullRequestsLinks
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsLinks) -> Self {
        value.clone()
    }
}
#[doc = "<p>A collection of related issues and pull requests.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestone\","]
#[doc = "  \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"closed_at\","]
#[doc = "    \"closed_issues\","]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"description\","]
#[doc = "    \"due_on\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"state\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_issues\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneClosedIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"due_on\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneDueOn\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneNumber\","]
#[doc = "      \"description\": \"<p>The number of the milestone.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsMilestoneState\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneTitle\","]
#[doc = "      \"description\": \"<p>The title of the milestone.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRuleRequestedPullRequestsMilestone {
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub closed_issues: i64,
    #[doc = ""]
    pub created_at: String,
    pub creator: DiscussionTransferredChangesNewRepositoryOrganization,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub due_on: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>The number of the milestone.</p>"]
    pub number: i64,
    #[doc = ""]
    pub open_issues: i64,
    pub state: DeploymentProtectionRuleRequestedPullRequestsMilestoneState,
    #[doc = "<p>The title of the milestone.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsMilestone>
    for DeploymentProtectionRuleRequestedPullRequestsMilestone
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsMilestone) -> Self {
        value.clone()
    }
}
#[doc = "<p>The state of the milestone.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedPullRequestsMilestoneState\","]
#[doc = "  \"description\": \"<p>The state of the milestone.</p>\","]
#[doc = "  \"default\": \"open\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"closed\","]
#[doc = "    \"open\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentProtectionRuleRequestedPullRequestsMilestoneState {
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "open")]
    Open,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsMilestoneState>
    for DeploymentProtectionRuleRequestedPullRequestsMilestoneState
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsMilestoneState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentProtectionRuleRequestedPullRequestsMilestoneState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Closed => write!(f, "closed"),
            Self::Open => write!(f, "open"),
        }
    }
}
impl std::str::FromStr for DeploymentProtectionRuleRequestedPullRequestsMilestoneState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "closed" => Ok(Self::Closed),
            "open" => Ok(Self::Open),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentProtectionRuleRequestedPullRequestsMilestoneState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for DeploymentProtectionRuleRequestedPullRequestsMilestoneState
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentProtectionRuleRequestedPullRequestsMilestoneState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl Default for DeploymentProtectionRuleRequestedPullRequestsMilestoneState {
    fn default() -> Self {
        DeploymentProtectionRuleRequestedPullRequestsMilestoneState::Open
    }
}
#[doc = "DeploymentProtectionRuleRequestedPullRequestsRequestedTeams"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"members_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"permission\","]
#[doc = "    \"repositories_url\","]
#[doc = "    \"slug\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsDescription\","]
#[doc = "      \"description\": \"<p>Description of the team</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the team</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"ldap_dn\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsLdapDn\","]
#[doc = "      \"description\": \"<p>Distinguished Name (DN) that team maps to within LDAP environment</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"members_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsName\","]
#[doc = "      \"description\": \"<p>Name of the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notification_setting\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsNotificationSetting\","]
#[doc = "      \"description\": \"<p>The notification setting the team has set</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"permission\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsPermission\","]
#[doc = "      \"description\": \"<p>Permission that the team will have for its repositories</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"privacy\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsPrivacy\","]
#[doc = "      \"description\": \"<p>The level of privacy this team should have</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repositories_url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsRepositoriesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsSlug\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentProtectionRuleRequestedPullRequestsRequestedTeamsUrl\","]
#[doc = "      \"description\": \"<p>URL for the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentProtectionRuleRequestedPullRequestsRequestedTeams {
    #[doc = "<p>Description of the team</p>"]
    pub description: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the team</p>"]
    pub id: i64,
    #[doc = "<p>Distinguished Name (DN) that team maps to within LDAP environment</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ldap_dn: Option<String>,
    #[doc = ""]
    pub members_url: String,
    #[doc = "<p>Name of the team</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>The notification setting the team has set</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification_setting: Option<String>,
    #[doc = "<p>Permission that the team will have for its repositories</p>"]
    pub permission: String,
    #[doc = "<p>The level of privacy this team should have</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privacy: Option<String>,
    #[doc = ""]
    pub repositories_url: String,
    #[doc = ""]
    pub slug: String,
    #[doc = "<p>URL for the team</p>"]
    pub url: String,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsRequestedTeams>
    for DeploymentProtectionRuleRequestedPullRequestsRequestedTeams
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsRequestedTeams) -> Self {
        value.clone()
    }
}
#[doc = "<p>State of this Pull Request. Either <code>open</code> or <code>closed</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentProtectionRuleRequestedPullRequestsState\","]
#[doc = "  \"description\": \"<p>State of this Pull Request. Either <code>open</code> or <code>closed</code>.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"closed\","]
#[doc = "    \"open\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentProtectionRuleRequestedPullRequestsState {
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "open")]
    Open,
}
impl From<&DeploymentProtectionRuleRequestedPullRequestsState>
    for DeploymentProtectionRuleRequestedPullRequestsState
{
    fn from(value: &DeploymentProtectionRuleRequestedPullRequestsState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentProtectionRuleRequestedPullRequestsState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Closed => write!(f, "closed"),
            Self::Open => write!(f, "open"),
        }
    }
}
impl std::str::FromStr for DeploymentProtectionRuleRequestedPullRequestsState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "closed" => Ok(Self::Closed),
            "open" => Ok(Self::Open),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentProtectionRuleRequestedPullRequestsState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentProtectionRuleRequestedPullRequestsState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentProtectionRuleRequestedPullRequestsState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "DeploymentReview"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"deployment_review\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"DeploymentReviewApproved\","]
#[doc = "      \"description\": \"<p>A deployment review was approved.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"since\","]
#[doc = "        \"workflow_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DeploymentReviewApprovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"approved\""]
#[doc = "        },"]
#[doc = "        \"approver\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"title\": \"DeploymentReviewApprovedComment\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"reviewers\": {"]
#[doc = "          \"title\": \"DeploymentReviewApprovedReviewers\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewers\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"since\": {"]
#[doc = "          \"title\": \"DeploymentReviewApprovedSince\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"workflow_job_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowJobRun\""]
#[doc = "        },"]
#[doc = "        \"workflow_job_runs\": {"]
#[doc = "          \"title\": \"DeploymentReviewApprovedWorkflowJobRuns\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowJobRuns\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"title\": \"DeploymentReviewApprovedWorkflowRun\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowRun\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DeploymentReviewRejected\","]
#[doc = "      \"description\": \"<p>A deployment review was rejected.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"since\","]
#[doc = "        \"workflow_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DeploymentReviewRejectedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"rejected\""]
#[doc = "        },"]
#[doc = "        \"approver\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"title\": \"DeploymentReviewRejectedComment\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"reviewers\": {"]
#[doc = "          \"title\": \"DeploymentReviewRejectedReviewers\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewers\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"since\": {"]
#[doc = "          \"title\": \"DeploymentReviewRejectedSince\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"workflow_job_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowJobRun\""]
#[doc = "        },"]
#[doc = "        \"workflow_job_runs\": {"]
#[doc = "          \"title\": \"DeploymentReviewRejectedWorkflowJobRuns\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentReviewRejectedWorkflowJobRuns\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"title\": \"DeploymentReviewRejectedWorkflowRun\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentReviewRejectedWorkflowRun\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DeploymentReviewRequested\","]
#[doc = "      \"description\": \"<p>A deployment review was requested.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"environment\","]
#[doc = "        \"organization\","]
#[doc = "        \"repository\","]
#[doc = "        \"requestor\","]
#[doc = "        \"reviewers\","]
#[doc = "        \"sender\","]
#[doc = "        \"since\","]
#[doc = "        \"workflow_job_run\","]
#[doc = "        \"workflow_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DeploymentReviewRequestedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"requested\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"environment\": {"]
#[doc = "          \"title\": \"DeploymentReviewRequestedEnvironment\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requestor\": {"]
#[doc = "          \"title\": \"DeploymentReviewRequestedRequestor\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"reviewers\": {"]
#[doc = "          \"title\": \"DeploymentReviewRequestedReviewers\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentReviewRequestedReviewers\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"since\": {"]
#[doc = "          \"title\": \"DeploymentReviewRequestedSince\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"workflow_job_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowJobRuns\""]
#[doc = "        },"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"title\": \"DeploymentReviewRequestedWorkflowRun\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentReviewRequestedWorkflowRun\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum DeploymentReview {
    #[doc = "DeploymentReviewApproved\n\n<p>A deployment review was approved.</p>"]
    #[serde(rename = "approved")]
    Approved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        approver: Option<DeploymentReviewApprovedApprover>,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        comment: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        repository: SomethingWithAnId,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        reviewers: Vec<DeploymentReviewApprovedReviewers>,
        sender: Untyped,
        #[doc = ""]
        since: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        workflow_job_run: Option<DeploymentReviewApprovedWorkflowJobRun>,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        workflow_job_runs: Vec<DeploymentReviewApprovedWorkflowJobRuns>,
        #[doc = ""]
        workflow_run: Option<DeploymentReviewApprovedWorkflowRun>,
    },
    #[doc = "DeploymentReviewRejected\n\n<p>A deployment review was rejected.</p>"]
    #[serde(rename = "rejected")]
    Rejected {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        approver: Option<DeploymentReviewApprovedApprover>,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        comment: Option<String>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        repository: SomethingWithAnId,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        reviewers: Vec<DeploymentReviewApprovedReviewers>,
        sender: Untyped,
        #[doc = ""]
        since: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        workflow_job_run: Option<DeploymentReviewApprovedWorkflowJobRun>,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        workflow_job_runs: Vec<DeploymentReviewRejectedWorkflowJobRuns>,
        #[doc = ""]
        workflow_run: Option<DeploymentReviewRejectedWorkflowRun>,
    },
    #[doc = "DeploymentReviewRequested\n\n<p>A deployment review was requested.</p>"]
    #[serde(rename = "requested")]
    Requested {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[doc = ""]
        environment: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        repository: SomethingWithAnId,
        #[doc = ""]
        requestor: Option<DeploymentStatusCreatedDeploymentCreator>,
        #[doc = ""]
        reviewers: Vec<DeploymentReviewRequestedReviewers>,
        sender: Untyped,
        #[doc = ""]
        since: String,
        workflow_job_run: DeploymentReviewApprovedWorkflowJobRuns,
        #[doc = ""]
        workflow_run: Option<DeploymentReviewRequestedWorkflowRun>,
    },
}
impl From<&DeploymentReview> for DeploymentReview {
    fn from(value: &DeploymentReview) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentReviewApprovedApprover\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user_view_type\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedApproverUserViewType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewApprovedApprover {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[doc = ""]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_view_type: Option<String>,
}
impl From<&DeploymentReviewApprovedApprover> for DeploymentReviewApprovedApprover {
    fn from(value: &DeploymentReviewApprovedApprover) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentReviewApprovedReviewers"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"reviewer\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewer\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"User\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewApprovedReviewers {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = ""]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
}
impl From<&DeploymentReviewApprovedReviewers> for DeploymentReviewApprovedReviewers {
    fn from(value: &DeploymentReviewApprovedReviewers) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentReviewApprovedReviewersReviewer"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"login\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerEmail\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreatorType\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedReviewersReviewerUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewApprovedReviewersReviewer {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub login: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<DeploymentStatusCreatedDeploymentCreatorType>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&DeploymentReviewApprovedReviewersReviewer>
    for DeploymentReviewApprovedReviewersReviewer
{
    fn from(value: &DeploymentReviewApprovedReviewersReviewer) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentReviewApprovedWorkflowJobRun\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"environment\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"status\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunStatus\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewApprovedWorkflowJobRun {
    #[doc = ""]
    pub conclusion: (),
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub environment: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: (),
    #[doc = ""]
    pub status: String,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&DeploymentReviewApprovedWorkflowJobRun> for DeploymentReviewApprovedWorkflowJobRun {
    fn from(value: &DeploymentReviewApprovedWorkflowJobRun) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentReviewApprovedWorkflowJobRuns"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunsConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunsCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunsEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunsHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunsName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunsStatus\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowJobRunsUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewApprovedWorkflowJobRuns {
    #[doc = ""]
    #[serde(default)]
    pub conclusion: (),
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}
impl From<&DeploymentReviewApprovedWorkflowJobRuns> for DeploymentReviewApprovedWorkflowJobRuns {
    fn from(value: &DeploymentReviewApprovedWorkflowJobRuns) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentReviewApprovedWorkflowRun"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor\","]
#[doc = "    \"check_suite_id\","]
#[doc = "    \"check_suite_node_id\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"display_title\","]
#[doc = "    \"event\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_number\","]
#[doc = "    \"run_started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"triggering_actor\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"artifacts_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunArtifactsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cancel_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunCancelUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"check_suite_node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentCreatedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"display_title\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunDisplayTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunEvent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadCommit\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"jobs_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunJobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"logs_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunLogsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"previous_attempt_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunPreviousAttemptUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"referenced_workflows\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunReferencedWorkflows\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunReferencedWorkflows\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"rerun_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunRerunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_number\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunRunNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_started_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunStatus\""]
#[doc = "    },"]
#[doc = "    \"triggering_actor\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunTriggeringActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"workflow_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewApprovedWorkflowRun {
    #[doc = ""]
    pub actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub artifacts_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cancel_url: Option<String>,
    #[doc = ""]
    pub check_suite_id: i64,
    #[doc = ""]
    pub check_suite_node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_suite_url: Option<String>,
    #[doc = ""]
    pub conclusion: Option<DeploymentCreatedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub display_title: String,
    #[doc = ""]
    pub event: String,
    #[doc = ""]
    pub head_branch: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_commit: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_repository: Option<DeploymentReviewApprovedWorkflowRunHeadRepository>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jobs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs_url: Option<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub previous_attempt_url: Option<String>,
    #[doc = ""]
    pub pull_requests: Vec<DeploymentStatusCreatedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub referenced_workflows: Option<Vec<DeploymentStatusCreatedWorkflowRunReferencedWorkflows>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<DeploymentReviewApprovedWorkflowRunHeadRepository>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rerun_url: Option<String>,
    #[doc = ""]
    pub run_attempt: i64,
    #[doc = ""]
    pub run_number: i64,
    #[doc = ""]
    pub run_started_at: String,
    pub status: DeploymentStatusCreatedWorkflowRunStatus,
    #[doc = ""]
    pub triggering_actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub workflow_id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow_url: Option<String>,
}
impl From<&DeploymentReviewApprovedWorkflowRun> for DeploymentReviewApprovedWorkflowRun {
    fn from(value: &DeploymentReviewApprovedWorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepository\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryPrivate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentReviewApprovedWorkflowRunHeadRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewApprovedWorkflowRunHeadRepository {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archive_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignees_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blobs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collaborators_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compare_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contents_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contributors_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployments_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub downloads_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fork: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forks_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_commits_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_refs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_tags_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issue_comment_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issue_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub languages_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merges_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub milestones_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notifications_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<DeploymentReviewApprovedApprover>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pulls_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub releases_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscribers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscription_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub teams_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trees_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&DeploymentReviewApprovedWorkflowRunHeadRepository>
    for DeploymentReviewApprovedWorkflowRunHeadRepository
{
    fn from(value: &DeploymentReviewApprovedWorkflowRunHeadRepository) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentReviewRejectedWorkflowJobRuns"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowJobRunsConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowJobRunsCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowJobRunsEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowJobRunsHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowJobRunsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowJobRunsName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowJobRunsStatus\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowJobRunsUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewRejectedWorkflowJobRuns {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conclusion: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}
impl From<&DeploymentReviewRejectedWorkflowJobRuns> for DeploymentReviewRejectedWorkflowJobRuns {
    fn from(value: &DeploymentReviewRejectedWorkflowJobRuns) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentReviewRejectedWorkflowRun"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor\","]
#[doc = "    \"check_suite_id\","]
#[doc = "    \"check_suite_node_id\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"display_title\","]
#[doc = "    \"event\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_number\","]
#[doc = "    \"run_started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"triggering_actor\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"artifacts_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunArtifactsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cancel_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunCancelUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"check_suite_node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentCreatedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"display_title\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunDisplayTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunEvent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunHeadCommit\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"jobs_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunJobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"logs_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunLogsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"previous_attempt_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunPreviousAttemptUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"referenced_workflows\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunReferencedWorkflows\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunReferencedWorkflows\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"rerun_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunRerunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_number\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunRunNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_started_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunStatus\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"completed\","]
#[doc = "        \"in_progress\","]
#[doc = "        \"queued\","]
#[doc = "        \"requested\","]
#[doc = "        \"waiting\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"triggering_actor\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunTriggeringActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"workflow_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRejectedWorkflowRunWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewRejectedWorkflowRun {
    #[doc = ""]
    pub actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub artifacts_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cancel_url: Option<String>,
    #[doc = ""]
    pub check_suite_id: i64,
    #[doc = ""]
    pub check_suite_node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_suite_url: Option<String>,
    #[doc = ""]
    pub conclusion: Option<DeploymentCreatedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub display_title: String,
    #[doc = ""]
    pub event: String,
    #[doc = ""]
    pub head_branch: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_commit: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_repository: Option<DeploymentReviewApprovedWorkflowRunHeadRepository>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jobs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs_url: Option<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub previous_attempt_url: Option<String>,
    #[doc = ""]
    pub pull_requests: Vec<DeploymentStatusCreatedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub referenced_workflows: Option<Vec<DeploymentStatusCreatedWorkflowRunReferencedWorkflows>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<DeploymentReviewApprovedWorkflowRunHeadRepository>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rerun_url: Option<String>,
    #[doc = ""]
    pub run_attempt: i64,
    #[doc = ""]
    pub run_number: i64,
    #[doc = ""]
    pub run_started_at: String,
    #[doc = ""]
    pub status: DeploymentReviewRejectedWorkflowRunStatus,
    #[doc = ""]
    pub triggering_actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub workflow_id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow_url: Option<String>,
}
impl From<&DeploymentReviewRejectedWorkflowRun> for DeploymentReviewRejectedWorkflowRun {
    fn from(value: &DeploymentReviewRejectedWorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentReviewRejectedWorkflowRunStatus\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"in_progress\","]
#[doc = "    \"queued\","]
#[doc = "    \"requested\","]
#[doc = "    \"waiting\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentReviewRejectedWorkflowRunStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "waiting")]
    Waiting,
}
impl From<&DeploymentReviewRejectedWorkflowRunStatus>
    for DeploymentReviewRejectedWorkflowRunStatus
{
    fn from(value: &DeploymentReviewRejectedWorkflowRunStatus) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentReviewRejectedWorkflowRunStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::InProgress => write!(f, "in_progress"),
            Self::Queued => write!(f, "queued"),
            Self::Requested => write!(f, "requested"),
            Self::Waiting => write!(f, "waiting"),
        }
    }
}
impl std::str::FromStr for DeploymentReviewRejectedWorkflowRunStatus {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "in_progress" => Ok(Self::InProgress),
            "queued" => Ok(Self::Queued),
            "requested" => Ok(Self::Requested),
            "waiting" => Ok(Self::Waiting),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentReviewRejectedWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentReviewRejectedWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentReviewRejectedWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "DeploymentReviewRequestedReviewers"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"reviewer\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedReviewersReviewer\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedReviewersType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Team\","]
#[doc = "        \"User\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewRequestedReviewers {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<DeploymentReviewRequestedReviewersType>,
}
impl From<&DeploymentReviewRequestedReviewers> for DeploymentReviewRequestedReviewers {
    fn from(value: &DeploymentReviewRequestedReviewers) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentReviewRequestedReviewersType\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Team\","]
#[doc = "    \"User\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentReviewRequestedReviewersType {
    Team,
    User,
}
impl From<&DeploymentReviewRequestedReviewersType> for DeploymentReviewRequestedReviewersType {
    fn from(value: &DeploymentReviewRequestedReviewersType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentReviewRequestedReviewersType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Team => write!(f, "Team"),
            Self::User => write!(f, "User"),
        }
    }
}
impl std::str::FromStr for DeploymentReviewRequestedReviewersType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "Team" => Ok(Self::Team),
            "User" => Ok(Self::User),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentReviewRequestedReviewersType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentReviewRequestedReviewersType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentReviewRequestedReviewersType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "DeploymentReviewRequestedWorkflowRun"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor\","]
#[doc = "    \"check_suite_id\","]
#[doc = "    \"check_suite_node_id\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"display_title\","]
#[doc = "    \"event\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_number\","]
#[doc = "    \"run_started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"triggering_actor\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"artifacts_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunArtifactsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cancel_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunCancelUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"check_suite_node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentCreatedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"display_title\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunDisplayTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunEvent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunHeadCommit\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"jobs_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunJobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"logs_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunLogsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"previous_attempt_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunPreviousAttemptUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"referenced_workflows\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunReferencedWorkflows\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunReferencedWorkflows\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"rerun_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunRerunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_number\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunRunNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_started_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunStatus\""]
#[doc = "    },"]
#[doc = "    \"triggering_actor\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunTriggeringActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_id\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"workflow_url\": {"]
#[doc = "      \"title\": \"DeploymentReviewRequestedWorkflowRunWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentReviewRequestedWorkflowRun {
    #[doc = ""]
    pub actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub artifacts_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cancel_url: Option<String>,
    #[doc = ""]
    pub check_suite_id: i64,
    #[doc = ""]
    pub check_suite_node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_suite_url: Option<String>,
    #[doc = ""]
    pub conclusion: Option<DeploymentCreatedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub display_title: String,
    #[doc = ""]
    pub event: String,
    #[doc = ""]
    pub head_branch: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_commit: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_repository: Option<DeploymentReviewApprovedWorkflowRunHeadRepository>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jobs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs_url: Option<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub previous_attempt_url: Option<String>,
    #[doc = ""]
    pub pull_requests: Vec<DeploymentStatusCreatedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub referenced_workflows: Option<Vec<DeploymentStatusCreatedWorkflowRunReferencedWorkflows>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<DeploymentReviewApprovedWorkflowRunHeadRepository>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rerun_url: Option<String>,
    #[doc = ""]
    pub run_attempt: i64,
    #[doc = ""]
    pub run_number: i64,
    #[doc = ""]
    pub run_started_at: String,
    pub status: DeploymentStatusCreatedWorkflowRunStatus,
    #[doc = ""]
    pub triggering_actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub workflow_id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow_url: Option<String>,
}
impl From<&DeploymentReviewRequestedWorkflowRun> for DeploymentReviewRequestedWorkflowRun {
    fn from(value: &DeploymentReviewRequestedWorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatus"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"deployment_status\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"DeploymentStatusCreated\","]
#[doc = "      \"description\": \"<p>A new deployment status was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"deployment\","]
#[doc = "        \"deployment_status\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DeploymentStatusCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"check_run\": {"]
#[doc = "          \"title\": \"DeploymentStatusCreatedCheckRun\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedCheckRun\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeployment\""]
#[doc = "        },"]
#[doc = "        \"deployment_status\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentStatus\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow\": {"]
#[doc = "          \"title\": \"DeploymentStatusCreatedWorkflow\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflow\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"title\": \"DeploymentStatusCreatedWorkflowRun\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRun\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum DeploymentStatus {
    #[doc = "DeploymentStatusCreated\n\n<p>A new deployment status was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        check_run: Option<DeploymentStatusCreatedCheckRun>,
        deployment: DeploymentStatusCreatedDeployment,
        deployment_status: DeploymentStatusCreatedDeploymentStatus,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        workflow: Option<DeploymentStatusCreatedWorkflow>,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        workflow_run: Option<DeploymentStatusCreatedWorkflowRun>,
    },
}
impl From<&DeploymentStatus> for DeploymentStatus {
    fn from(value: &DeploymentStatus) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatusCreatedCheckRun"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"details_url\","]
#[doc = "    \"external_id\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunConclusion\","]
#[doc = "      \"description\": \"<p>The result of the completed check run. This value will be <code>null</code> until the check run has completed.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedCheckRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"details_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunDetailsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"external_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunExternalId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunHeadSha\","]
#[doc = "      \"description\": \"<p>The SHA of the commit that is being checked.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunId\","]
#[doc = "      \"description\": \"<p>The id of the check.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunName\","]
#[doc = "      \"description\": \"<p>The name of the check run.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedCheckRunStatus\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedCheckRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedCheckRun {
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = "<p>The result of the completed check run. This value will be <code>null</code> until the check run has completed.</p>"]
    pub conclusion: Option<DeploymentStatusCreatedCheckRunConclusion>,
    #[doc = ""]
    pub details_url: String,
    #[doc = ""]
    pub external_id: String,
    #[doc = "<p>The SHA of the commit that is being checked.</p>"]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>The id of the check.</p>"]
    pub id: i64,
    #[doc = "<p>The name of the check run.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub started_at: String,
    pub status: DeploymentStatusCreatedCheckRunStatus,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentStatusCreatedCheckRun> for DeploymentStatusCreatedCheckRun {
    fn from(value: &DeploymentStatusCreatedCheckRun) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatusCreatedCheckRunConclusion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"action_required\","]
#[doc = "    \"cancelled\","]
#[doc = "    \"failure\","]
#[doc = "    \"neutral\","]
#[doc = "    \"skipped\","]
#[doc = "    \"stale\","]
#[doc = "    \"success\","]
#[doc = "    \"timed_out\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentStatusCreatedCheckRunConclusion {
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "timed_out")]
    TimedOut,
}
impl From<&DeploymentStatusCreatedCheckRunConclusion>
    for DeploymentStatusCreatedCheckRunConclusion
{
    fn from(value: &DeploymentStatusCreatedCheckRunConclusion) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentStatusCreatedCheckRunConclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::ActionRequired => write!(f, "action_required"),
            Self::Cancelled => write!(f, "cancelled"),
            Self::Failure => write!(f, "failure"),
            Self::Neutral => write!(f, "neutral"),
            Self::Skipped => write!(f, "skipped"),
            Self::Stale => write!(f, "stale"),
            Self::Success => write!(f, "success"),
            Self::TimedOut => write!(f, "timed_out"),
        }
    }
}
impl std::str::FromStr for DeploymentStatusCreatedCheckRunConclusion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "action_required" => Ok(Self::ActionRequired),
            "cancelled" => Ok(Self::Cancelled),
            "failure" => Ok(Self::Failure),
            "neutral" => Ok(Self::Neutral),
            "skipped" => Ok(Self::Skipped),
            "stale" => Ok(Self::Stale),
            "success" => Ok(Self::Success),
            "timed_out" => Ok(Self::TimedOut),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentStatusCreatedCheckRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentStatusCreatedCheckRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentStatusCreatedCheckRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The current status of the check run. Can be <code>queued</code>, <code>in_progress</code>, or <code>completed</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedCheckRunStatus\","]
#[doc = "  \"description\": \"<p>The current status of the check run. Can be <code>queued</code>, <code>in_progress</code>, or <code>completed</code>.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"in_progress\","]
#[doc = "    \"pending\","]
#[doc = "    \"queued\","]
#[doc = "    \"waiting\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentStatusCreatedCheckRunStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "waiting")]
    Waiting,
}
impl From<&DeploymentStatusCreatedCheckRunStatus> for DeploymentStatusCreatedCheckRunStatus {
    fn from(value: &DeploymentStatusCreatedCheckRunStatus) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentStatusCreatedCheckRunStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::InProgress => write!(f, "in_progress"),
            Self::Pending => write!(f, "pending"),
            Self::Queued => write!(f, "queued"),
            Self::Waiting => write!(f, "waiting"),
        }
    }
}
impl std::str::FromStr for DeploymentStatusCreatedCheckRunStatus {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "in_progress" => Ok(Self::InProgress),
            "pending" => Ok(Self::Pending),
            "queued" => Ok(Self::Queued),
            "waiting" => Ok(Self::Waiting),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentStatusCreatedCheckRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentStatusCreatedCheckRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentStatusCreatedCheckRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/deployments/deployments#list-deployments\">deployment</a>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedDeployment\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/deployments/deployments#list-deployments\\\">deployment</a>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"description\","]
#[doc = "    \"environment\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"original_environment\","]
#[doc = "    \"payload\","]
#[doc = "    \"ref\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"sha\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"task\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_environment\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentOriginalEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"payload\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPayload\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"production_environment\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentProductionEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"task\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentTask\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"transient_environment\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentTransientEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedDeployment {
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub environment: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub original_environment: String,
    #[doc = ""]
    pub payload: Option<DeploymentStatusCreatedDeploymentPayload>,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubApp>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub production_environment: Option<bool>,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    #[doc = ""]
    pub repository_url: String,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub task: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub transient_environment: Option<bool>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentStatusCreatedDeployment> for DeploymentStatusCreatedDeployment {
    fn from(value: &DeploymentStatusCreatedDeployment) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatusCreatedDeploymentCreator"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"login\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorEmail\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreatorType\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user_view_type\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentCreatorUserViewType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedDeploymentCreator {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub login: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<DeploymentStatusCreatedDeploymentCreatorType>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_view_type: Option<String>,
}
impl From<&DeploymentStatusCreatedDeploymentCreator> for DeploymentStatusCreatedDeploymentCreator {
    fn from(value: &DeploymentStatusCreatedDeploymentCreator) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedDeploymentCreatorType\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Bot\","]
#[doc = "    \"Organization\","]
#[doc = "    \"User\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentStatusCreatedDeploymentCreatorType {
    Bot,
    Organization,
    User,
}
impl From<&DeploymentStatusCreatedDeploymentCreatorType>
    for DeploymentStatusCreatedDeploymentCreatorType
{
    fn from(value: &DeploymentStatusCreatedDeploymentCreatorType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentStatusCreatedDeploymentCreatorType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Bot => write!(f, "Bot"),
            Self::Organization => write!(f, "Organization"),
            Self::User => write!(f, "User"),
        }
    }
}
impl std::str::FromStr for DeploymentStatusCreatedDeploymentCreatorType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "Bot" => Ok(Self::Bot),
            "Organization" => Ok(Self::Organization),
            "User" => Ok(Self::User),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentStatusCreatedDeploymentCreatorType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentStatusCreatedDeploymentCreatorType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentStatusCreatedDeploymentCreatorType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "DeploymentStatusCreatedDeploymentPayload"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum DeploymentStatusCreatedDeploymentPayload {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&DeploymentStatusCreatedDeploymentPayload> for DeploymentStatusCreatedDeploymentPayload {
    fn from(value: &DeploymentStatusCreatedDeploymentPayload) -> Self {
        value.clone()
    }
}
impl From<Untyped> for DeploymentStatusCreatedDeploymentPayload {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "DeploymentStatusCreatedDeploymentPerformedViaGithubApp"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"external_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"owner\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppEvents\","]
#[doc = "      \"description\": \"<p>The list of events for the GitHub app\\nSupported values are: <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>content_reference</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_review</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_dispatch</code>, <code>secret_scanning_alert</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_dispatch</code>, <code>workflow_run</code>, <code>merge_queue_entry</code>, <code>workflow_job</code>, <code>pull_request_review_thread</code>, <code>secret_scanning_alert_location</code>, <code>merge_group</code></p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"external_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppExternalUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the GitHub app</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppName\","]
#[doc = "      \"description\": \"<p>The name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppSlug\","]
#[doc = "      \"description\": \"<p>The slug name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedDeploymentPerformedViaGithubApp {
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>The list of events for the GitHub app\nSupported values are: <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>content_reference</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_review</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_dispatch</code>, <code>secret_scanning_alert</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_dispatch</code>, <code>workflow_run</code>, <code>merge_queue_entry</code>, <code>workflow_job</code>, <code>pull_request_review_thread</code>, <code>secret_scanning_alert_location</code>, <code>merge_group</code></p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub events: Vec<String>,
    #[doc = ""]
    pub external_url: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the GitHub app</p>"]
    pub id: Option<i64>,
    #[doc = "<p>The name of the GitHub app</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions>,
    #[doc = "<p>The slug name of the GitHub app</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[doc = ""]
    pub updated_at: Option<String>,
}
impl From<&DeploymentStatusCreatedDeploymentPerformedViaGithubApp>
    for DeploymentStatusCreatedDeploymentPerformedViaGithubApp
{
    fn from(value: &DeploymentStatusCreatedDeploymentPerformedViaGithubApp) -> Self {
        value.clone()
    }
}
#[doc = "<p>The set of permissions for the GitHub app</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions\","]
#[doc = "  \"description\": \"<p>The set of permissions for the GitHub app</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"actions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"administration\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"checks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"content_references\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"contents\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"deployments\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"discussions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"emails\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"environments\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"issues\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"keys\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"members\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_administration\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_hooks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_packages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_plan\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_projects\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_secrets\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_self_hosted_runners\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_user_blocking\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"packages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"pages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"repository_hooks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"repository_projects\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"secret_scanning_alerts\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"secrets\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"security_events\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"security_scanning_alert\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"single_file\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"statuses\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"team_discussions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"vulnerability_alerts\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"workflows\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub administration:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checks: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_references:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contents: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployments:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discussions:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emails: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environments:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_administration:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_hooks:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_packages:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_plan:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_projects:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_secrets:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_self_hosted_runners:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_user_blocking:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub packages: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pages: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_requests:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_hooks:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_projects:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_scanning_alerts:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security_events:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security_scanning_alert:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub single_file:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team_discussions:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vulnerability_alerts:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflows: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
}
impl From<&DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions>
    for DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions
{
    fn from(value: &DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"read\","]
#[doc = "    \"write\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl From<&DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>
    for DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions
{
    fn from(
        value: &DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Read => write!(f, "read"),
            Self::Write => write!(f, "write"),
        }
    }
}
impl std::str::FromStr
    for DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "read" => Ok(Self::Read),
            "write" => Ok(Self::Write),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/deployments/statuses#list-deployment-statuses\">deployment status</a>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedDeploymentStatus\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/deployments/statuses#list-deployment-statuses\\\">deployment status</a>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"deployment_url\","]
#[doc = "    \"description\","]
#[doc = "    \"environment\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"state\","]
#[doc = "    \"target_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"deployment_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusDeploymentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusDescription\","]
#[doc = "      \"description\": \"<p>The optional human-readable description added to the status.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"environment\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusEnvironment\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"environment_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusEnvironmentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"log_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusLogUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusPerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusState\","]
#[doc = "      \"description\": \"<p>The new state. Can be <code>pending</code>, <code>success</code>, <code>failure</code>, or <code>error</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusTargetUrl\","]
#[doc = "      \"description\": \"<p>The optional link added to the status.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedDeploymentStatusUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedDeploymentStatus {
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub deployment_url: String,
    #[doc = "<p>The optional human-readable description added to the status.</p>"]
    pub description: String,
    #[doc = ""]
    pub environment: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environment_url: Option<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub log_url: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubApp>,
    #[doc = ""]
    pub repository_url: String,
    #[doc = "<p>The new state. Can be <code>pending</code>, <code>success</code>, <code>failure</code>, or <code>error</code>.</p>"]
    pub state: String,
    #[doc = "<p>The optional link added to the status.</p>"]
    pub target_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentStatusCreatedDeploymentStatus> for DeploymentStatusCreatedDeploymentStatus {
    fn from(value: &DeploymentStatusCreatedDeploymentStatus) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatusCreatedWorkflow"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"badge_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"state\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"badge_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowBadgeUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedWorkflow {
    #[doc = ""]
    pub badge_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    pub state: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentStatusCreatedWorkflow> for DeploymentStatusCreatedWorkflow {
    fn from(value: &DeploymentStatusCreatedWorkflow) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatusCreatedWorkflowRun"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor\","]
#[doc = "    \"check_suite_id\","]
#[doc = "    \"check_suite_node_id\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"display_title\","]
#[doc = "    \"event\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_number\","]
#[doc = "    \"run_started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"triggering_actor\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"artifacts_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunArtifactsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cancel_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunCancelUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"check_suite_node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"action_required\","]
#[doc = "            \"cancelled\","]
#[doc = "            \"failure\","]
#[doc = "            \"neutral\","]
#[doc = "            \"stale\","]
#[doc = "            \"startup_failure\","]
#[doc = "            \"success\","]
#[doc = "            \"timed_out\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"display_title\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunDisplayTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunEvent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadCommit\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"head_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"jobs_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunJobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"logs_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunLogsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"previous_attempt_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPreviousAttemptUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"referenced_workflows\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunReferencedWorkflows\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunReferencedWorkflows\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"rerun_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunRerunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_number\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunRunNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_started_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunStatus\""]
#[doc = "    },"]
#[doc = "    \"triggering_actor\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunTriggeringActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"workflow_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedWorkflowRun {
    #[doc = ""]
    pub actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub artifacts_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cancel_url: Option<String>,
    #[doc = ""]
    pub check_suite_id: i64,
    #[doc = ""]
    pub check_suite_node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub check_suite_url: Option<String>,
    #[doc = ""]
    pub conclusion: Option<DeploymentStatusCreatedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub display_title: String,
    #[doc = ""]
    pub event: String,
    #[doc = ""]
    pub head_branch: String,
    #[doc = ""]
    #[serde(default)]
    pub head_commit: (),
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub head_repository: Option<DeploymentStatusCreatedWorkflowRunHeadRepository>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jobs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logs_url: Option<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    #[serde(default)]
    pub previous_attempt_url: (),
    #[doc = ""]
    pub pull_requests: Vec<DeploymentStatusCreatedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub referenced_workflows: Option<Vec<DeploymentStatusCreatedWorkflowRunReferencedWorkflows>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<DeploymentStatusCreatedWorkflowRunHeadRepository>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rerun_url: Option<String>,
    #[doc = ""]
    pub run_attempt: i64,
    #[doc = ""]
    pub run_number: i64,
    #[doc = ""]
    pub run_started_at: String,
    pub status: DeploymentStatusCreatedWorkflowRunStatus,
    #[doc = ""]
    pub triggering_actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub workflow_id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow_url: Option<String>,
}
impl From<&DeploymentStatusCreatedWorkflowRun> for DeploymentStatusCreatedWorkflowRun {
    fn from(value: &DeploymentStatusCreatedWorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatusCreatedWorkflowRunConclusion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"action_required\","]
#[doc = "    \"cancelled\","]
#[doc = "    \"failure\","]
#[doc = "    \"neutral\","]
#[doc = "    \"stale\","]
#[doc = "    \"startup_failure\","]
#[doc = "    \"success\","]
#[doc = "    \"timed_out\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentStatusCreatedWorkflowRunConclusion {
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "startup_failure")]
    StartupFailure,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "timed_out")]
    TimedOut,
}
impl From<&DeploymentStatusCreatedWorkflowRunConclusion>
    for DeploymentStatusCreatedWorkflowRunConclusion
{
    fn from(value: &DeploymentStatusCreatedWorkflowRunConclusion) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentStatusCreatedWorkflowRunConclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::ActionRequired => write!(f, "action_required"),
            Self::Cancelled => write!(f, "cancelled"),
            Self::Failure => write!(f, "failure"),
            Self::Neutral => write!(f, "neutral"),
            Self::Stale => write!(f, "stale"),
            Self::StartupFailure => write!(f, "startup_failure"),
            Self::Success => write!(f, "success"),
            Self::TimedOut => write!(f, "timed_out"),
        }
    }
}
impl std::str::FromStr for DeploymentStatusCreatedWorkflowRunConclusion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "action_required" => Ok(Self::ActionRequired),
            "cancelled" => Ok(Self::Cancelled),
            "failure" => Ok(Self::Failure),
            "neutral" => Ok(Self::Neutral),
            "stale" => Ok(Self::Stale),
            "startup_failure" => Ok(Self::StartupFailure),
            "success" => Ok(Self::Success),
            "timed_out" => Ok(Self::TimedOut),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentStatusCreatedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentStatusCreatedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentStatusCreatedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepository\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunHeadRepositoryOwner\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryPrivate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedWorkflowRunHeadRepository {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archive_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignees_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blobs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collaborators_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compare_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contents_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contributors_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployments_url: Option<String>,
    #[doc = ""]
    #[serde(default)]
    pub description: (),
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub downloads_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fork: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forks_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_commits_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_refs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_tags_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issue_comment_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issue_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub languages_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merges_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub milestones_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notifications_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<DeploymentStatusCreatedWorkflowRunHeadRepositoryOwner>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pulls_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub releases_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscribers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscription_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub teams_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trees_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&DeploymentStatusCreatedWorkflowRunHeadRepository>
    for DeploymentStatusCreatedWorkflowRunHeadRepository
{
    fn from(value: &DeploymentStatusCreatedWorkflowRunHeadRepository) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwner\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunHeadRepositoryOwnerUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedWorkflowRunHeadRepositoryOwner {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[doc = ""]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&DeploymentStatusCreatedWorkflowRunHeadRepositoryOwner>
    for DeploymentStatusCreatedWorkflowRunHeadRepositoryOwner
{
    fn from(value: &DeploymentStatusCreatedWorkflowRunHeadRepositoryOwner) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatusCreatedWorkflowRunPullRequests"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"base\","]
#[doc = "    \"head\","]
#[doc = "    \"id\","]
#[doc = "    \"number\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequestsBase\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequestsBase\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedWorkflowRunPullRequests {
    pub base: DeploymentStatusCreatedWorkflowRunPullRequestsBase,
    pub head: DeploymentStatusCreatedWorkflowRunPullRequestsBase,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentStatusCreatedWorkflowRunPullRequests>
    for DeploymentStatusCreatedWorkflowRunPullRequests
{
    fn from(value: &DeploymentStatusCreatedWorkflowRunPullRequests) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsBase\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsBaseRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepo\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsBaseSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedWorkflowRunPullRequestsBase {
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repo: DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepo,
    #[doc = ""]
    pub sha: String,
}
impl From<&DeploymentStatusCreatedWorkflowRunPullRequestsBase>
    for DeploymentStatusCreatedWorkflowRunPullRequestsBase
{
    fn from(value: &DeploymentStatusCreatedWorkflowRunPullRequestsBase) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepo\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepoId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepoName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepoUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepo {
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub url: String,
}
impl From<&DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepo>
    for DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepo
{
    fn from(value: &DeploymentStatusCreatedWorkflowRunPullRequestsBaseRepo) -> Self {
        value.clone()
    }
}
#[doc = "DeploymentStatusCreatedWorkflowRunReferencedWorkflows"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"path\","]
#[doc = "    \"sha\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunReferencedWorkflowsPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunReferencedWorkflowsRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"DeploymentStatusCreatedWorkflowRunReferencedWorkflowsSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DeploymentStatusCreatedWorkflowRunReferencedWorkflows {
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    #[serde(rename = "ref", default, skip_serializing_if = "Option::is_none")]
    pub ref_: Option<String>,
    #[doc = ""]
    pub sha: String,
}
impl From<&DeploymentStatusCreatedWorkflowRunReferencedWorkflows>
    for DeploymentStatusCreatedWorkflowRunReferencedWorkflows
{
    fn from(value: &DeploymentStatusCreatedWorkflowRunReferencedWorkflows) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DeploymentStatusCreatedWorkflowRunStatus\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"in_progress\","]
#[doc = "    \"pending\","]
#[doc = "    \"queued\","]
#[doc = "    \"requested\","]
#[doc = "    \"waiting\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DeploymentStatusCreatedWorkflowRunStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "requested")]
    Requested,
    #[serde(rename = "waiting")]
    Waiting,
}
impl From<&DeploymentStatusCreatedWorkflowRunStatus> for DeploymentStatusCreatedWorkflowRunStatus {
    fn from(value: &DeploymentStatusCreatedWorkflowRunStatus) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DeploymentStatusCreatedWorkflowRunStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::InProgress => write!(f, "in_progress"),
            Self::Pending => write!(f, "pending"),
            Self::Queued => write!(f, "queued"),
            Self::Requested => write!(f, "requested"),
            Self::Waiting => write!(f, "waiting"),
        }
    }
}
impl std::str::FromStr for DeploymentStatusCreatedWorkflowRunStatus {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "in_progress" => Ok(Self::InProgress),
            "pending" => Ok(Self::Pending),
            "queued" => Ok(Self::Queued),
            "requested" => Ok(Self::Requested),
            "waiting" => Ok(Self::Waiting),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DeploymentStatusCreatedWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DeploymentStatusCreatedWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DeploymentStatusCreatedWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Discussion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"discussion\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionAnswered\","]
#[doc = "      \"description\": \"<p>A comment on the discussion was marked as the answer.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"answer\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionAnsweredAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"answered\""]
#[doc = "        },"]
#[doc = "        \"answer\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredAnswer\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionCategoryChanged\","]
#[doc = "      \"description\": \"<p>The category of a discussion was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionCategoryChangedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"category_changed\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionCategoryChangedChanges\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionClosed\","]
#[doc = "      \"description\": \"<p>A discussion was closed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionClosedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"closed\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionCreated\","]
#[doc = "      \"description\": \"<p>A discussion was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionDeleted\","]
#[doc = "      \"description\": \"<p>A discussion was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionEdited\","]
#[doc = "      \"description\": \"<p>The title or body on a discussion was edited, or the category of the discussion was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionLabeled\","]
#[doc = "      \"description\": \"<p>A label was added to a discussion.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"label\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionLabeledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"labeled\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionLocked\","]
#[doc = "      \"description\": \"<p>A discussion was locked.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionLockedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"locked\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionPinned\","]
#[doc = "      \"description\": \"<p>A discussion was pinned.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionPinnedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"pinned\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionReopened\","]
#[doc = "      \"description\": \"<p>A discussion was reopened.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionReopenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reopened\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionTransferred\","]
#[doc = "      \"description\": \"<p>A discussion was transferred to another repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionTransferredAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"transferred\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionTransferredChanges\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionUnanswered\","]
#[doc = "      \"description\": \"<p>A comment on the discussion was unmarked as the answer.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"old_answer\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionUnansweredAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unanswered\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"old_answer\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredAnswer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionUnlabeled\","]
#[doc = "      \"description\": \"<p>A label was removed from a discussion.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"label\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionUnlabeledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unlabeled\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionUnlocked\","]
#[doc = "      \"description\": \"<p>A discussion was unlocked.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionUnlockedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unlocked\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionUnpinned\","]
#[doc = "      \"description\": \"<p>A discussion was unpinned.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionUnpinnedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unpinned\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Discussion {
    #[doc = "DiscussionAnswered\n\n<p>A comment on the discussion was marked as the answer.</p>"]
    #[serde(rename = "answered")]
    Answered {
        answer: DiscussionAnsweredAnswer,
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionCategoryChanged\n\n<p>The category of a discussion was changed.</p>"]
    #[serde(rename = "category_changed")]
    CategoryChanged {
        changes: DiscussionCategoryChangedChanges,
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionClosed\n\n<p>A discussion was closed.</p>"]
    #[serde(rename = "closed")]
    Closed {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionCreated\n\n<p>A discussion was created.</p>"]
    #[serde(rename = "created")]
    Created {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionDeleted\n\n<p>A discussion was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionEdited\n\n<p>The title or body on a discussion was edited, or the category of the discussion was changed.</p>"]
    #[serde(rename = "edited")]
    Edited {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<DiscussionEditedChanges>,
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionLabeled\n\n<p>A label was added to a discussion.</p>"]
    #[serde(rename = "labeled")]
    Labeled {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        label: DiscussionLabeledLabel,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionLocked\n\n<p>A discussion was locked.</p>"]
    #[serde(rename = "locked")]
    Locked {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionPinned\n\n<p>A discussion was pinned.</p>"]
    #[serde(rename = "pinned")]
    Pinned {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionReopened\n\n<p>A discussion was reopened.</p>"]
    #[serde(rename = "reopened")]
    Reopened {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionTransferred\n\n<p>A discussion was transferred to another repository.</p>"]
    #[serde(rename = "transferred")]
    Transferred {
        changes: DiscussionTransferredChanges,
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionUnanswered\n\n<p>A comment on the discussion was unmarked as the answer.</p>"]
    #[serde(rename = "unanswered")]
    Unanswered {
        discussion: DiscussionAnsweredDiscussion,
        old_answer: DiscussionAnsweredAnswer,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "DiscussionUnlabeled\n\n<p>A label was removed from a discussion.</p>"]
    #[serde(rename = "unlabeled")]
    Unlabeled {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        label: DiscussionLabeledLabel,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionUnlocked\n\n<p>A discussion was unlocked.</p>"]
    #[serde(rename = "unlocked")]
    Unlocked {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionUnpinned\n\n<p>A discussion was unpinned.</p>"]
    #[serde(rename = "unpinned")]
    Unpinned {
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&Discussion> for Discussion {
    fn from(value: &Discussion) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionAnsweredAnswer\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"child_comment_count\","]
#[doc = "    \"created_at\","]
#[doc = "    \"discussion_id\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"parent_id\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"child_comment_count\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerChildCommentCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"discussion_id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerDiscussionId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parent_id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerParentId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionAnsweredAnswer {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = ""]
    pub body: String,
    #[doc = ""]
    pub child_comment_count: i64,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub discussion_id: i64,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub parent_id: (),
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reactions: Option<DiscussionAnsweredAnswerReactions>,
    #[doc = ""]
    pub repository_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&DiscussionAnsweredAnswer> for DiscussionAnsweredAnswer {
    fn from(value: &DiscussionAnsweredAnswer) -> Self {
        value.clone()
    }
}

/// Added a Default impl only to make writing tests easier.
#[doc = "<p>How the author is associated with the repository.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionAnsweredAnswerAuthorAssociation\","]
#[doc = "  \"description\": \"<p>How the author is associated with the repository.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"COLLABORATOR\","]
#[doc = "    \"CONTRIBUTOR\","]
#[doc = "    \"FIRST_TIMER\","]
#[doc = "    \"FIRST_TIME_CONTRIBUTOR\","]
#[doc = "    \"MANNEQUIN\","]
#[doc = "    \"MEMBER\","]
#[doc = "    \"NONE\","]
#[doc = "    \"OWNER\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Default,
)]
pub enum DiscussionAnsweredAnswerAuthorAssociation {
    #[serde(rename = "COLLABORATOR")]
    Collaborator,
    
    #[default]
    #[serde(rename = "CONTRIBUTOR")]
    Contributor,

    #[serde(rename = "FIRST_TIMER")]
    FirstTimer,
    #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
    FirstTimeContributor,
    #[serde(rename = "MANNEQUIN")]
    Mannequin,
    #[serde(rename = "MEMBER")]
    Member,
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "OWNER")]
    Owner,
}
impl From<&DiscussionAnsweredAnswerAuthorAssociation>
    for DiscussionAnsweredAnswerAuthorAssociation
{
    fn from(value: &DiscussionAnsweredAnswerAuthorAssociation) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DiscussionAnsweredAnswerAuthorAssociation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Collaborator => write!(f, "COLLABORATOR"),
            Self::Contributor => write!(f, "CONTRIBUTOR"),
            Self::FirstTimer => write!(f, "FIRST_TIMER"),
            Self::FirstTimeContributor => write!(f, "FIRST_TIME_CONTRIBUTOR"),
            Self::Mannequin => write!(f, "MANNEQUIN"),
            Self::Member => write!(f, "MEMBER"),
            Self::None => write!(f, "NONE"),
            Self::Owner => write!(f, "OWNER"),
        }
    }
}
impl std::str::FromStr for DiscussionAnsweredAnswerAuthorAssociation {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "COLLABORATOR" => Ok(Self::Collaborator),
            "CONTRIBUTOR" => Ok(Self::Contributor),
            "FIRST_TIMER" => Ok(Self::FirstTimer),
            "FIRST_TIME_CONTRIBUTOR" => Ok(Self::FirstTimeContributor),
            "MANNEQUIN" => Ok(Self::Mannequin),
            "MEMBER" => Ok(Self::Member),
            "NONE" => Ok(Self::None),
            "OWNER" => Ok(Self::Owner),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DiscussionAnsweredAnswerAuthorAssociation {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DiscussionAnsweredAnswerAuthorAssociation {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DiscussionAnsweredAnswerAuthorAssociation {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionAnsweredAnswerReactions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"+1\","]
#[doc = "    \"-1\","]
#[doc = "    \"confused\","]
#[doc = "    \"eyes\","]
#[doc = "    \"heart\","]
#[doc = "    \"hooray\","]
#[doc = "    \"laugh\","]
#[doc = "    \"rocket\","]
#[doc = "    \"total_count\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"+1\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactions+1\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"-1\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactions1\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"confused\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactionsConfused\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"eyes\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactionsEyes\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"heart\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactionsHeart\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"hooray\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactionsHooray\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"laugh\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactionsLaugh\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"rocket\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactionsRocket\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"total_count\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactionsTotalCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredAnswerReactionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug, Default)]
pub struct DiscussionAnsweredAnswerReactions {
    #[doc = ""]
    pub confused: i64,
    #[doc = ""]
    pub eyes: i64,
    #[doc = ""]
    pub heart: i64,
    #[doc = ""]
    pub hooray: i64,
    #[doc = ""]
    pub laugh: i64,
    #[doc = ""]
    #[serde(rename = "-1")]
    pub minus1: i64,
    #[doc = ""]
    #[serde(rename = "+1")]
    pub plus1: i64,
    #[doc = ""]
    pub rocket: i64,
    #[doc = ""]
    pub total_count: i64,
    #[doc = ""]
    pub url: String,
}
impl From<&DiscussionAnsweredAnswerReactions> for DiscussionAnsweredAnswerReactions {
    fn from(value: &DiscussionAnsweredAnswerReactions) -> Self {
        value.clone()
    }
}
#[doc = "<p>A Discussion in a repository.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionAnsweredDiscussion\","]
#[doc = "  \"description\": \"<p>A Discussion in a repository.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"answer_chosen_at\","]
#[doc = "    \"answer_chosen_by\","]
#[doc = "    \"answer_html_url\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"category\","]
#[doc = "    \"comments\","]
#[doc = "    \"created_at\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"locked\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"state\","]
#[doc = "    \"state_reason\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"answer_chosen_at\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionAnswerChosenAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"answer_chosen_by\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionAnswerChosenBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"answer_html_url\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionAnswerHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"category\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredDiscussionCategory\""]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionAnsweredDiscussionLabels\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredDiscussionState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionStateReason\","]
#[doc = "      \"description\": \"<p>The reason for the current state</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussionStateReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionAnsweredDiscussion {
    #[doc = ""]
    pub active_lock_reason: Option<String>,
    #[doc = ""]
    pub answer_chosen_at: Option<String>,
    #[doc = ""]
    pub answer_chosen_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub answer_html_url: Option<String>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = ""]
    pub body: String,
    pub category: DiscussionAnsweredDiscussionCategory,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<DiscussionAnsweredDiscussionLabels>,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reactions: Option<DiscussionAnsweredAnswerReactions>,
    #[doc = ""]
    pub repository_url: String,
    pub state: DiscussionAnsweredDiscussionState,
    #[doc = "<p>The reason for the current state</p>"]
    pub state_reason: Option<DiscussionAnsweredDiscussionStateReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&DiscussionAnsweredDiscussion> for DiscussionAnsweredDiscussion {
    fn from(value: &DiscussionAnsweredDiscussion) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionAnsweredDiscussionCategory\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"emoji\","]
#[doc = "    \"id\","]
#[doc = "    \"is_answerable\","]
#[doc = "    \"name\","]
#[doc = "    \"repository_id\","]
#[doc = "    \"slug\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"emoji\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryEmoji\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_answerable\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryIsAnswerable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repository_id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryRepositoryId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategorySlug\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionCategoryUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionAnsweredDiscussionCategory {
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub description: String,
    #[doc = ""]
    pub emoji: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub is_answerable: bool,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    pub repository_id: i64,
    #[doc = ""]
    pub slug: String,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&DiscussionAnsweredDiscussionCategory> for DiscussionAnsweredDiscussionCategory {
    fn from(value: &DiscussionAnsweredDiscussionCategory) -> Self {
        value.clone()
    }
}
#[doc = "DiscussionAnsweredDiscussionLabels"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"color\","]
#[doc = "    \"default\","]
#[doc = "    \"description\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"color\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLabelsColor\","]
#[doc = "      \"description\": \"<p>6-character hex code, without the leading #, identifying the color</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"default\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLabelsDefault\","]
#[doc = "      \"description\": \"<p>Whether this label comes by default in a new repository.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLabelsDescription\","]
#[doc = "      \"description\": \"<p>Optional description of the label, such as its purpose.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLabelsId\","]
#[doc = "      \"description\": \"<p>Unique identifier for the label.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLabelsName\","]
#[doc = "      \"description\": \"<p>The name of the label.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLabelsNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DiscussionAnsweredDiscussionLabelsUrl\","]
#[doc = "      \"description\": \"<p>URL for the label</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionAnsweredDiscussionLabels {
    #[doc = "<p>6-character hex code, without the leading #, identifying the color</p>"]
    pub color: String,
    #[doc = "<p>Whether this label comes by default in a new repository.</p>"]
    pub default: bool,
    #[doc = "<p>Optional description of the label, such as its purpose.</p>"]
    pub description: Option<String>,
    #[doc = "<p>Unique identifier for the label.</p>"]
    pub id: i64,
    #[doc = "<p>The name of the label.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>URL for the label</p>"]
    pub url: String,
}
impl From<&DiscussionAnsweredDiscussionLabels> for DiscussionAnsweredDiscussionLabels {
    fn from(value: &DiscussionAnsweredDiscussionLabels) -> Self {
        value.clone()
    }
}
#[doc = "<p>The current state of the discussion.\n<code>converting</code> means that the discussion is being converted from an issue.\n<code>transferring</code> means that the discussion is being transferred from another repository.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionAnsweredDiscussionState\","]
#[doc = "  \"description\": \"<p>The current state of the discussion.\\n<code>converting</code> means that the discussion is being converted from an issue.\\n<code>transferring</code> means that the discussion is being transferred from another repository.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"closed\","]
#[doc = "    \"converting\","]
#[doc = "    \"locked\","]
#[doc = "    \"open\","]
#[doc = "    \"transferring\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DiscussionAnsweredDiscussionState {
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "converting")]
    Converting,
    #[serde(rename = "locked")]
    Locked,
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "transferring")]
    Transferring,
}
impl From<&DiscussionAnsweredDiscussionState> for DiscussionAnsweredDiscussionState {
    fn from(value: &DiscussionAnsweredDiscussionState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DiscussionAnsweredDiscussionState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Closed => write!(f, "closed"),
            Self::Converting => write!(f, "converting"),
            Self::Locked => write!(f, "locked"),
            Self::Open => write!(f, "open"),
            Self::Transferring => write!(f, "transferring"),
        }
    }
}
impl std::str::FromStr for DiscussionAnsweredDiscussionState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "closed" => Ok(Self::Closed),
            "converting" => Ok(Self::Converting),
            "locked" => Ok(Self::Locked),
            "open" => Ok(Self::Open),
            "transferring" => Ok(Self::Transferring),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DiscussionAnsweredDiscussionState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DiscussionAnsweredDiscussionState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DiscussionAnsweredDiscussionState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "DiscussionAnsweredDiscussionStateReason"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"duplicate\","]
#[doc = "    \"outdated\","]
#[doc = "    \"reopened\","]
#[doc = "    \"resolved\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DiscussionAnsweredDiscussionStateReason {
    #[serde(rename = "duplicate")]
    Duplicate,
    #[serde(rename = "outdated")]
    Outdated,
    #[serde(rename = "reopened")]
    Reopened,
    #[serde(rename = "resolved")]
    Resolved,
}
impl From<&DiscussionAnsweredDiscussionStateReason> for DiscussionAnsweredDiscussionStateReason {
    fn from(value: &DiscussionAnsweredDiscussionStateReason) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for DiscussionAnsweredDiscussionStateReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Duplicate => write!(f, "duplicate"),
            Self::Outdated => write!(f, "outdated"),
            Self::Reopened => write!(f, "reopened"),
            Self::Resolved => write!(f, "resolved"),
        }
    }
}
impl std::str::FromStr for DiscussionAnsweredDiscussionStateReason {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "duplicate" => Ok(Self::Duplicate),
            "outdated" => Ok(Self::Outdated),
            "reopened" => Ok(Self::Reopened),
            "resolved" => Ok(Self::Resolved),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for DiscussionAnsweredDiscussionStateReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for DiscussionAnsweredDiscussionStateReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for DiscussionAnsweredDiscussionStateReason {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionCategoryChangedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"category\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"category\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionCategoryChangedChangesCategory\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionCategoryChangedChanges {
    pub category: DiscussionCategoryChangedChangesCategory,
}
impl From<&DiscussionCategoryChangedChanges> for DiscussionCategoryChangedChanges {
    fn from(value: &DiscussionCategoryChangedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionCategoryChangedChangesCategory\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"from\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredDiscussionCategory\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionCategoryChangedChangesCategory {
    pub from: DiscussionAnsweredDiscussionCategory,
}
impl From<&DiscussionCategoryChangedChangesCategory> for DiscussionCategoryChangedChangesCategory {
    fn from(value: &DiscussionCategoryChangedChangesCategory) -> Self {
        value.clone()
    }
}
#[doc = "DiscussionComment"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"discussion_comment\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionCommentCreated\","]
#[doc = "      \"description\": \"<p>A comment on a discussion was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"comment\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionCommentCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionCommentCreatedComment\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionCommentDeleted\","]
#[doc = "      \"description\": \"<p>A comment on a discussion was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"comment\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionCommentDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionCommentCreatedComment\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"DiscussionCommentEdited\","]
#[doc = "      \"description\": \"<p>A comment on a discussion was edited.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"comment\","]
#[doc = "        \"discussion\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"DiscussionCommentEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionCommentCreatedComment\""]
#[doc = "        },"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum DiscussionComment {
    #[doc = "DiscussionCommentCreated\n\n<p>A comment on a discussion was created.</p>"]
    #[serde(rename = "created")]
    Created {
        comment: DiscussionCommentCreatedComment,
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionCommentDeleted\n\n<p>A comment on a discussion was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        comment: DiscussionCommentCreatedComment,
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "DiscussionCommentEdited\n\n<p>A comment on a discussion was edited.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: IssueCommentEditedChanges,
        comment: DiscussionCommentCreatedComment,
        discussion: DiscussionAnsweredDiscussion,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&DiscussionComment> for DiscussionComment {
    fn from(value: &DiscussionComment) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionCommentCreatedComment\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"child_comment_count\","]
#[doc = "    \"created_at\","]
#[doc = "    \"discussion_id\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"parent_id\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"child_comment_count\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentChildCommentCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"discussion_id\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentDiscussionId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parent_id\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentParentId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"DiscussionCommentCreatedCommentUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionCommentCreatedComment {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = ""]
    pub body: String,
    #[doc = ""]
    pub child_comment_count: i64,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub discussion_id: i64,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub parent_id: Option<i64>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&DiscussionCommentCreatedComment> for DiscussionCommentCreatedComment {
    fn from(value: &DiscussionCommentCreatedComment) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionEditedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"body\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<DiscussionEditedChangesBody>,
}
impl From<&DiscussionEditedChanges> for DiscussionEditedChanges {
    fn from(value: &DiscussionEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionEditedChangesBody\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"from\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"title\": \"DiscussionEditedChangesBodyFrom\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionEditedChangesBody {
    #[doc = ""]
    pub from: String,
}
impl From<&DiscussionEditedChangesBody> for DiscussionEditedChangesBody {
    fn from(value: &DiscussionEditedChangesBody) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionLabeledLabel\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"color\","]
#[doc = "    \"default\","]
#[doc = "    \"description\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"color\": {"]
#[doc = "      \"title\": \"DiscussionLabeledLabelColor\","]
#[doc = "      \"description\": \"<p>6-character hex code, without the leading #, identifying the color</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"default\": {"]
#[doc = "      \"title\": \"DiscussionLabeledLabelDefault\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DiscussionLabeledLabelDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionLabeledLabelId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DiscussionLabeledLabelName\","]
#[doc = "      \"description\": \"<p>The name of the label.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionLabeledLabelNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DiscussionLabeledLabelUrl\","]
#[doc = "      \"description\": \"<p>URL for the label</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionLabeledLabel {
    #[doc = "<p>6-character hex code, without the leading #, identifying the color</p>"]
    pub color: String,
    #[doc = ""]
    pub default: bool,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = "<p>The name of the label.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>URL for the label</p>"]
    pub url: String,
}
impl From<&DiscussionLabeledLabel> for DiscussionLabeledLabel {
    fn from(value: &DiscussionLabeledLabel) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"new_discussion\","]
#[doc = "    \"new_repository\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"new_discussion\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredDiscussion\""]
#[doc = "    },"]
#[doc = "    \"new_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepository\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionTransferredChanges {
    pub new_discussion: DiscussionAnsweredDiscussion,
    pub new_repository: DiscussionTransferredChangesNewRepository,
}
impl From<&DiscussionTransferredChanges> for DiscussionTransferredChanges {
    fn from(value: &DiscussionTransferredChanges) -> Self {
        value.clone()
    }
}
#[doc = "<p>The repository on GitHub where the event occurred. Webhook payloads contain the <code>repository</code> property\nwhen the event occurs from activity in a repository.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepository\","]
#[doc = "  \"description\": \"<p>The repository on GitHub where the event occurred. Webhook payloads contain the <code>repository</code> property\\nwhen the event occurs from activity in a repository.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"disabled\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow Auto-merge to be used on pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryAllowForking\","]
#[doc = "      \"description\": \"<p>Whether to allow forking this repo</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryAllowUpdateBranch\","]
#[doc = "      \"description\": \"<p>Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"anonymous_access_enabled\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryAnonymousAccessEnabled\","]
#[doc = "      \"description\": \"<p>Whether anonymous git access is enabled for this repository</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"custom_properties\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryDisabled\","]
#[doc = "      \"description\": \"<p>Returns whether or not this repository disabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_discussions\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHasDiscussions\","]
#[doc = "      \"description\": \"<p>Whether discussions are enabled.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryIsTemplate\","]
#[doc = "      \"description\": \"<p>Whether this repository acts as a template that can be used to generate new repositories.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryLicense\""]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"network_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryNetworkCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositorySize\","]
#[doc = "      \"description\": \"<p>The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositorySshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"starred_at\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryStarredAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositorySubscribersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositorySvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"temp_clone_token\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTempCloneToken\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"template_repository\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepository\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepository\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"use_squash_pr_title_as_default\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryUseSquashPrTitleAsDefault\","]
#[doc = "      \"description\": \"<p>Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryVisibility\","]
#[doc = "      \"description\": \"<p>The repository visibility: public, private, or internal.</p>\","]
#[doc = "      \"default\": \"public\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"<p>Whether to require contributors to sign off on web-based commits</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionTransferredChangesNewRepository {
    #[doc = "<p>Whether to allow Auto-merge to be used on pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow forking this repo</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = "<p>Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.</p>"]
    #[serde(default)]
    pub allow_update_branch: bool,
    #[doc = "<p>Whether anonymous git access is enabled for this repository</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub anonymous_access_enabled: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_properties: Option<Untyped>,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Returns whether or not this repository disabled.</p>"]
    pub disabled: bool,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether discussions are enabled.</p>"]
    #[serde(default)]
    pub has_discussions: bool,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = "<p>Whether this repository acts as a template that can be used to generate new repositories.</p>"]
    #[serde(default)]
    pub is_template: bool,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    pub license: DiscussionTransferredChangesNewRepositoryLicense,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network_count: Option<i64>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<DiscussionTransferredChangesNewRepositoryOrganization>,
    pub owner: DiscussionTransferredChangesNewRepositoryOrganization,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<DiscussionTransferredChangesNewRepositoryPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<String>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = "<p>The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.</p>"]
    pub size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle>,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_at: Option<String>,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscribers_count: Option<i64>,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temp_clone_token: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub template_repository: Option<DiscussionTransferredChangesNewRepositoryTemplateRepository>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: Option<String>,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</p>"]
    #[serde(default)]
    pub use_squash_pr_title_as_default: bool,
    #[doc = "<p>The repository visibility: public, private, or internal.</p>"]
    #[serde(default = "defaults::discussion_transferred_changes_new_repository_visibility")]
    pub visibility: String,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
    #[doc = "<p>Whether to require contributors to sign off on web-based commits</p>"]
    #[serde(default)]
    pub web_commit_signoff_required: bool,
}
impl From<&DiscussionTransferredChangesNewRepository>
    for DiscussionTransferredChangesNewRepository
{
    fn from(value: &DiscussionTransferredChangesNewRepository) -> Self {
        value.clone()
    }
}
#[doc = "<p>License Simple</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryLicense\","]
#[doc = "  \"description\": \"<p>License Simple</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"key\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"spdx_id\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLicenseHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"key\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLicenseKey\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLicenseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLicenseNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"spdx_id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLicenseSpdxId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryLicenseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionTransferredChangesNewRepositoryLicense {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    pub key: String,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub spdx_id: Option<String>,
    #[doc = ""]
    pub url: Option<String>,
}
impl From<&DiscussionTransferredChangesNewRepositoryLicense>
    for DiscussionTransferredChangesNewRepositoryLicense
{
    fn from(value: &DiscussionTransferredChangesNewRepositoryLicense) -> Self {
        value.clone()
    }
}
#[doc = "<p>A GitHub user.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryOrganization\","]
#[doc = "  \"description\": \"<p>A GitHub user.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"avatar_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"followers_url\","]
#[doc = "    \"following_url\","]
#[doc = "    \"gists_url\","]
#[doc = "    \"gravatar_id\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"login\","]
#[doc = "    \"node_id\","]
#[doc = "    \"organizations_url\","]
#[doc = "    \"received_events_url\","]
#[doc = "    \"repos_url\","]
#[doc = "    \"site_admin\","]
#[doc = "    \"starred_url\","]
#[doc = "    \"subscriptions_url\","]
#[doc = "    \"type\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationEmail\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_at\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationStarredAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user_view_type\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryOrganizationUserViewType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionTransferredChangesNewRepositoryOrganization {
    #[doc = ""]
    pub avatar_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub followers_url: String,
    #[doc = ""]
    pub following_url: String,
    #[doc = ""]
    pub gists_url: String,
    #[doc = ""]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub login: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub organizations_url: String,
    #[doc = ""]
    pub received_events_url: String,
    #[doc = ""]
    pub repos_url: String,
    #[doc = ""]
    pub site_admin: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_at: Option<String>,
    #[doc = ""]
    pub starred_url: String,
    #[doc = ""]
    pub subscriptions_url: String,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_view_type: Option<String>,
}
impl From<&DiscussionTransferredChangesNewRepositoryOrganization>
    for DiscussionTransferredChangesNewRepositoryOrganization
{
    fn from(value: &DiscussionTransferredChangesNewRepositoryOrganization) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryPermissions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"admin\","]
#[doc = "    \"pull\","]
#[doc = "    \"push\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"admin\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryPermissionsAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintain\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryPermissionsMaintain\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pull\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryPermissionsPull\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"push\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryPermissionsPush\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"triage\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryPermissionsTriage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionTransferredChangesNewRepositoryPermissions {
    #[doc = ""]
    pub admin: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintain: Option<bool>,
    #[doc = ""]
    pub pull: bool,
    #[doc = ""]
    pub push: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub triage: Option<bool>,
}
impl From<&DiscussionTransferredChangesNewRepositoryPermissions>
    for DiscussionTransferredChangesNewRepositoryPermissions
{
    fn from(value: &DiscussionTransferredChangesNewRepositoryPermissions) -> Self {
        value.clone()
    }
}
#[doc = "DiscussionTransferredChangesNewRepositoryTemplateRepository"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryAllowAutoMerge\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryAllowMergeCommit\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryAllowRebaseMerge\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryAllowSquashMerge\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryAllowUpdateBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryArchived\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryDefaultBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryDisabled\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryHasDownloads\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryHasIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryHasProjects\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryHasWiki\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"network_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryNetworkCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwner\""]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPrivate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositorySize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositorySshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositorySubscribersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositorySvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"temp_clone_token\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryTempCloneToken\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"use_squash_pr_title_as_default\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryUseSquashPrTitleAsDefault\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryVisibility\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionTransferredChangesNewRepositoryTemplateRepository {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_auto_merge: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_merge_commit: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_rebase_merge: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_squash_merge: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archive_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archived: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignees_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blobs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clone_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collaborators_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compare_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contents_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contributors_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_branch: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delete_branch_on_merge: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployments_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub downloads_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fork: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forks_count: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forks_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_commits_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_refs_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_tags_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_downloads: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_issues: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_pages: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_projects: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_wiki: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issue_comment_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issue_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub languages_url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merges_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub milestones_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mirror_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network_count: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notifications_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub open_issues_count: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwner>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub private: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pulls_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pushed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub releases_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ssh_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers_count: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscribers_count: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscribers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscription_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub svn_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub teams_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temp_clone_token: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub topics: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trees_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub use_squash_pr_title_as_default: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub watchers_count: Option<i64>,
}
impl From<&DiscussionTransferredChangesNewRepositoryTemplateRepository>
    for DiscussionTransferredChangesNewRepositoryTemplateRepository
{
    fn from(value: &DiscussionTransferredChangesNewRepositoryTemplateRepository) -> Self {
        value.clone()
    }
}
#[doc = "<p>The default value for a merge commit message.</p>\n<ul>\n<li><code>PR_TITLE</code> - default to the pull request's title.</li>\n<li><code>PR_BODY</code> - default to the pull request's body.</li>\n<li><code>BLANK</code> - default to a blank commit message.</li>\n</ul>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage\","]
#[doc = "  \"description\": \"<p>The default value for a merge commit message.</p>\\n<ul>\\n<li><code>PR_TITLE</code> - default to the pull request's title.</li>\\n<li><code>PR_BODY</code> - default to the pull request's body.</li>\\n<li><code>BLANK</code> - default to a blank commit message.</li>\\n</ul>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"BLANK\","]
#[doc = "    \"PR_BODY\","]
#[doc = "    \"PR_TITLE\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage {
    #[serde(rename = "BLANK")]
    Blank,
    #[serde(rename = "PR_BODY")]
    PrBody,
    #[serde(rename = "PR_TITLE")]
    PrTitle,
}
impl From<&DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage
{
    fn from(
        value: &DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Blank => write!(f, "BLANK"),
            Self::PrBody => write!(f, "PR_BODY"),
            Self::PrTitle => write!(f, "PR_TITLE"),
        }
    }
}
impl std::str::FromStr
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "BLANK" => Ok(Self::Blank),
            "PR_BODY" => Ok(Self::PrBody),
            "PR_TITLE" => Ok(Self::PrTitle),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The default value for a merge commit title.</p>\n<ul>\n<li><code>PR_TITLE</code> - default to the pull request's title.</li>\n<li><code>MERGE_MESSAGE</code> - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).</li>\n</ul>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle\","]
#[doc = "  \"description\": \"<p>The default value for a merge commit title.</p>\\n<ul>\\n<li><code>PR_TITLE</code> - default to the pull request's title.</li>\\n<li><code>MERGE_MESSAGE</code> - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).</li>\\n</ul>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"MERGE_MESSAGE\","]
#[doc = "    \"PR_TITLE\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle {
    #[serde(rename = "MERGE_MESSAGE")]
    MergeMessage,
    #[serde(rename = "PR_TITLE")]
    PrTitle,
}
impl From<&DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle
{
    fn from(
        value: &DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::MergeMessage => write!(f, "MERGE_MESSAGE"),
            Self::PrTitle => write!(f, "PR_TITLE"),
        }
    }
}
impl std::str::FromStr
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "MERGE_MESSAGE" => Ok(Self::MergeMessage),
            "PR_TITLE" => Ok(Self::PrTitle),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwner\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwnerUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwner {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[doc = ""]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwner>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwner
{
    fn from(value: &DiscussionTransferredChangesNewRepositoryTemplateRepositoryOwner) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"admin\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissionsAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintain\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissionsMaintain\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pull\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissionsPull\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"push\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissionsPush\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"triage\": {"]
#[doc = "      \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissionsTriage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintain: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub triage: Option<bool>,
}
impl From<&DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions
{
    fn from(
        value: &DiscussionTransferredChangesNewRepositoryTemplateRepositoryPermissions,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>The default value for a squash merge commit message:</p>\n<ul>\n<li><code>PR_BODY</code> - default to the pull request's body.</li>\n<li><code>COMMIT_MESSAGES</code> - default to the branch's commit messages.</li>\n<li><code>BLANK</code> - default to a blank commit message.</li>\n</ul>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage\","]
#[doc = "  \"description\": \"<p>The default value for a squash merge commit message:</p>\\n<ul>\\n<li><code>PR_BODY</code> - default to the pull request's body.</li>\\n<li><code>COMMIT_MESSAGES</code> - default to the branch's commit messages.</li>\\n<li><code>BLANK</code> - default to a blank commit message.</li>\\n</ul>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"BLANK\","]
#[doc = "    \"COMMIT_MESSAGES\","]
#[doc = "    \"PR_BODY\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage {
    #[serde(rename = "BLANK")]
    Blank,
    #[serde(rename = "COMMIT_MESSAGES")]
    CommitMessages,
    #[serde(rename = "PR_BODY")]
    PrBody,
}
impl From<&DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage
{
    fn from(
        value: &DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Blank => write!(f, "BLANK"),
            Self::CommitMessages => write!(f, "COMMIT_MESSAGES"),
            Self::PrBody => write!(f, "PR_BODY"),
        }
    }
}
impl std::str::FromStr
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "BLANK" => Ok(Self::Blank),
            "COMMIT_MESSAGES" => Ok(Self::CommitMessages),
            "PR_BODY" => Ok(Self::PrBody),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The default value for a squash merge commit title:</p>\n<ul>\n<li><code>PR_TITLE</code> - default to the pull request's title.</li>\n<li><code>COMMIT_OR_PR_TITLE</code> - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).</li>\n</ul>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle\","]
#[doc = "  \"description\": \"<p>The default value for a squash merge commit title:</p>\\n<ul>\\n<li><code>PR_TITLE</code> - default to the pull request's title.</li>\\n<li><code>COMMIT_OR_PR_TITLE</code> - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).</li>\\n</ul>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"COMMIT_OR_PR_TITLE\","]
#[doc = "    \"PR_TITLE\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle {
    #[serde(rename = "COMMIT_OR_PR_TITLE")]
    CommitOrPrTitle,
    #[serde(rename = "PR_TITLE")]
    PrTitle,
}
impl From<&DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle
{
    fn from(
        value: &DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::CommitOrPrTitle => write!(f, "COMMIT_OR_PR_TITLE"),
            Self::PrTitle => write!(f, "PR_TITLE"),
        }
    }
}
impl std::str::FromStr
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "COMMIT_OR_PR_TITLE" => Ok(Self::CommitOrPrTitle),
            "PR_TITLE" => Ok(Self::PrTitle),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ForkDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"forkee\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"forkee\": {"]
#[doc = "      \"$ref\": \"#/$defs/ForkDefaultForkee\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Fork {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    pub forkee: ForkDefaultForkee,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
}
impl From<&Fork> for Fork {
    fn from(value: &Fork) -> Self {
        value.clone()
    }
}
#[doc = "<p>The created <a href=\"https://docs.github.com/rest/repos/repos#get-a-repository\"><code>repository</code></a> resource.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ForkDefaultForkee\","]
#[doc = "  \"description\": \"<p>The created <a href=\\\"https://docs.github.com/rest/repos/repos#get-a-repository\\\"><code>repository</code></a> resource.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"topics\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"visibility\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow auto-merge for pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeAllowForking\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeAllowUpdateBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeDisabled\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoLicense\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeOrganization\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeePrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"public\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeePublic\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeePullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeePushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeRoleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeSize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeSshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeStargazers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeSubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeSubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeSvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"ForkDefaultForkeeWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"<p>Whether to require contributors to sign off on web-based commits</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ForkDefaultForkee {
    #[doc = "<p>Whether to allow auto-merge for pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: ForkDefaultForkeeCreatedAt,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub license: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoLicense>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<ForkDefaultForkeePushedAt>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[doc = ""]
    pub size: i64,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers: Option<i64>,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    pub visibility: PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
    #[doc = "<p>Whether to require contributors to sign off on web-based commits</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web_commit_signoff_required: Option<bool>,
}
impl From<&ForkDefaultForkee> for ForkDefaultForkee {
    fn from(value: &ForkDefaultForkee) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ForkDefaultForkeeCreatedAt\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum ForkDefaultForkeeCreatedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&ForkDefaultForkeeCreatedAt> for ForkDefaultForkeeCreatedAt {
    fn from(value: &ForkDefaultForkeeCreatedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for ForkDefaultForkeeCreatedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for ForkDefaultForkeeCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for ForkDefaultForkeeCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for ForkDefaultForkeeCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for ForkDefaultForkeeCreatedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for ForkDefaultForkeeCreatedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "ForkDefaultForkeePushedAt"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum ForkDefaultForkeePushedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&ForkDefaultForkeePushedAt> for ForkDefaultForkeePushedAt {
    fn from(value: &ForkDefaultForkeePushedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for ForkDefaultForkeePushedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for ForkDefaultForkeePushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for ForkDefaultForkeePushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for ForkDefaultForkeePushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for ForkDefaultForkeePushedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for ForkDefaultForkeePushedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "GithubAppAuthorization"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"github_app_authorization\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/GithubAppAuthorizationRevoked\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct GithubAppAuthorization(pub GithubAppAuthorizationRevoked);
impl ::std::ops::Deref for GithubAppAuthorization {
    type Target = GithubAppAuthorizationRevoked;
    fn deref(&self) -> &GithubAppAuthorizationRevoked {
        &self.0
    }
}
impl From<GithubAppAuthorization> for GithubAppAuthorizationRevoked {
    fn from(value: GithubAppAuthorization) -> Self {
        value.0
    }
}
impl From<&GithubAppAuthorization> for GithubAppAuthorization {
    fn from(value: &GithubAppAuthorization) -> Self {
        value.clone()
    }
}
impl From<GithubAppAuthorizationRevoked> for GithubAppAuthorization {
    fn from(value: GithubAppAuthorizationRevoked) -> Self {
        Self(value)
    }
}
#[doc = "<p>Someone revoked their authorization of a GitHub App.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"GithubAppAuthorizationRevoked\","]
#[doc = "  \"description\": \"<p>Someone revoked their authorization of a GitHub App.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"action\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"action\": {"]
#[doc = "      \"title\": \"GithubAppAuthorizationRevokedAction\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"revoked\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct GithubAppAuthorizationRevoked {
    #[doc = ""]
    pub action: String,
    pub sender: Untyped,
}
impl From<&GithubAppAuthorizationRevoked> for GithubAppAuthorizationRevoked {
    fn from(value: &GithubAppAuthorizationRevoked) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"GollumDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"pages\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"pages\": {"]
#[doc = "      \"title\": \"GollumDefaultPages\","]
#[doc = "      \"description\": \"<p>The pages that were updated.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/GollumDefaultPages\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Gollum {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    #[doc = "<p>The pages that were updated.</p>"]
    pub pages: Vec<GollumDefaultPages>,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
}
impl From<&Gollum> for Gollum {
    fn from(value: &Gollum) -> Self {
        value.clone()
    }
}
#[doc = "GollumDefaultPages"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"action\","]
#[doc = "    \"html_url\","]
#[doc = "    \"page_name\","]
#[doc = "    \"sha\","]
#[doc = "    \"summary\","]
#[doc = "    \"title\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"action\": {"]
#[doc = "      \"title\": \"GollumDefaultPagesAction\","]
#[doc = "      \"description\": \"<p>The action that was performed on the page. Can be <code>created</code> or <code>edited</code>.</p>\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"created\","]
#[doc = "        \"edited\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"GollumDefaultPagesHtmlUrl\","]
#[doc = "      \"description\": \"<p>Points to the HTML wiki page.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"page_name\": {"]
#[doc = "      \"title\": \"GollumDefaultPagesPageName\","]
#[doc = "      \"description\": \"<p>The name of the page.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"GollumDefaultPagesSha\","]
#[doc = "      \"description\": \"<p>The latest commit SHA of the page.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"GollumDefaultPagesSummary\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"GollumDefaultPagesTitle\","]
#[doc = "      \"description\": \"<p>The current page title.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct GollumDefaultPages {
    #[doc = "<p>The action that was performed on the page. Can be <code>created</code> or <code>edited</code>.</p>"]
    pub action: GollumDefaultPagesAction,
    #[doc = "<p>Points to the HTML wiki page.</p>"]
    pub html_url: String,
    #[doc = "<p>The name of the page.</p>"]
    pub page_name: String,
    #[doc = "<p>The latest commit SHA of the page.</p>"]
    pub sha: String,
    #[doc = ""]
    pub summary: Option<String>,
    #[doc = "<p>The current page title.</p>"]
    pub title: String,
}
impl From<&GollumDefaultPages> for GollumDefaultPages {
    fn from(value: &GollumDefaultPages) -> Self {
        value.clone()
    }
}
#[doc = "<p>The action that was performed on the page. Can be <code>created</code> or <code>edited</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"GollumDefaultPagesAction\","]
#[doc = "  \"description\": \"<p>The action that was performed on the page. Can be <code>created</code> or <code>edited</code>.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"created\","]
#[doc = "    \"edited\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum GollumDefaultPagesAction {
    #[serde(rename = "created")]
    Created,
    #[serde(rename = "edited")]
    Edited,
}
impl From<&GollumDefaultPagesAction> for GollumDefaultPagesAction {
    fn from(value: &GollumDefaultPagesAction) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for GollumDefaultPagesAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Created => write!(f, "created"),
            Self::Edited => write!(f, "edited"),
        }
    }
}
impl std::str::FromStr for GollumDefaultPagesAction {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "created" => Ok(Self::Created),
            "edited" => Ok(Self::Edited),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for GollumDefaultPagesAction {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for GollumDefaultPagesAction {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for GollumDefaultPagesAction {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Installation"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"installation\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"InstallationCreated\","]
#[doc = "      \"description\": \"<p>Someone installed a GitHub App on a user or organization account.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"InstallationCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repositories\": {"]
#[doc = "          \"title\": \"InstallationCreatedRepositories\","]
#[doc = "          \"description\": \"<p>An array of repository objects that the installation can access.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requester\": {"]
#[doc = "          \"title\": \"InstallationCreatedRequester\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"InstallationDeleted\","]
#[doc = "      \"description\": \"<p>Someone uninstalled a GitHub App from their user or organization account.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"InstallationDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repositories\": {"]
#[doc = "          \"title\": \"InstallationDeletedRepositories\","]
#[doc = "          \"description\": \"<p>An array of repository objects that the installation can access.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requester\": {"]
#[doc = "          \"title\": \"InstallationDeletedRequester\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"null\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"InstallationNewPermissionsAccepted\","]
#[doc = "      \"description\": \"<p>Someone granted new permissions to a GitHub App.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"InstallationNewPermissionsAcceptedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"new_permissions_accepted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repositories\": {"]
#[doc = "          \"title\": \"InstallationNewPermissionsAcceptedRepositories\","]
#[doc = "          \"description\": \"<p>An array of repository objects that the installation can access.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requester\": {"]
#[doc = "          \"title\": \"InstallationNewPermissionsAcceptedRequester\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"null\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"InstallationSuspend\","]
#[doc = "      \"description\": \"<p>Someone blocked access by a GitHub App to their user or organization account.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"InstallationSuspendAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"suspend\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repositories\": {"]
#[doc = "          \"title\": \"InstallationSuspendRepositories\","]
#[doc = "          \"description\": \"<p>An array of repository objects that the installation can access.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requester\": {"]
#[doc = "          \"title\": \"InstallationSuspendRequester\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"null\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"InstallationUnsuspend\","]
#[doc = "      \"description\": \"<p>A GitHub App that was blocked from accessing a user or organization account was given access the account again.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"InstallationUnsuspendAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unsuspend\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repositories\": {"]
#[doc = "          \"title\": \"InstallationUnsuspendRepositories\","]
#[doc = "          \"description\": \"<p>An array of repository objects that the installation can access.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requester\": {"]
#[doc = "          \"title\": \"InstallationUnsuspendRequester\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"null\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Installation {
    #[doc = "InstallationCreated\n\n<p>Someone installed a GitHub App on a user or organization account.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>An array of repository objects that the installation can access.</p>"]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        repositories: Vec<InstallationCreatedRepositories>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        requester: Option<DeploymentStatusCreatedDeploymentCreator>,
        sender: Untyped,
    },
    #[doc = "InstallationDeleted\n\n<p>Someone uninstalled a GitHub App from their user or organization account.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>An array of repository objects that the installation can access.</p>"]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        repositories: Vec<InstallationCreatedRepositories>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[doc = ""]
        #[serde(default)]
        requester: (),
        sender: Untyped,
    },
    #[doc = "InstallationNewPermissionsAccepted\n\n<p>Someone granted new permissions to a GitHub App.</p>"]
    #[serde(rename = "new_permissions_accepted")]
    NewPermissionsAccepted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>An array of repository objects that the installation can access.</p>"]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        repositories: Vec<InstallationCreatedRepositories>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[doc = ""]
        #[serde(default)]
        requester: (),
        sender: Untyped,
    },
    #[doc = "InstallationSuspend\n\n<p>Someone blocked access by a GitHub App to their user or organization account.</p>"]
    #[serde(rename = "suspend")]
    Suspend {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>An array of repository objects that the installation can access.</p>"]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        repositories: Vec<InstallationCreatedRepositories>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[doc = ""]
        #[serde(default)]
        requester: (),
        sender: Untyped,
    },
    #[doc = "InstallationUnsuspend\n\n<p>A GitHub App that was blocked from accessing a user or organization account was given access the account again.</p>"]
    #[serde(rename = "unsuspend")]
    Unsuspend {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>An array of repository objects that the installation can access.</p>"]
        #[serde(default, skip_serializing_if = "Vec::is_empty")]
        repositories: Vec<InstallationCreatedRepositories>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[doc = ""]
        #[serde(default)]
        requester: (),
        sender: Untyped,
    },
}
impl From<&Installation> for Installation {
    fn from(value: &Installation) -> Self {
        value.clone()
    }
}
#[doc = "InstallationCreatedRepositories"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"full_name\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"private\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"InstallationCreatedRepositoriesFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"InstallationCreatedRepositoriesId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"InstallationCreatedRepositoriesName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"InstallationCreatedRepositoriesNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"InstallationCreatedRepositoriesPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct InstallationCreatedRepositories {
    #[doc = ""]
    pub full_name: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
}
impl From<&InstallationCreatedRepositories> for InstallationCreatedRepositories {
    fn from(value: &InstallationCreatedRepositories) -> Self {
        value.clone()
    }
}
#[doc = "InstallationRepositories"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"installation_repositories\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"InstallationRepositoriesAdded\","]
#[doc = "      \"description\": \"<p>A GitHub App installation was granted access to one or more repositories.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"repositories_added\","]
#[doc = "        \"repositories_removed\","]
#[doc = "        \"repository_selection\","]
#[doc = "        \"requester\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"InstallationRepositoriesAddedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"added\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repositories_added\": {"]
#[doc = "          \"title\": \"InstallationRepositoriesAddedRepositoriesAdded\","]
#[doc = "          \"description\": \"<p>An array of repository objects, which were added to the installation.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repositories_removed\": {"]
#[doc = "          \"title\": \"InstallationRepositoriesAddedRepositoriesRemoved\","]
#[doc = "          \"description\": \"<p>An array of repository objects, which were removed from the installation.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"repository_selection\": {"]
#[doc = "          \"$ref\": \"#/$defs/InstallationRepositoriesAddedRepositorySelection\""]
#[doc = "        },"]
#[doc = "        \"requester\": {"]
#[doc = "          \"title\": \"InstallationRepositoriesAddedRequester\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"InstallationRepositoriesRemoved\","]
#[doc = "      \"description\": \"<p>Access to one or more repositories was revoked for a GitHub App installation.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"repositories_added\","]
#[doc = "        \"repositories_removed\","]
#[doc = "        \"repository_selection\","]
#[doc = "        \"requester\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"InstallationRepositoriesRemovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"removed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repositories_added\": {"]
#[doc = "          \"title\": \"InstallationRepositoriesRemovedRepositoriesAdded\","]
#[doc = "          \"description\": \"<p>An array of repository objects, which were added to the installation.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repositories_removed\": {"]
#[doc = "          \"title\": \"InstallationRepositoriesRemovedRepositoriesRemoved\","]
#[doc = "          \"description\": \"<p>An array of repository objects, which were removed from the installation.</p>\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"repository_selection\": {"]
#[doc = "          \"$ref\": \"#/$defs/InstallationRepositoriesAddedRepositorySelection\""]
#[doc = "        },"]
#[doc = "        \"requester\": {"]
#[doc = "          \"title\": \"InstallationRepositoriesRemovedRequester\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum InstallationRepositories {
    #[doc = "InstallationRepositoriesAdded\n\n<p>A GitHub App installation was granted access to one or more repositories.</p>"]
    #[serde(rename = "added")]
    Added {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>An array of repository objects, which were added to the installation.</p>"]
        repositories_added: Vec<InstallationCreatedRepositories>,
        #[doc = "<p>An array of repository objects, which were removed from the installation.</p>"]
        repositories_removed: Vec<InstallationCreatedRepositories>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        repository_selection: InstallationRepositoriesAddedRepositorySelection,
        #[doc = ""]
        requester: Option<DeploymentStatusCreatedDeploymentCreator>,
        sender: Untyped,
    },
    #[doc = "InstallationRepositoriesRemoved\n\n<p>Access to one or more repositories was revoked for a GitHub App installation.</p>"]
    #[serde(rename = "removed")]
    Removed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>An array of repository objects, which were added to the installation.</p>"]
        repositories_added: Vec<InstallationCreatedRepositories>,
        #[doc = "<p>An array of repository objects, which were removed from the installation.</p>"]
        repositories_removed: Vec<InstallationCreatedRepositories>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        repository_selection: InstallationRepositoriesAddedRepositorySelection,
        #[doc = ""]
        requester: Option<DeploymentStatusCreatedDeploymentCreator>,
        sender: Untyped,
    },
}
impl From<&InstallationRepositories> for InstallationRepositories {
    fn from(value: &InstallationRepositories) -> Self {
        value.clone()
    }
}
#[doc = "<p>Describe whether all repositories have been selected or there's a selection involved</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"InstallationRepositoriesAddedRepositorySelection\","]
#[doc = "  \"description\": \"<p>Describe whether all repositories have been selected or there's a selection involved</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"all\","]
#[doc = "    \"selected\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum InstallationRepositoriesAddedRepositorySelection {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "selected")]
    Selected,
}
impl From<&InstallationRepositoriesAddedRepositorySelection>
    for InstallationRepositoriesAddedRepositorySelection
{
    fn from(value: &InstallationRepositoriesAddedRepositorySelection) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for InstallationRepositoriesAddedRepositorySelection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::All => write!(f, "all"),
            Self::Selected => write!(f, "selected"),
        }
    }
}
impl std::str::FromStr for InstallationRepositoriesAddedRepositorySelection {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "all" => Ok(Self::All),
            "selected" => Ok(Self::Selected),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for InstallationRepositoriesAddedRepositorySelection {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for InstallationRepositoriesAddedRepositorySelection {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for InstallationRepositoriesAddedRepositorySelection {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "InstallationTarget"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"installation_target\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"InstallationTargetRenamed\","]
#[doc = "      \"description\": \"<p>Somebody renamed the user or organization account that a GitHub App is installed on.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"account\","]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"installation\","]
#[doc = "        \"target_type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"account\": {"]
#[doc = "          \"$ref\": \"#/$defs/InstallationTargetRenamedAccount\""]
#[doc = "        },"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"InstallationTargetRenamedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"renamed\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/InstallationTargetRenamedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"target_type\": {"]
#[doc = "          \"title\": \"InstallationTargetRenamedTargetType\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum InstallationTarget {
    #[doc = "InstallationTargetRenamed\n\n<p>Somebody renamed the user or organization account that a GitHub App is installed on.</p>"]
    #[serde(rename = "renamed")]
    Renamed {
        account: InstallationTargetRenamedAccount,
        changes: InstallationTargetRenamedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        #[doc = ""]
        target_type: String,
    },
}
impl From<&InstallationTarget> for InstallationTarget {
    fn from(value: &InstallationTarget) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"InstallationTargetRenamedAccount\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"avatar_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"archived_at\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountArchivedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountFollowers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountFollowing\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_organization_projects\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountHasOrganizationProjects\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_repository_projects\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountHasRepositoryProjects\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_verified\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountIsVerified\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"members_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"public_gists\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountPublicGists\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"public_members_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountPublicMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"public_repos\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountPublicRepos\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountSlug\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user_view_type\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountUserViewType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"website_url\": {"]
#[doc = "      \"title\": \"InstallationTargetRenamedAccountWebsiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct InstallationTargetRenamedAccount {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub archived_at: Option<String>,
    #[doc = ""]
    pub avatar_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default)]
    pub description: (),
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_organization_projects: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_repository_projects: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hooks_url: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_verified: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public_gists: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public_members_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public_repos: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[doc = ""]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_view_type: Option<String>,
    #[doc = ""]
    #[serde(default)]
    pub website_url: (),
}
impl From<&InstallationTargetRenamedAccount> for InstallationTargetRenamedAccount {
    fn from(value: &InstallationTargetRenamedAccount) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"InstallationTargetRenamedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"login\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct InstallationTargetRenamedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub login: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<DiscussionEditedChangesBody>,
}
impl From<&InstallationTargetRenamedChanges> for InstallationTargetRenamedChanges {
    fn from(value: &InstallationTargetRenamedChanges) -> Self {
        value.clone()
    }
}
#[doc = "IssueComment"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"issue_comment\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"IssueCommentCreated\","]
#[doc = "      \"description\": \"<p>A comment on an issue or pull request was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"comment\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssueCommentCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedComment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssueCommentDeleted\","]
#[doc = "      \"description\": \"<p>A comment on an issue or pull request was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"comment\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssueCommentDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentDeletedComment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssueCommentEdited\","]
#[doc = "      \"description\": \"<p>A comment on an issue or pull request was edited.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"comment\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssueCommentEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentDeletedComment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum IssueComment {
    #[doc = "IssueCommentCreated\n\n<p>A comment on an issue or pull request was created.</p>"]
    #[serde(rename = "created")]
    Created {
        comment: IssueCommentCreatedComment,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssueCommentCreatedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssueCommentDeleted\n\n<p>A comment on an issue or pull request was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        comment: IssueCommentDeletedComment,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssueCommentCreatedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssueCommentEdited\n\n<p>A comment on an issue or pull request was edited.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: IssueCommentEditedChanges,
        comment: IssueCommentDeletedComment,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssueCommentCreatedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&IssueComment> for IssueComment {
    fn from(value: &IssueComment) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/comments#get-an-issue-comment\">comment</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssueCommentCreatedComment\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/comments#get-an-issue-comment\\\">comment</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"created_at\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"node_id\","]
#[doc = "    \"performed_via_github_app\","]
#[doc = "    \"reactions\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue comment</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the issue comment</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentPerformedViaGithubApp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue comment</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedCommentUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssueCommentCreatedComment {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue comment</p>"]
    pub body: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the issue comment</p>"]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub performed_via_github_app: (),
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue comment</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&IssueCommentCreatedComment> for IssueCommentCreatedComment {
    fn from(value: &IssueCommentCreatedComment) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> the comment belongs to.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssueCommentCreatedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> the comment belongs to.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"locked\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"state\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssueCommentCreatedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&IssueCommentCreatedIssue> for IssueCommentCreatedIssue {
    fn from(value: &IssueCommentCreatedIssue) -> Self {
        value.clone()
    }
}
#[doc = "IssueCommentCreatedIssueActiveLockReason"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"off-topic\","]
#[doc = "    \"resolved\","]
#[doc = "    \"spam\","]
#[doc = "    \"too heated\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum IssueCommentCreatedIssueActiveLockReason {
    #[serde(rename = "off-topic")]
    OffTopic,
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "spam")]
    Spam,
    #[serde(rename = "too heated")]
    TooHeated,
}
impl From<&IssueCommentCreatedIssueActiveLockReason> for IssueCommentCreatedIssueActiveLockReason {
    fn from(value: &IssueCommentCreatedIssueActiveLockReason) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for IssueCommentCreatedIssueActiveLockReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::OffTopic => write!(f, "off-topic"),
            Self::Resolved => write!(f, "resolved"),
            Self::Spam => write!(f, "spam"),
            Self::TooHeated => write!(f, "too heated"),
        }
    }
}
impl std::str::FromStr for IssueCommentCreatedIssueActiveLockReason {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "off-topic" => Ok(Self::OffTopic),
            "resolved" => Ok(Self::Resolved),
            "spam" => Ok(Self::Spam),
            "too heated" => Ok(Self::TooHeated),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for IssueCommentCreatedIssueActiveLockReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for IssueCommentCreatedIssueActiveLockReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for IssueCommentCreatedIssueActiveLockReason {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssueCommentCreatedIssuePullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssuePullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssuePullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssuePullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssuePullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssueCommentCreatedIssuePullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssueCommentCreatedIssuePullRequest {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub diff_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub patch_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&IssueCommentCreatedIssuePullRequest> for IssueCommentCreatedIssuePullRequest {
    fn from(value: &IssueCommentCreatedIssuePullRequest) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/comments#get-an-issue-comment\">comment</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssueCommentDeletedComment\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/comments#get-an-issue-comment\\\">comment</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"created_at\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"node_id\","]
#[doc = "    \"performed_via_github_app\","]
#[doc = "    \"reactions\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue comment</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the issue comment</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentDeletedCommentPerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue comment</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssueCommentDeletedComment {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue comment</p>"]
    pub body: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the issue comment</p>"]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    pub performed_via_github_app: Option<IssueCommentDeletedCommentPerformedViaGithubApp>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue comment</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&IssueCommentDeletedComment> for IssueCommentDeletedComment {
    fn from(value: &IssueCommentDeletedComment) -> Self {
        value.clone()
    }
}
#[doc = "IssueCommentDeletedCommentPerformedViaGithubApp"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"events\","]
#[doc = "    \"external_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"owner\","]
#[doc = "    \"permissions\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"client_id\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppClientId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"client_secret\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppClientSecret\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppEvents\","]
#[doc = "      \"description\": \"<p>The list of events for the GitHub app</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"external_url\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppExternalUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the GitHub app</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"installations_count\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppInstallationsCount\","]
#[doc = "      \"description\": \"<p>The number of installations associated with the GitHub app</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppName\","]
#[doc = "      \"description\": \"<p>The name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"pem\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppPem\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentDeletedCommentPerformedViaGithubAppPermissions\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppSlug\","]
#[doc = "      \"description\": \"<p>The slug name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"webhook_secret\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppWebhookSecret\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssueCommentDeletedCommentPerformedViaGithubApp {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>The list of events for the GitHub app</p>"]
    pub events: Vec<String>,
    #[doc = ""]
    pub external_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the GitHub app</p>"]
    pub id: i64,
    #[doc = "<p>The number of installations associated with the GitHub app</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installations_count: Option<i64>,
    #[doc = "<p>The name of the GitHub app</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    pub owner: DiscussionTransferredChangesNewRepositoryOrganization,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pem: Option<String>,
    pub permissions: IssueCommentDeletedCommentPerformedViaGithubAppPermissions,
    #[doc = "<p>The slug name of the GitHub app</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub webhook_secret: Option<String>,
}
impl From<&IssueCommentDeletedCommentPerformedViaGithubApp>
    for IssueCommentDeletedCommentPerformedViaGithubApp
{
    fn from(value: &IssueCommentDeletedCommentPerformedViaGithubApp) -> Self {
        value.clone()
    }
}
#[doc = "<p>The set of permissions for the GitHub app</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppPermissions\","]
#[doc = "  \"description\": \"<p>The set of permissions for the GitHub app</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"checks\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppPermissionsChecks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppPermissionsContents\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deployments\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppPermissionsDeployments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppPermissionsIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"title\": \"IssueCommentDeletedCommentPerformedViaGithubAppPermissionsMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssueCommentDeletedCommentPerformedViaGithubAppPermissions {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checks: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contents: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployments: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
}
impl From<&IssueCommentDeletedCommentPerformedViaGithubAppPermissions>
    for IssueCommentDeletedCommentPerformedViaGithubAppPermissions
{
    fn from(value: &IssueCommentDeletedCommentPerformedViaGithubAppPermissions) -> Self {
        value.clone()
    }
}
#[doc = "<p>The changes to the comment.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssueCommentEditedChanges\","]
#[doc = "  \"description\": \"<p>The changes to the comment.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"body\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssueCommentEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<DiscussionEditedChangesBody>,
}
impl From<&IssueCommentEditedChanges> for IssueCommentEditedChanges {
    fn from(value: &IssueCommentEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = "Issues"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"issues\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesAssigned\","]
#[doc = "      \"description\": \"<p>An issue was assigned to a user.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesAssignedAction\","]
#[doc = "          \"description\": \"<p>The action that was performed.</p>\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"assigned\""]
#[doc = "        },"]
#[doc = "        \"assignee\": {"]
#[doc = "          \"title\": \"IssuesAssignedAssignee\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesClosed\","]
#[doc = "      \"description\": \"<p>An issue was closed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesClosedAction\","]
#[doc = "          \"description\": \"<p>The action that was performed.</p>\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"closed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesClosedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesDeleted\","]
#[doc = "      \"description\": \"<p>An issue was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesDeletedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesDemilestoned\","]
#[doc = "      \"description\": \"<p>An issue was removed from a milestone.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesDemilestonedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"demilestoned\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesDemilestonedIssue\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesEdited\","]
#[doc = "      \"description\": \"<p>The title or body on an issue was edited.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssue\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesLabeled\","]
#[doc = "      \"description\": \"<p>A label was added to an issue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesLabeledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"labeled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssue\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesLocked\","]
#[doc = "      \"description\": \"<p>Conversation on an issue was locked. For more information, see \\\"<a href=\\\"https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations\\\">Locking conversations</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesLockedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"locked\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesLockedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesMilestoned\","]
#[doc = "      \"description\": \"<p>An issue was added to a milestone.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"milestone\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesMilestonedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"milestoned\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesMilestonedIssue\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesOpened\","]
#[doc = "      \"description\": \"<p>An issue was created. When a closed issue is reopened, the action will be <code>reopened</code> instead.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesOpenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"opened\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesOpenedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesOpenedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesPinned\","]
#[doc = "      \"description\": \"<p>An issue was pinned to a repository. For more information, see \\\"<a href=\\\"https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository\\\">Pinning an issue to your repository</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesPinnedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"pinned\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesDeletedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesReopened\","]
#[doc = "      \"description\": \"<p>A closed issue was reopened.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesReopenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reopened\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesReopenedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesTransferred\","]
#[doc = "      \"description\": \"<p>An issue was transferred to another repository. For more information, see \\\"<a href=\\\"https://docs.github.com/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository\\\">Transferring an issue to another repository</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesTransferredAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"transferred\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesTransferredChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesDeletedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesUnassigned\","]
#[doc = "      \"description\": \"<p>A user was unassigned from an issue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesUnassignedAction\","]
#[doc = "          \"description\": \"<p>The action that was performed.</p>\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unassigned\""]
#[doc = "        },"]
#[doc = "        \"assignee\": {"]
#[doc = "          \"title\": \"IssuesUnassignedAssignee\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesUnlabeled\","]
#[doc = "      \"description\": \"<p>A label was removed from an issue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesUnlabeledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unlabeled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssue\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesUnlocked\","]
#[doc = "      \"description\": \"<p>Conversation on an issue was locked. For more information, see \\\"<a href=\\\"https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations\\\">Locking conversations</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesUnlockedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unlocked\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesUnlockedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"IssuesUnpinned\","]
#[doc = "      \"description\": \"<p>An issue was unpinned from a repository. For more information, see \\\"<a href=\\\"https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository\\\">Pinning an issue to your repository</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"issue\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"IssuesUnpinnedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unpinned\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesDeletedIssue\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Issues {
    #[doc = "IssuesAssigned\n\n<p>An issue was assigned to a user.</p>"]
    #[serde(rename = "assigned")]
    Assigned {
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesAssignedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesClosed\n\n<p>An issue was closed.</p>"]
    #[serde(rename = "closed")]
    Closed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesClosedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesDeleted\n\n<p>An issue was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesDeletedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesDemilestoned\n\n<p>An issue was removed from a milestone.</p>"]
    #[serde(rename = "demilestoned")]
    Demilestoned {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesDemilestonedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        milestone: Option<MilestoneClosedMilestone>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesEdited\n\n<p>The title or body on an issue was edited.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: DiscussionEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesAssignedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        label: Option<DiscussionLabeledLabel>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesLabeled\n\n<p>A label was added to an issue.</p>"]
    #[serde(rename = "labeled")]
    Labeled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesAssignedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        label: Option<DiscussionLabeledLabel>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesLocked\n\n<p>Conversation on an issue was locked. For more information, see \"<a href=\"https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations\">Locking conversations</a>.\"</p>"]
    #[serde(rename = "locked")]
    Locked {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesLockedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesMilestoned\n\n<p>An issue was added to a milestone.</p>"]
    #[serde(rename = "milestoned")]
    Milestoned {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesMilestonedIssue,
        milestone: MilestoneClosedMilestone,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesOpened\n\n<p>An issue was created. When a closed issue is reopened, the action will be <code>reopened</code> instead.</p>"]
    #[serde(rename = "opened")]
    Opened {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<IssuesOpenedChanges>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesOpenedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesPinned\n\n<p>An issue was pinned to a repository. For more information, see \"<a href=\"https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository\">Pinning an issue to your repository</a>.\"</p>"]
    #[serde(rename = "pinned")]
    Pinned {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesDeletedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesReopened\n\n<p>A closed issue was reopened.</p>"]
    #[serde(rename = "reopened")]
    Reopened {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesReopenedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesTransferred\n\n<p>An issue was transferred to another repository. For more information, see \"<a href=\"https://docs.github.com/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository\">Transferring an issue to another repository</a>.\"</p>"]
    #[serde(rename = "transferred")]
    Transferred {
        changes: IssuesTransferredChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesDeletedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesUnassigned\n\n<p>A user was unassigned from an issue.</p>"]
    #[serde(rename = "unassigned")]
    Unassigned {
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        assignee: Option<MilestoneClosedMilestoneCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesAssignedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesUnlabeled\n\n<p>A label was removed from an issue.</p>"]
    #[serde(rename = "unlabeled")]
    Unlabeled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesAssignedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        label: Option<DiscussionLabeledLabel>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesUnlocked\n\n<p>Conversation on an issue was locked. For more information, see \"<a href=\"https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations\">Locking conversations</a>.\"</p>"]
    #[serde(rename = "unlocked")]
    Unlocked {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesUnlockedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "IssuesUnpinned\n\n<p>An issue was unpinned from a repository. For more information, see \"<a href=\"https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository\">Pinning an issue to your repository</a>.\"</p>"]
    #[serde(rename = "unpinned")]
    Unpinned {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        issue: IssuesDeletedIssue,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&Issues> for Issues {
    fn from(value: &Issues) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesAssignedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssuePerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesAssignedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<IssuesAssignedIssuePerformedViaGithubApp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<DeploymentProtectionRuleRequestedPullRequestsState>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&IssuesAssignedIssue> for IssuesAssignedIssue {
    fn from(value: &IssuesAssignedIssue) -> Self {
        value.clone()
    }
}
#[doc = "IssuesAssignedIssuePerformedViaGithubApp"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"external_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"owner\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppEvents\","]
#[doc = "      \"description\": \"<p>The list of events for the GitHub app\\nSupported values are: <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>content_reference</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_review</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_dispatch</code>, <code>secret_scanning_alert</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_dispatch</code>, <code>workflow_run</code>, <code>reminder</code>, <code>pull_request_review_thread</code></p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"external_url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppExternalUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the GitHub app</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppName\","]
#[doc = "      \"description\": \"<p>The name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssuesAssignedIssuePerformedViaGithubAppPermissions\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppSlug\","]
#[doc = "      \"description\": \"<p>The slug name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesAssignedIssuePerformedViaGithubAppUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesAssignedIssuePerformedViaGithubApp {
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>The list of events for the GitHub app\nSupported values are: <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>content_reference</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_review</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_dispatch</code>, <code>secret_scanning_alert</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_dispatch</code>, <code>workflow_run</code>, <code>reminder</code>, <code>pull_request_review_thread</code></p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub events: Vec<String>,
    #[doc = ""]
    pub external_url: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the GitHub app</p>"]
    pub id: Option<i64>,
    #[doc = "<p>The name of the GitHub app</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<IssuesAssignedIssuePerformedViaGithubAppPermissions>,
    #[doc = "<p>The slug name of the GitHub app</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[doc = ""]
    pub updated_at: Option<String>,
}
impl From<&IssuesAssignedIssuePerformedViaGithubApp> for IssuesAssignedIssuePerformedViaGithubApp {
    fn from(value: &IssuesAssignedIssuePerformedViaGithubApp) -> Self {
        value.clone()
    }
}
#[doc = "<p>The set of permissions for the GitHub app</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesAssignedIssuePerformedViaGithubAppPermissions\","]
#[doc = "  \"description\": \"<p>The set of permissions for the GitHub app</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"actions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"administration\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"checks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"content_references\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"contents\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"deployments\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"discussions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"emails\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"environments\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"issues\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"keys\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"members\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_administration\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_hooks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_packages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_plan\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_projects\": {"]
#[doc = "      \"$ref\": \"#/$defs/MemberAddedChangesPermissionTo\""]
#[doc = "    },"]
#[doc = "    \"organization_secrets\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_self_hosted_runners\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_user_blocking\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"packages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"pages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"repository_hooks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"repository_projects\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"secret_scanning_alerts\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"secrets\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"security_events\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"security_scanning_alert\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"single_file\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"statuses\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"team_discussions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"vulnerability_alerts\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"workflows\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesAssignedIssuePerformedViaGithubAppPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub administration:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checks: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_references:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contents: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployments:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discussions:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emails: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environments:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_administration:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_hooks:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_packages:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_plan:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_projects: Option<MemberAddedChangesPermissionTo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_secrets:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_self_hosted_runners:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_user_blocking:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub packages: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pages: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_requests:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_hooks:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_projects:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_scanning_alerts:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security_events:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security_scanning_alert:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub single_file:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team_discussions:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vulnerability_alerts:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflows: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
}
impl From<&IssuesAssignedIssuePerformedViaGithubAppPermissions>
    for IssuesAssignedIssuePerformedViaGithubAppPermissions
{
    fn from(value: &IssuesAssignedIssuePerformedViaGithubAppPermissions) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesClosedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"state\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesClosedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesClosedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesClosedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Untyped>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<Option<Untyped>>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&IssuesClosedIssue> for IssuesClosedIssue {
    fn from(value: &IssuesClosedIssue) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesDeletedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesDeletedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesDeletedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubApp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<DeploymentProtectionRuleRequestedPullRequestsState>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&IssuesDeletedIssue> for IssuesDeletedIssue {
    fn from(value: &IssuesDeletedIssue) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesDemilestonedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesDemilestonedIssueAssignee\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssuePerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesDemilestonedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<IssuesDemilestonedIssueAssignee>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<Option<Untyped>>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<IssuesAssignedIssuePerformedViaGithubApp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<DeploymentProtectionRuleRequestedPullRequestsState>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&IssuesDemilestonedIssue> for IssuesDemilestonedIssue {
    fn from(value: &IssuesDemilestonedIssue) -> Self {
        value.clone()
    }
}
#[doc = "IssuesDemilestonedIssueAssignee"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"login\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeEmail\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreatorType\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesDemilestonedIssueAssigneeUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesDemilestonedIssueAssignee {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub login: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<MilestoneClosedMilestoneCreatorType>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&IssuesDemilestonedIssueAssignee> for IssuesDemilestonedIssueAssignee {
    fn from(value: &IssuesDemilestonedIssueAssignee) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesLockedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"locked\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\","]
#[doc = "      \"const\": true"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesLockedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesLockedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesLockedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<Option<Untyped>>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubApp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<DeploymentProtectionRuleRequestedPullRequestsState>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&IssuesLockedIssue> for IssuesLockedIssue {
    fn from(value: &IssuesLockedIssue) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesMilestonedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssuePerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesMilestonedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesMilestonedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<Option<Untyped>>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<IssuesAssignedIssuePerformedViaGithubApp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<DeploymentProtectionRuleRequestedPullRequestsState>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&IssuesMilestonedIssue> for IssuesMilestonedIssue {
    fn from(value: &IssuesMilestonedIssue) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesOpenedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"old_issue\","]
#[doc = "    \"old_repository\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"old_issue\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldIssue\","]
#[doc = "      \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesDeletedIssue\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"old_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssuesOpenedChangesOldRepository\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesOpenedChanges {
    #[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
    pub old_issue: Option<IssuesDeletedIssue>,
    pub old_repository: IssuesOpenedChangesOldRepository,
}
impl From<&IssuesOpenedChanges> for IssuesOpenedChanges {
    fn from(value: &IssuesOpenedChanges) -> Self {
        value.clone()
    }
}
#[doc = "<p>A git repository</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesOpenedChangesOldRepository\","]
#[doc = "  \"description\": \"<p>A git repository</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"topics\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"visibility\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow auto-merge for pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryAllowForking\","]
#[doc = "      \"description\": \"<p>Whether to allow private forks</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryAllowUpdateBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"custom_properties\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryDisabled\","]
#[doc = "      \"description\": \"<p>Returns whether or not this repository is disabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_discussions\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHasDiscussions\","]
#[doc = "      \"description\": \"<p>Whether the repository has discussions enabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoLicense\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryOrganization\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"public\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryPublic\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryRoleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositorySize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositorySshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryStargazers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositorySvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"IssuesOpenedChangesOldRepositoryWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"<p>Whether to require commit signoff.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesOpenedChangesOldRepository {
    #[doc = "<p>Whether to allow auto-merge for pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow private forks</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: IssuesOpenedChangesOldRepositoryCreatedAt,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_properties: Option<Untyped>,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Returns whether or not this repository is disabled.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether the repository has discussions enabled.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_discussions: Option<bool>,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub license: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoLicense>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<IssuesOpenedChangesOldRepositoryPushedAt>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[doc = ""]
    pub size: i64,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers: Option<i64>,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    pub visibility: PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
    #[doc = "<p>Whether to require commit signoff.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web_commit_signoff_required: Option<bool>,
}
impl From<&IssuesOpenedChangesOldRepository> for IssuesOpenedChangesOldRepository {
    fn from(value: &IssuesOpenedChangesOldRepository) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesOpenedChangesOldRepositoryCreatedAt\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum IssuesOpenedChangesOldRepositoryCreatedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&IssuesOpenedChangesOldRepositoryCreatedAt>
    for IssuesOpenedChangesOldRepositoryCreatedAt
{
    fn from(value: &IssuesOpenedChangesOldRepositoryCreatedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for IssuesOpenedChangesOldRepositoryCreatedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for IssuesOpenedChangesOldRepositoryCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for IssuesOpenedChangesOldRepositoryCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for IssuesOpenedChangesOldRepositoryCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for IssuesOpenedChangesOldRepositoryCreatedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for IssuesOpenedChangesOldRepositoryCreatedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "IssuesOpenedChangesOldRepositoryPushedAt"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum IssuesOpenedChangesOldRepositoryPushedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&IssuesOpenedChangesOldRepositoryPushedAt> for IssuesOpenedChangesOldRepositoryPushedAt {
    fn from(value: &IssuesOpenedChangesOldRepositoryPushedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for IssuesOpenedChangesOldRepositoryPushedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for IssuesOpenedChangesOldRepositoryPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for IssuesOpenedChangesOldRepositoryPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for IssuesOpenedChangesOldRepositoryPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for IssuesOpenedChangesOldRepositoryPushedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for IssuesOpenedChangesOldRepositoryPushedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesOpenedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesAssignedIssuePerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesOpenedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug, Default)]
pub struct IssuesOpenedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<IssuesAssignedIssuePerformedViaGithubApp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<DeploymentProtectionRuleRequestedPullRequestsState>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&IssuesOpenedIssue> for IssuesOpenedIssue {
    fn from(value: &IssuesOpenedIssue) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesReopenedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"state\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssuesReopenedIssuePerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesReopenedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<Option<Untyped>>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<IssuesReopenedIssuePerformedViaGithubApp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&IssuesReopenedIssue> for IssuesReopenedIssue {
    fn from(value: &IssuesReopenedIssue) -> Self {
        value.clone()
    }
}
#[doc = "IssuesReopenedIssuePerformedViaGithubApp"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"external_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"owner\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppEvents\","]
#[doc = "      \"description\": \"<p>The list of events for the GitHub app\\nSupported values are: <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>content_reference</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_review</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_dispatch</code>, <code>secret_scanning_alert</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_dispatch</code>, <code>workflow_run</code>, <code>pull_request_review_thread</code>, <code>reminder</code></p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"external_url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppExternalUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the GitHub app</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppName\","]
#[doc = "      \"description\": \"<p>The name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssuesReopenedIssuePerformedViaGithubAppPermissions\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppSlug\","]
#[doc = "      \"description\": \"<p>The slug name of the GitHub app</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesReopenedIssuePerformedViaGithubAppUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesReopenedIssuePerformedViaGithubApp {
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>The list of events for the GitHub app\nSupported values are: <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>content_reference</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_review</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_dispatch</code>, <code>secret_scanning_alert</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_dispatch</code>, <code>workflow_run</code>, <code>pull_request_review_thread</code>, <code>reminder</code></p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub events: Vec<String>,
    #[doc = ""]
    pub external_url: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the GitHub app</p>"]
    pub id: Option<i64>,
    #[doc = "<p>The name of the GitHub app</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<IssuesReopenedIssuePerformedViaGithubAppPermissions>,
    #[doc = "<p>The slug name of the GitHub app</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[doc = ""]
    pub updated_at: Option<String>,
}
impl From<&IssuesReopenedIssuePerformedViaGithubApp> for IssuesReopenedIssuePerformedViaGithubApp {
    fn from(value: &IssuesReopenedIssuePerformedViaGithubApp) -> Self {
        value.clone()
    }
}
#[doc = "<p>The set of permissions for the GitHub app</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesReopenedIssuePerformedViaGithubAppPermissions\","]
#[doc = "  \"description\": \"<p>The set of permissions for the GitHub app</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"actions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"administration\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"checks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"content_references\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"contents\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"deployments\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"discussions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"emails\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"environments\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"issues\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"keys\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"members\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_administration\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_hooks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_packages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_plan\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_projects\": {"]
#[doc = "      \"$ref\": \"#/$defs/MemberAddedChangesPermissionTo\""]
#[doc = "    },"]
#[doc = "    \"organization_secrets\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_self_hosted_runners\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"organization_user_blocking\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"packages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"pages\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"repository_hooks\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"repository_projects\": {"]
#[doc = "      \"$ref\": \"#/$defs/MemberAddedChangesPermissionTo\""]
#[doc = "    },"]
#[doc = "    \"secret_scanning_alerts\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"secrets\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"security_events\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"security_scanning_alert\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"single_file\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"statuses\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"team_discussions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"vulnerability_alerts\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    },"]
#[doc = "    \"workflows\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesReopenedIssuePerformedViaGithubAppPermissions {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub administration:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub checks: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_references:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub contents: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deployments:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discussions:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub emails: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub environments:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issues: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub keys: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_administration:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_hooks:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_packages:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_plan:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_projects: Option<MemberAddedChangesPermissionTo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_secrets:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_self_hosted_runners:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization_user_blocking:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub packages: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pages: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_requests:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_hooks:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository_projects: Option<MemberAddedChangesPermissionTo>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_scanning_alerts:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secrets: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security_events:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security_scanning_alert:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub single_file:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statuses: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub team_discussions:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vulnerability_alerts:
        Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflows: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions>,
}
impl From<&IssuesReopenedIssuePerformedViaGithubAppPermissions>
    for IssuesReopenedIssuePerformedViaGithubAppPermissions
{
    fn from(value: &IssuesReopenedIssuePerformedViaGithubAppPermissions) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesTransferredChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"new_issue\","]
#[doc = "    \"new_repository\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"new_issue\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssuesDeletedIssue\""]
#[doc = "    },"]
#[doc = "    \"new_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssuesTransferredChangesNewRepository\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesTransferredChanges {
    pub new_issue: IssuesDeletedIssue,
    pub new_repository: IssuesTransferredChangesNewRepository,
}
impl From<&IssuesTransferredChanges> for IssuesTransferredChanges {
    fn from(value: &IssuesTransferredChanges) -> Self {
        value.clone()
    }
}
#[doc = "<p>A git repository</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesTransferredChangesNewRepository\","]
#[doc = "  \"description\": \"<p>A git repository</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_discussions\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"topics\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"visibility\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow auto-merge for pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryAllowForking\","]
#[doc = "      \"description\": \"<p>Whether to allow private forks</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryAllowUpdateBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"custom_properties\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryDisabled\","]
#[doc = "      \"description\": \"<p>Returns whether or not this repository is disabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_discussions\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHasDiscussions\","]
#[doc = "      \"description\": \"<p>Whether discussions are enabled.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoLicense\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryOrganization\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"public\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryPublic\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryRoleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositorySize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositorySshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryStargazers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositorySvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"IssuesTransferredChangesNewRepositoryWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"<p>Whether to require contributors to sign off on web-based commits</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesTransferredChangesNewRepository {
    #[doc = "<p>Whether to allow auto-merge for pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow private forks</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: IssuesTransferredChangesNewRepositoryCreatedAt,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub custom_properties: Option<Untyped>,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Returns whether or not this repository is disabled.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether discussions are enabled.</p>"]
    pub has_discussions: bool,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub license: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoLicense>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<IssuesTransferredChangesNewRepositoryPushedAt>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[doc = ""]
    pub size: i64,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers: Option<i64>,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    pub visibility: PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
    #[doc = "<p>Whether to require contributors to sign off on web-based commits</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web_commit_signoff_required: Option<bool>,
}
impl From<&IssuesTransferredChangesNewRepository> for IssuesTransferredChangesNewRepository {
    fn from(value: &IssuesTransferredChangesNewRepository) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesTransferredChangesNewRepositoryCreatedAt\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum IssuesTransferredChangesNewRepositoryCreatedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&IssuesTransferredChangesNewRepositoryCreatedAt>
    for IssuesTransferredChangesNewRepositoryCreatedAt
{
    fn from(value: &IssuesTransferredChangesNewRepositoryCreatedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for IssuesTransferredChangesNewRepositoryCreatedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for IssuesTransferredChangesNewRepositoryCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for IssuesTransferredChangesNewRepositoryCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for IssuesTransferredChangesNewRepositoryCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for IssuesTransferredChangesNewRepositoryCreatedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for IssuesTransferredChangesNewRepositoryCreatedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "IssuesTransferredChangesNewRepositoryPushedAt"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum IssuesTransferredChangesNewRepositoryPushedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&IssuesTransferredChangesNewRepositoryPushedAt>
    for IssuesTransferredChangesNewRepositoryPushedAt
{
    fn from(value: &IssuesTransferredChangesNewRepositoryPushedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for IssuesTransferredChangesNewRepositoryPushedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for IssuesTransferredChangesNewRepositoryPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for IssuesTransferredChangesNewRepositoryPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for IssuesTransferredChangesNewRepositoryPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for IssuesTransferredChangesNewRepositoryPushedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for IssuesTransferredChangesNewRepositoryPushedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/issues/issues#get-an-issue\">issue</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IssuesUnlockedIssue\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/issues/issues#get-an-issue\\\">issue</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"locked\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"reactions\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\","]
#[doc = "      \"const\": false"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentPerformedViaGithubApp\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/IssueCommentCreatedIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueStateReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"IssuesUnlockedIssueUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IssuesUnlockedIssue {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub labels: Vec<Option<Untyped>>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = "<p>GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performed_via_github_app: Option<DeploymentStatusCreatedDeploymentPerformedViaGithubApp>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<IssueCommentCreatedIssuePullRequest>,
    pub reactions: DiscussionAnsweredAnswerReactions,
    #[doc = ""]
    pub repository_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<DeploymentProtectionRuleRequestedPullRequestsState>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&IssuesUnlockedIssue> for IssuesUnlockedIssue {
    fn from(value: &IssuesUnlockedIssue) -> Self {
        value.clone()
    }
}
#[doc = "Label"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"label\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"LabelCreated\","]
#[doc = "      \"description\": \"<p>A label was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"label\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"LabelCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"LabelDeleted\","]
#[doc = "      \"description\": \"<p>A label was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"label\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"LabelDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"LabelEdited\","]
#[doc = "      \"description\": \"<p>A label's name, description, or color was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"label\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"LabelEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/LabelEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Label {
    #[doc = "LabelCreated\n\n<p>A label was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        label: DiscussionLabeledLabel,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "LabelDeleted\n\n<p>A label was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        label: DiscussionLabeledLabel,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "LabelEdited\n\n<p>A label's name, description, or color was changed.</p>"]
    #[serde(rename = "edited")]
    Edited {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<LabelEditedChanges>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        label: DiscussionLabeledLabel,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&Label> for Label {
    fn from(value: &Label) -> Self {
        value.clone()
    }
}
#[doc = "<p>The changes to the label if the action was <code>edited</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"LabelEditedChanges\","]
#[doc = "  \"description\": \"<p>The changes to the label if the action was <code>edited</code>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"color\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct LabelEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub color: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<DiscussionEditedChangesBody>,
}
impl From<&LabelEditedChanges> for LabelEditedChanges {
    fn from(value: &LabelEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = "Member"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"member\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"MemberAdded\","]
#[doc = "      \"description\": \"<p>A GitHub user accepted an invitation to a repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"member\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MemberAddedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"added\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/MemberAddedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"member\": {"]
#[doc = "          \"title\": \"MemberAddedMember\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"MemberEdited\","]
#[doc = "      \"description\": \"<p>Permissions were changed for a collaborator on a repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"member\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MemberEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/MemberEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"member\": {"]
#[doc = "          \"title\": \"MemberEditedMember\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"MemberRemoved\","]
#[doc = "      \"description\": \"<p>A collaborator was removed from a repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"member\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MemberRemovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"removed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"member\": {"]
#[doc = "          \"title\": \"MemberRemovedMember\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Member {
    #[doc = "MemberAdded\n\n<p>A GitHub user accepted an invitation to a repository.</p>"]
    #[serde(rename = "added")]
    Added {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<MemberAddedChanges>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        member: Option<DeploymentStatusCreatedDeploymentCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "MemberEdited\n\n<p>Permissions were changed for a collaborator on a repository.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: MemberEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        member: Option<DeploymentStatusCreatedDeploymentCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "MemberRemoved\n\n<p>A collaborator was removed from a repository.</p>"]
    #[serde(rename = "removed")]
    Removed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        member: Option<DeploymentStatusCreatedDeploymentCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&Member> for Member {
    fn from(value: &Member) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MemberAddedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"permission\": {"]
#[doc = "      \"$ref\": \"#/$defs/MemberAddedChangesPermission\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"$ref\": \"#/$defs/MemberAddedChangesRoleName\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MemberAddedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission: Option<MemberAddedChangesPermission>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<MemberAddedChangesRoleName>,
}
impl From<&MemberAddedChanges> for MemberAddedChanges {
    fn from(value: &MemberAddedChanges) -> Self {
        value.clone()
    }
}
#[doc = "<p>This field is included for legacy purposes; use the <code>role_name</code> field instead. The <code>maintain</code>\nrole is mapped to <code>write</code> and the <code>triage</code> role is mapped to <code>read</code>. To determine the role\nassigned to the collaborator, use the <code>role_name</code> field instead, which will provide the full\nrole name, including custom roles.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MemberAddedChangesPermission\","]
#[doc = "  \"description\": \"<p>This field is included for legacy purposes; use the <code>role_name</code> field instead. The <code>maintain</code>\\nrole is mapped to <code>write</code> and the <code>triage</code> role is mapped to <code>read</code>. To determine the role\\nassigned to the collaborator, use the <code>role_name</code> field instead, which will provide the full\\nrole name, including custom roles.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"to\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"to\": {"]
#[doc = "      \"$ref\": \"#/$defs/MemberAddedChangesPermissionTo\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MemberAddedChangesPermission {
    pub to: MemberAddedChangesPermissionTo,
}
impl From<&MemberAddedChangesPermission> for MemberAddedChangesPermission {
    fn from(value: &MemberAddedChangesPermission) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MemberAddedChangesPermissionTo\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"admin\","]
#[doc = "    \"read\","]
#[doc = "    \"write\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum MemberAddedChangesPermissionTo {
    #[serde(rename = "admin")]
    Admin,
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}
impl From<&MemberAddedChangesPermissionTo> for MemberAddedChangesPermissionTo {
    fn from(value: &MemberAddedChangesPermissionTo) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for MemberAddedChangesPermissionTo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Admin => write!(f, "admin"),
            Self::Read => write!(f, "read"),
            Self::Write => write!(f, "write"),
        }
    }
}
impl std::str::FromStr for MemberAddedChangesPermissionTo {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "admin" => Ok(Self::Admin),
            "read" => Ok(Self::Read),
            "write" => Ok(Self::Write),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for MemberAddedChangesPermissionTo {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for MemberAddedChangesPermissionTo {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for MemberAddedChangesPermissionTo {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The role assigned to the collaborator.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MemberAddedChangesRoleName\","]
#[doc = "  \"description\": \"<p>The role assigned to the collaborator.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"to\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"to\": {"]
#[doc = "      \"title\": \"MemberAddedChangesRoleNameTo\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MemberAddedChangesRoleName {
    #[doc = ""]
    pub to: String,
}
impl From<&MemberAddedChangesRoleName> for MemberAddedChangesRoleName {
    fn from(value: &MemberAddedChangesRoleName) -> Self {
        value.clone()
    }
}
#[doc = "<p>The changes to the collaborator permissions</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MemberEditedChanges\","]
#[doc = "  \"description\": \"<p>The changes to the collaborator permissions</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"old_permission\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"permission\": {"]
#[doc = "      \"$ref\": \"#/$defs/MemberEditedChangesPermission\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MemberEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub old_permission: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission: Option<MemberEditedChangesPermission>,
}
impl From<&MemberEditedChanges> for MemberEditedChanges {
    fn from(value: &MemberEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MemberEditedChangesPermission\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"title\": \"MemberEditedChangesPermissionFrom\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"to\": {"]
#[doc = "      \"title\": \"MemberEditedChangesPermissionTo\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MemberEditedChangesPermission {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
}
impl From<&MemberEditedChangesPermission> for MemberEditedChangesPermission {
    fn from(value: &MemberEditedChangesPermission) -> Self {
        value.clone()
    }
}
#[doc = "Membership"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"membership\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"MembershipAdded\","]
#[doc = "      \"description\": \"<p>An organization member was added to a team.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"member\","]
#[doc = "        \"organization\","]
#[doc = "        \"scope\","]
#[doc = "        \"sender\","]
#[doc = "        \"team\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MembershipAddedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"added\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"member\": {"]
#[doc = "          \"title\": \"MembershipAddedMember\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"scope\": {"]
#[doc = "          \"title\": \"MembershipAddedScope\","]
#[doc = "          \"description\": \"<p>The scope of the membership. Currently, can only be <code>team</code>.</p>\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"team\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"title\": \"MembershipAddedSender\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"team\": {"]
#[doc = "          \"$ref\": \"#/$defs/TeamAddDefaultTeam\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"MembershipRemoved\","]
#[doc = "      \"description\": \"<p>An organization member was removed from a team.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"member\","]
#[doc = "        \"organization\","]
#[doc = "        \"scope\","]
#[doc = "        \"sender\","]
#[doc = "        \"team\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MembershipRemovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"removed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"member\": {"]
#[doc = "          \"title\": \"MembershipRemovedMember\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"scope\": {"]
#[doc = "          \"title\": \"MembershipRemovedScope\","]
#[doc = "          \"description\": \"<p>The scope of the membership. Currently, can only be <code>team</code>.</p>\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"organization\","]
#[doc = "            \"team\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"title\": \"MembershipRemovedSender\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"team\": {"]
#[doc = "          \"$ref\": \"#/$defs/TeamAddDefaultTeam\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Membership {
    #[doc = "MembershipAdded\n\n<p>An organization member was added to a team.</p>"]
    #[serde(rename = "added")]
    Added {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        member: Option<DeploymentStatusCreatedDeploymentCreator>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[doc = "<p>The scope of the membership. Currently, can only be <code>team</code>.</p>"]
        scope: String,
        #[doc = ""]
        sender: Option<Untyped>,
        team: TeamAddDefaultTeam,
    },
    #[doc = "MembershipRemoved\n\n<p>An organization member was removed from a team.</p>"]
    #[serde(rename = "removed")]
    Removed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        member: Option<DeploymentStatusCreatedDeploymentCreator>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[doc = "<p>The scope of the membership. Currently, can only be <code>team</code>.</p>"]
        scope: MembershipRemovedScope,
        #[doc = ""]
        sender: Option<Untyped>,
        team: TeamAddDefaultTeam,
    },
}
impl From<&Membership> for Membership {
    fn from(value: &Membership) -> Self {
        value.clone()
    }
}
#[doc = "<p>The scope of the membership. Currently, can only be <code>team</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MembershipRemovedScope\","]
#[doc = "  \"description\": \"<p>The scope of the membership. Currently, can only be <code>team</code>.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"organization\","]
#[doc = "    \"team\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum MembershipRemovedScope {
    #[serde(rename = "organization")]
    Organization,
    #[serde(rename = "team")]
    Team,
}
impl From<&MembershipRemovedScope> for MembershipRemovedScope {
    fn from(value: &MembershipRemovedScope) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for MembershipRemovedScope {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Organization => write!(f, "organization"),
            Self::Team => write!(f, "team"),
        }
    }
}
impl std::str::FromStr for MembershipRemovedScope {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "organization" => Ok(Self::Organization),
            "team" => Ok(Self::Team),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for MembershipRemovedScope {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for MembershipRemovedScope {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for MembershipRemovedScope {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "MergeGroup"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"merge_group\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"MergeGroupChecksRequested\","]
#[doc = "      \"description\": \"<p>Status checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.</p>\\n<p>When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"merge_group\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MergeGroupChecksRequestedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"checks_requested\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"merge_group\": {"]
#[doc = "          \"$ref\": \"#/$defs/MergeGroupChecksRequestedMergeGroup\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"MergeGroupDestroyed\","]
#[doc = "      \"description\": \"<p>The merge queue groups pull requests together to be merged. This event indicates that one of those merge groups was destroyed. This happens when a pull request is removed from the queue: any group containing that pull request is also destroyed.</p>\\n<p>When you receive this event, you may want to cancel any checks that are running on the head SHA to avoid wasting computing resources on a merge group that will not be used.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"merge_group\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MergeGroupDestroyedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"destroyed\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"merge_group\": {"]
#[doc = "          \"$ref\": \"#/$defs/MergeGroupChecksRequestedMergeGroup\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"reason\": {"]
#[doc = "          \"title\": \"MergeGroupDestroyedReason\","]
#[doc = "          \"description\": \"<p>Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).</p>\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"dequeued\","]
#[doc = "            \"invalidated\","]
#[doc = "            \"merged\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum MergeGroup {
    #[doc = "MergeGroupChecksRequested\n\n<p>Status checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.</p>\n<p>When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.</p>"]
    #[serde(rename = "checks_requested")]
    ChecksRequested {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        merge_group: MergeGroupChecksRequestedMergeGroup,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "MergeGroupDestroyed\n\n<p>The merge queue groups pull requests together to be merged. This event indicates that one of those merge groups was destroyed. This happens when a pull request is removed from the queue: any group containing that pull request is also destroyed.</p>\n<p>When you receive this event, you may want to cancel any checks that are running on the head SHA to avoid wasting computing resources on a merge group that will not be used.</p>"]
    #[serde(rename = "destroyed")]
    Destroyed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        merge_group: MergeGroupChecksRequestedMergeGroup,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[doc = "<p>Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).</p>"]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        reason: Option<MergeGroupDestroyedReason>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
}
impl From<&MergeGroup> for MergeGroup {
    fn from(value: &MergeGroup) -> Self {
        value.clone()
    }
}
#[doc = "<p>A group of pull requests that the merge queue has grouped together to be merged.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MergeGroupChecksRequestedMergeGroup\","]
#[doc = "  \"description\": \"<p>A group of pull requests that the merge queue has grouped together to be merged.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"base_ref\","]
#[doc = "    \"base_sha\","]
#[doc = "    \"head_commit\","]
#[doc = "    \"head_ref\","]
#[doc = "    \"head_sha\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"base_ref\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupBaseRef\","]
#[doc = "      \"description\": \"<p>The full ref of the branch the merge group will be merged into.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"base_sha\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupBaseSha\","]
#[doc = "      \"description\": \"<p>The SHA of the merge group's parent commit.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/MergeGroupChecksRequestedMergeGroupHeadCommit\""]
#[doc = "    },"]
#[doc = "    \"head_ref\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadRef\","]
#[doc = "      \"description\": \"<p>The full ref of the merge group.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadSha\","]
#[doc = "      \"description\": \"<p>The SHA of the merge group.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MergeGroupChecksRequestedMergeGroup {
    #[doc = "<p>The full ref of the branch the merge group will be merged into.</p>"]
    pub base_ref: String,
    #[doc = "<p>The SHA of the merge group's parent commit.</p>"]
    pub base_sha: String,
    pub head_commit: MergeGroupChecksRequestedMergeGroupHeadCommit,
    #[doc = "<p>The full ref of the merge group.</p>"]
    pub head_ref: String,
    #[doc = "<p>The SHA of the merge group.</p>"]
    pub head_sha: String,
}
impl From<&MergeGroupChecksRequestedMergeGroup> for MergeGroupChecksRequestedMergeGroup {
    fn from(value: &MergeGroupChecksRequestedMergeGroup) -> Self {
        value.clone()
    }
}
#[doc = "<p>A commit.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommit\","]
#[doc = "  \"description\": \"<p>A commit.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"committer\","]
#[doc = "    \"id\","]
#[doc = "    \"message\","]
#[doc = "    \"timestamp\","]
#[doc = "    \"tree_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommitAuthor\","]
#[doc = "      \"description\": \"<p>Information about the Git author</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MergeGroupChecksRequestedMergeGroupHeadCommitAuthor\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"committer\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommitCommitter\","]
#[doc = "      \"description\": \"<p>Information about the Git committer</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MergeGroupChecksRequestedMergeGroupHeadCommitAuthor\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommitId\","]
#[doc = "      \"description\": \"<p>SHA for the commit</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"message\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommitMessage\","]
#[doc = "      \"description\": \"<p>Message describing the purpose of the commit</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"timestamp\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommitTimestamp\","]
#[doc = "      \"description\": \"<p>Timestamp of the commit</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tree_id\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommitTreeId\","]
#[doc = "      \"description\": \"<p>SHA for the commit's tree</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MergeGroupChecksRequestedMergeGroupHeadCommit {
    #[doc = "<p>Information about the Git author</p>"]
    pub author: Option<MergeGroupChecksRequestedMergeGroupHeadCommitAuthor>,
    #[doc = "<p>Information about the Git committer</p>"]
    pub committer: Option<MergeGroupChecksRequestedMergeGroupHeadCommitAuthor>,
    #[doc = "<p>SHA for the commit</p>"]
    pub id: String,
    #[doc = "<p>Message describing the purpose of the commit</p>"]
    pub message: String,
    #[doc = "<p>Timestamp of the commit</p>"]
    pub timestamp: String,
    #[doc = "<p>SHA for the commit's tree</p>"]
    pub tree_id: String,
}
impl From<&MergeGroupChecksRequestedMergeGroupHeadCommit>
    for MergeGroupChecksRequestedMergeGroupHeadCommit
{
    fn from(value: &MergeGroupChecksRequestedMergeGroupHeadCommit) -> Self {
        value.clone()
    }
}
#[doc = "MergeGroupChecksRequestedMergeGroupHeadCommitAuthor"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"email\","]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommitAuthorEmail\","]
#[doc = "      \"description\": \"<p>Git email address of the commit's author</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"MergeGroupChecksRequestedMergeGroupHeadCommitAuthorName\","]
#[doc = "      \"description\": \"<p>Name of the commit's author</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MergeGroupChecksRequestedMergeGroupHeadCommitAuthor {
    #[doc = "<p>Git email address of the commit's author</p>"]
    pub email: String,
    #[doc = "<p>Name of the commit's author</p>"]
    pub name: String,
}
impl From<&MergeGroupChecksRequestedMergeGroupHeadCommitAuthor>
    for MergeGroupChecksRequestedMergeGroupHeadCommitAuthor
{
    fn from(value: &MergeGroupChecksRequestedMergeGroupHeadCommitAuthor) -> Self {
        value.clone()
    }
}
#[doc = "<p>Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MergeGroupDestroyedReason\","]
#[doc = "  \"description\": \"<p>Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"dequeued\","]
#[doc = "    \"invalidated\","]
#[doc = "    \"merged\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum MergeGroupDestroyedReason {
    #[serde(rename = "dequeued")]
    Dequeued,
    #[serde(rename = "invalidated")]
    Invalidated,
    #[serde(rename = "merged")]
    Merged,
}
impl From<&MergeGroupDestroyedReason> for MergeGroupDestroyedReason {
    fn from(value: &MergeGroupDestroyedReason) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for MergeGroupDestroyedReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Dequeued => write!(f, "dequeued"),
            Self::Invalidated => write!(f, "invalidated"),
            Self::Merged => write!(f, "merged"),
        }
    }
}
impl std::str::FromStr for MergeGroupDestroyedReason {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "dequeued" => Ok(Self::Dequeued),
            "invalidated" => Ok(Self::Invalidated),
            "merged" => Ok(Self::Merged),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for MergeGroupDestroyedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for MergeGroupDestroyedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for MergeGroupDestroyedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Meta"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"meta\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"MetaDeleted\","]
#[doc = "      \"description\": \"<p>The webhook was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"hook\","]
#[doc = "        \"hook_id\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MetaDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"hook\": {"]
#[doc = "          \"$ref\": \"#/$defs/MetaDeletedHook\""]
#[doc = "        },"]
#[doc = "        \"hook_id\": {"]
#[doc = "          \"title\": \"MetaDeletedHookId\","]
#[doc = "          \"description\": \"<p>The id of the modified webhook.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Meta {
    #[doc = "MetaDeleted\n\n<p>The webhook was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        hook: MetaDeletedHook,
        #[doc = "<p>The id of the modified webhook.</p>"]
        hook_id: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
}
impl From<&Meta> for Meta {
    fn from(value: &Meta) -> Self {
        value.clone()
    }
}
#[doc = "<p>The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MetaDeletedHook\","]
#[doc = "  \"description\": \"<p>The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active\","]
#[doc = "    \"config\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"type\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active\": {"]
#[doc = "      \"title\": \"MetaDeletedHookActive\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"config\": {"]
#[doc = "      \"$ref\": \"#/$defs/MetaDeletedHookConfig\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"MetaDeletedHookCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events\": {"]
#[doc = "      \"title\": \"MetaDeletedHookEvents\","]
#[doc = "      \"description\": \"<p>undefinedSupported values are: <code>*</code>, <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>meta</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>package</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>pull_request_review_thread</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_import</code>, <code>repository_vulnerability_alert</code>, <code>secret_scanning_alert</code>, <code>secret_scanning_alert_location</code>, <code>security_and_analysis</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_job</code>, <code>workflow_run</code>, <code>repository_dispatch</code>, <code>projects_v2_item</code></p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"MetaDeletedHookId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"MetaDeletedHookName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"MetaDeletedHookType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"MetaDeletedHookUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MetaDeletedHook {
    #[doc = ""]
    pub active: bool,
    pub config: MetaDeletedHookConfig,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>undefinedSupported values are: <code>*</code>, <code>branch_protection_rule</code>, <code>check_run</code>, <code>check_suite</code>, <code>code_scanning_alert</code>, <code>commit_comment</code>, <code>create</code>, <code>delete</code>, <code>deployment</code>, <code>deployment_status</code>, <code>deploy_key</code>, <code>discussion</code>, <code>discussion_comment</code>, <code>fork</code>, <code>gollum</code>, <code>issues</code>, <code>issue_comment</code>, <code>label</code>, <code>member</code>, <code>membership</code>, <code>meta</code>, <code>milestone</code>, <code>organization</code>, <code>org_block</code>, <code>package</code>, <code>page_build</code>, <code>project</code>, <code>project_card</code>, <code>project_column</code>, <code>public</code>, <code>pull_request</code>, <code>pull_request_review</code>, <code>pull_request_review_comment</code>, <code>pull_request_review_thread</code>, <code>push</code>, <code>registry_package</code>, <code>release</code>, <code>repository</code>, <code>repository_import</code>, <code>repository_vulnerability_alert</code>, <code>secret_scanning_alert</code>, <code>secret_scanning_alert_location</code>, <code>security_and_analysis</code>, <code>star</code>, <code>status</code>, <code>team</code>, <code>team_add</code>, <code>watch</code>, <code>workflow_job</code>, <code>workflow_run</code>, <code>repository_dispatch</code>, <code>projects_v2_item</code></p>"]
    pub events: Vec<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&MetaDeletedHook> for MetaDeletedHook {
    fn from(value: &MetaDeletedHook) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MetaDeletedHookConfig\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"content_type\","]
#[doc = "    \"insecure_ssl\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"content_type\": {"]
#[doc = "      \"title\": \"MetaDeletedHookConfigContentType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"form\","]
#[doc = "        \"json\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"insecure_ssl\": {"]
#[doc = "      \"title\": \"MetaDeletedHookConfigInsecureSsl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"secret\": {"]
#[doc = "      \"title\": \"MetaDeletedHookConfigSecret\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"MetaDeletedHookConfigUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MetaDeletedHookConfig {
    #[doc = ""]
    pub content_type: MetaDeletedHookConfigContentType,
    #[doc = ""]
    pub insecure_ssl: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    #[doc = ""]
    pub url: String,
}
impl From<&MetaDeletedHookConfig> for MetaDeletedHookConfig {
    fn from(value: &MetaDeletedHookConfig) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MetaDeletedHookConfigContentType\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"form\","]
#[doc = "    \"json\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum MetaDeletedHookConfigContentType {
    #[serde(rename = "form")]
    Form,
    #[serde(rename = "json")]
    Json,
}
impl From<&MetaDeletedHookConfigContentType> for MetaDeletedHookConfigContentType {
    fn from(value: &MetaDeletedHookConfigContentType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for MetaDeletedHookConfigContentType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Form => write!(f, "form"),
            Self::Json => write!(f, "json"),
        }
    }
}
impl std::str::FromStr for MetaDeletedHookConfigContentType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "form" => Ok(Self::Form),
            "json" => Ok(Self::Json),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for MetaDeletedHookConfigContentType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for MetaDeletedHookConfigContentType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for MetaDeletedHookConfigContentType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Milestone"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"milestone\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"MilestoneClosed\","]
#[doc = "      \"description\": \"<p>A milestone was closed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"milestone\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MilestoneClosedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"closed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"MilestoneCreated\","]
#[doc = "      \"description\": \"<p>A milestone was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"milestone\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MilestoneCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"MilestoneDeleted\","]
#[doc = "      \"description\": \"<p>A milestone was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"milestone\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MilestoneDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"MilestoneEdited\","]
#[doc = "      \"description\": \"<p>A milestone was edited.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"milestone\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MilestoneEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"MilestoneOpened\","]
#[doc = "      \"description\": \"<p>A milestone was opened.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"milestone\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"MilestoneOpenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"opened\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Milestone {
    #[doc = "MilestoneClosed\n\n<p>A milestone was closed.</p>"]
    #[serde(rename = "closed")]
    Closed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        milestone: MilestoneClosedMilestone,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "MilestoneCreated\n\n<p>A milestone was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        milestone: MilestoneCreatedMilestone,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "MilestoneDeleted\n\n<p>A milestone was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        milestone: MilestoneClosedMilestone,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "MilestoneEdited\n\n<p>A milestone was edited.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: MilestoneEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        milestone: MilestoneClosedMilestone,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "MilestoneOpened\n\n<p>A milestone was opened.</p>"]
    #[serde(rename = "opened")]
    Opened {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        milestone: MilestoneCreatedMilestone,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&Milestone> for Milestone {
    fn from(value: &Milestone) -> Self {
        value.clone()
    }
}
#[doc = "<p>A collection of related issues and pull requests.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MilestoneClosedMilestone\","]
#[doc = "  \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"closed_at\","]
#[doc = "    \"closed_issues\","]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"description\","]
#[doc = "    \"due_on\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"state\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_issues\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneClosedIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"due_on\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneDueOn\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneNumber\","]
#[doc = "      \"description\": \"<p>The number of the milestone.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneTitle\","]
#[doc = "      \"description\": \"<p>The title of the milestone.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MilestoneClosedMilestone {
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub closed_issues: i64,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub due_on: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>The number of the milestone.</p>"]
    pub number: i64,
    #[doc = ""]
    pub open_issues: i64,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = "<p>The title of the milestone.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&MilestoneClosedMilestone> for MilestoneClosedMilestone {
    fn from(value: &MilestoneClosedMilestone) -> Self {
        value.clone()
    }
}
#[doc = "MilestoneClosedMilestoneCreator"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"login\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorEmail\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreatorType\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user_view_type\": {"]
#[doc = "      \"title\": \"MilestoneClosedMilestoneCreatorUserViewType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MilestoneClosedMilestoneCreator {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub login: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<MilestoneClosedMilestoneCreatorType>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_view_type: Option<String>,
}
impl From<&MilestoneClosedMilestoneCreator> for MilestoneClosedMilestoneCreator {
    fn from(value: &MilestoneClosedMilestoneCreator) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MilestoneClosedMilestoneCreatorType\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Bot\","]
#[doc = "    \"Mannequin\","]
#[doc = "    \"Organization\","]
#[doc = "    \"User\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum MilestoneClosedMilestoneCreatorType {
    Bot,
    Mannequin,
    Organization,
    User,
}
impl From<&MilestoneClosedMilestoneCreatorType> for MilestoneClosedMilestoneCreatorType {
    fn from(value: &MilestoneClosedMilestoneCreatorType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for MilestoneClosedMilestoneCreatorType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Bot => write!(f, "Bot"),
            Self::Mannequin => write!(f, "Mannequin"),
            Self::Organization => write!(f, "Organization"),
            Self::User => write!(f, "User"),
        }
    }
}
impl std::str::FromStr for MilestoneClosedMilestoneCreatorType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "Bot" => Ok(Self::Bot),
            "Mannequin" => Ok(Self::Mannequin),
            "Organization" => Ok(Self::Organization),
            "User" => Ok(Self::User),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for MilestoneClosedMilestoneCreatorType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for MilestoneClosedMilestoneCreatorType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for MilestoneClosedMilestoneCreatorType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>A collection of related issues and pull requests.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MilestoneCreatedMilestone\","]
#[doc = "  \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"closed_at\","]
#[doc = "    \"closed_issues\","]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"description\","]
#[doc = "    \"due_on\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"state\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_issues\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneClosedIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"due_on\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneDueOn\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneNumber\","]
#[doc = "      \"description\": \"<p>The number of the milestone.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneTitle\","]
#[doc = "      \"description\": \"<p>The title of the milestone.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"MilestoneCreatedMilestoneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MilestoneCreatedMilestone {
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub closed_issues: i64,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub due_on: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>The number of the milestone.</p>"]
    pub number: i64,
    #[doc = ""]
    pub open_issues: i64,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = "<p>The title of the milestone.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&MilestoneCreatedMilestone> for MilestoneCreatedMilestone {
    fn from(value: &MilestoneCreatedMilestone) -> Self {
        value.clone()
    }
}
#[doc = "<p>The changes to the milestone if the action was <code>edited</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MilestoneEditedChanges\","]
#[doc = "  \"description\": \"<p>The changes to the milestone if the action was <code>edited</code>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"due_on\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MilestoneEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub due_on: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<DiscussionEditedChangesBody>,
}
impl From<&MilestoneEditedChanges> for MilestoneEditedChanges {
    fn from(value: &MilestoneEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = "OrgBlock"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"org_block\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"OrgBlockBlocked\","]
#[doc = "      \"description\": \"<p>A user was blocked from the organization.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"blocked_user\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"OrgBlockBlockedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"blocked\""]
#[doc = "        },"]
#[doc = "        \"blocked_user\": {"]
#[doc = "          \"title\": \"OrgBlockBlockedBlockedUser\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"OrgBlockUnblocked\","]
#[doc = "      \"description\": \"<p>A previously blocked user was unblocked from the organization.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"blocked_user\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"OrgBlockUnblockedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unblocked\""]
#[doc = "        },"]
#[doc = "        \"blocked_user\": {"]
#[doc = "          \"title\": \"OrgBlockUnblockedBlockedUser\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum OrgBlock {
    #[doc = "OrgBlockBlocked\n\n<p>A user was blocked from the organization.</p>"]
    #[serde(rename = "blocked")]
    Blocked {
        #[doc = ""]
        blocked_user: Option<DeploymentStatusCreatedDeploymentCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "OrgBlockUnblocked\n\n<p>A previously blocked user was unblocked from the organization.</p>"]
    #[serde(rename = "unblocked")]
    Unblocked {
        #[doc = ""]
        blocked_user: Option<DeploymentStatusCreatedDeploymentCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
}
impl From<&OrgBlock> for OrgBlock {
    fn from(value: &OrgBlock) -> Self {
        value.clone()
    }
}
#[doc = "Organization"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"organization\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"OrganizationDeleted\","]
#[doc = "      \"description\": \"<p>An organization was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"OrganizationDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"membership\": {"]
#[doc = "          \"$ref\": \"#/$defs/OrganizationDeletedMembership\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"OrganizationMemberAdded\","]
#[doc = "      \"description\": \"<p>A member accepted an invitation to join an organization.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"membership\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"OrganizationMemberAddedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"member_added\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"membership\": {"]
#[doc = "          \"$ref\": \"#/$defs/OrganizationDeletedMembership\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"OrganizationMemberInvited\","]
#[doc = "      \"description\": \"<p>A member was invited to join the organization.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"invitation\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"OrganizationMemberInvitedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"member_invited\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"invitation\": {"]
#[doc = "          \"$ref\": \"#/$defs/OrganizationMemberInvitedInvitation\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"user\": {"]
#[doc = "          \"title\": \"OrganizationMemberInvitedUser\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"OrganizationMemberRemoved\","]
#[doc = "      \"description\": \"<p>A member was removed from the organization.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"membership\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"OrganizationMemberRemovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"member_removed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"membership\": {"]
#[doc = "          \"$ref\": \"#/$defs/OrganizationDeletedMembership\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"OrganizationRenamed\","]
#[doc = "      \"description\": \"<p>The name of an organization was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"OrganizationRenamedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"renamed\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/OrganizationRenamedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"membership\": {"]
#[doc = "          \"$ref\": \"#/$defs/OrganizationDeletedMembership\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Organization {
    #[doc = "OrganizationDeleted\n\n<p>An organization was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        membership: Option<OrganizationDeletedMembership>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "OrganizationMemberAdded\n\n<p>A member accepted an invitation to join an organization.</p>"]
    #[serde(rename = "member_added")]
    MemberAdded {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        membership: OrganizationDeletedMembership,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "OrganizationMemberInvited\n\n<p>A member was invited to join the organization.</p>"]
    #[serde(rename = "member_invited")]
    MemberInvited {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        invitation: OrganizationMemberInvitedInvitation,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        user: Option<DeploymentStatusCreatedDeploymentCreator>,
    },
    #[doc = "OrganizationMemberRemoved\n\n<p>A member was removed from the organization.</p>"]
    #[serde(rename = "member_removed")]
    MemberRemoved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        membership: OrganizationDeletedMembership,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "OrganizationRenamed\n\n<p>The name of an organization was changed.</p>"]
    #[serde(rename = "renamed")]
    Renamed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<OrganizationRenamedChanges>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        membership: Option<OrganizationDeletedMembership>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
}
impl From<&Organization> for Organization {
    fn from(value: &Organization) -> Self {
        value.clone()
    }
}
#[doc = "<p>The membership between the user and the organization. Not present when the action is <code>member_invited</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"OrganizationDeletedMembership\","]
#[doc = "  \"description\": \"<p>The membership between the user and the organization. Not present when the action is <code>member_invited</code>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"organization_url\","]
#[doc = "    \"role\","]
#[doc = "    \"state\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"organization_url\": {"]
#[doc = "      \"title\": \"OrganizationDeletedMembershipOrganizationUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role\": {"]
#[doc = "      \"title\": \"OrganizationDeletedMembershipRole\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"OrganizationDeletedMembershipState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"OrganizationDeletedMembershipUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"OrganizationDeletedMembershipUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct OrganizationDeletedMembership {
    #[doc = ""]
    pub organization_url: String,
    #[doc = ""]
    pub role: String,
    #[doc = ""]
    pub state: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&OrganizationDeletedMembership> for OrganizationDeletedMembership {
    fn from(value: &OrganizationDeletedMembership) -> Self {
        value.clone()
    }
}
#[doc = "<p>The invitation for the user or email if the action is <code>member_invited</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"OrganizationMemberInvitedInvitation\","]
#[doc = "  \"description\": \"<p>The invitation for the user or email if the action is <code>member_invited</code>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"email\","]
#[doc = "    \"failed_at\","]
#[doc = "    \"failed_reason\","]
#[doc = "    \"id\","]
#[doc = "    \"invitation_teams_url\","]
#[doc = "    \"inviter\","]
#[doc = "    \"login\","]
#[doc = "    \"node_id\","]
#[doc = "    \"role\","]
#[doc = "    \"team_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationEmail\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"failed_at\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationFailedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"failed_reason\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationFailedReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"invitation_source\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationInvitationSource\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"invitation_teams_url\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationInvitationTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"inviter\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationInviter\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationRole\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"team_count\": {"]
#[doc = "      \"title\": \"OrganizationMemberInvitedInvitationTeamCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct OrganizationMemberInvitedInvitation {
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub email: Option<String>,
    #[doc = ""]
    pub failed_at: Option<String>,
    #[doc = ""]
    pub failed_reason: Option<String>,
    pub id: f64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invitation_source: Option<String>,
    #[doc = ""]
    pub invitation_teams_url: String,
    #[doc = ""]
    pub inviter: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub login: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub role: String,
    pub team_count: f64,
}
impl From<&OrganizationMemberInvitedInvitation> for OrganizationMemberInvitedInvitation {
    fn from(value: &OrganizationMemberInvitedInvitation) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"OrganizationRenamedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"login\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct OrganizationRenamedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub login: Option<DiscussionEditedChangesBody>,
}
impl From<&OrganizationRenamedChanges> for OrganizationRenamedChanges {
    fn from(value: &OrganizationRenamedChanges) -> Self {
        value.clone()
    }
}
#[doc = "Package"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"package\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"PackagePublished\","]
#[doc = "      \"description\": \"<p>A package was published to a registry.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"package\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PackagePublishedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"published\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"package\": {"]
#[doc = "          \"title\": \"PackagePublishedPackage\","]
#[doc = "          \"description\": \"<p>Information about the package.</p>\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"created_at\","]
#[doc = "            \"description\","]
#[doc = "            \"ecosystem\","]
#[doc = "            \"html_url\","]
#[doc = "            \"id\","]
#[doc = "            \"name\","]
#[doc = "            \"namespace\","]
#[doc = "            \"owner\","]
#[doc = "            \"package_type\","]
#[doc = "            \"package_version\","]
#[doc = "            \"registry\","]
#[doc = "            \"updated_at\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"created_at\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageCreatedAt\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageDescription\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"ecosystem\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageEcosystem\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"html_url\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageHtmlUrl\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"id\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageId\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"name\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageName\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"namespace\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageNamespace\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"owner\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageOwner\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"package_type\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageType\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"package_version\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersion\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"html_url\","]
#[doc = "                    \"id\","]
#[doc = "                    \"installation_command\","]
#[doc = "                    \"metadata\","]
#[doc = "                    \"name\","]
#[doc = "                    \"package_files\","]
#[doc = "                    \"summary\","]
#[doc = "                    \"version\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"author\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionAuthor\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"body\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionBody\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"anyOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"body_html\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionBodyHtml\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"container_metadata\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionContainerMetadata\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionContainerMetadata\""]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"created_at\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionCreatedAt\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionDescription\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"docker_metadata\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionDockerMetadata\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionDockerMetadata\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"draft\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionDraft\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"html_url\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionHtmlUrl\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"id\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionId\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"installation_command\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionInstallationCommand\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"manifest\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionManifest\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"metadata\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionMetadata\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionName\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"npm_metadata\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadata\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"author\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataAuthor\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"type\": \"null\""]
#[doc = "                                }"]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"bin\": {"]
#[doc = "                              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                            },"]
#[doc = "                            \"bugs\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataBugs\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"type\": \"null\""]
#[doc = "                                }"]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"commit_oid\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataCommitOid\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"contributors\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataContributors\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                              }"]
#[doc = "                            },"]
#[doc = "                            \"cpu\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataCpu\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              }"]
#[doc = "                            },"]
#[doc = "                            \"deleted_by_id\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDeletedById\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"integer\""]
#[doc = "                            },"]
#[doc = "                            \"dependencies\": {"]
#[doc = "                              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDescription\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"dev_dependencies\": {"]
#[doc = "                              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                            },"]
#[doc = "                            \"directories\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDirectories\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"type\": \"null\""]
#[doc = "                                }"]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"dist\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDist\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"type\": \"null\""]
#[doc = "                                }"]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"engines\": {"]
#[doc = "                              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                            },"]
#[doc = "                            \"files\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataFiles\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              }"]
#[doc = "                            },"]
#[doc = "                            \"git_head\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataGitHead\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"has_shrinkwrap\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataHasShrinkwrap\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"boolean\""]
#[doc = "                            },"]
#[doc = "                            \"homepage\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataHomepage\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"id\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataId\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"installation_command\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataInstallationCommand\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"keywords\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataKeywords\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              }"]
#[doc = "                            },"]
#[doc = "                            \"license\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataLicense\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"main\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataMain\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"maintainers\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataMaintainers\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                              }"]
#[doc = "                            },"]
#[doc = "                            \"man\": {"]
#[doc = "                              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                            },"]
#[doc = "                            \"name\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataName\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"node_version\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNodeVersion\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"npm_user\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNpmUser\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"npm_version\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNpmVersion\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"optional_dependencies\": {"]
#[doc = "                              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                            },"]
#[doc = "                            \"os\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataOs\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              }"]
#[doc = "                            },"]
#[doc = "                            \"peer_dependencies\": {"]
#[doc = "                              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                            },"]
#[doc = "                            \"published_via_actions\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataPublishedViaActions\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"boolean\""]
#[doc = "                            },"]
#[doc = "                            \"readme\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataReadme\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"release_id\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataReleaseId\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"integer\""]
#[doc = "                            },"]
#[doc = "                            \"repository\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataRepository\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"type\": \"null\""]
#[doc = "                                }"]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"scripts\": {"]
#[doc = "                              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                            },"]
#[doc = "                            \"version\": {"]
#[doc = "                              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataVersion\","]
#[doc = "                              \"description\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"nuget_metadata\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNugetMetadata\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionNugetMetadata\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"package_files\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionPackageFiles\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionPackageFiles\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"package_url\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionPackageUrl\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"prerelease\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionPrerelease\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"release\": {"]
#[doc = "                      \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRelease\""]
#[doc = "                    },"]
#[doc = "                    \"rubygems_metadata\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadata\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRubygemsMetadata\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"source_url\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionSourceUrl\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"summary\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionSummary\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"tag_name\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionTagName\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"target_commitish\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionTargetCommitish\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"target_oid\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionTargetOid\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"updated_at\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionUpdatedAt\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"version\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionVersion\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"registry\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageRegistry\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/PackagePublishedPackageRegistry\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"updated_at\": {"]
#[doc = "              \"title\": \"PackagePublishedPackageUpdatedAt\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PackageUpdated\","]
#[doc = "      \"description\": \"<p>A previously published package was updated.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"package\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PackageUpdatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"updated\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"package\": {"]
#[doc = "          \"$ref\": \"#/$defs/PackageUpdatedPackage\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Package {
    #[doc = "PackagePublished\n\n<p>A package was published to a registry.</p>"]
    #[serde(rename = "published")]
    Published {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        package: PackagePublishedPackage,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "PackageUpdated\n\n<p>A previously published package was updated.</p>"]
    #[serde(rename = "updated")]
    Updated {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        package: PackageUpdatedPackage,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&Package> for Package {
    fn from(value: &Package) -> Self {
        value.clone()
    }
}
#[doc = "<p>Information about the package.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackagePublishedPackage\","]
#[doc = "  \"description\": \"<p>Information about the package.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"ecosystem\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"namespace\","]
#[doc = "    \"owner\","]
#[doc = "    \"package_type\","]
#[doc = "    \"package_version\","]
#[doc = "    \"registry\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"ecosystem\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageEcosystem\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"namespace\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageNamespace\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"package_type\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"package_version\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"description\","]
#[doc = "            \"html_url\","]
#[doc = "            \"id\","]
#[doc = "            \"installation_command\","]
#[doc = "            \"metadata\","]
#[doc = "            \"name\","]
#[doc = "            \"package_files\","]
#[doc = "            \"summary\","]
#[doc = "            \"version\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"author\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionAuthor\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"body\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionBody\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"anyOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"body_html\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionBodyHtml\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"container_metadata\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionContainerMetadata\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionContainerMetadata\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"created_at\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionCreatedAt\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionDescription\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"docker_metadata\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionDockerMetadata\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionDockerMetadata\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"draft\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionDraft\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"html_url\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionHtmlUrl\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"id\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionId\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"installation_command\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionInstallationCommand\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"manifest\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionManifest\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"metadata\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionMetadata\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"$ref\": \"#/$defs/Untyped\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"name\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionName\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"npm_metadata\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadata\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"author\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataAuthor\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"bin\": {"]
#[doc = "                      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                    },"]
#[doc = "                    \"bugs\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataBugs\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"commit_oid\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataCommitOid\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"contributors\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataContributors\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"cpu\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataCpu\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"deleted_by_id\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDeletedById\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"dependencies\": {"]
#[doc = "                      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDescription\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"dev_dependencies\": {"]
#[doc = "                      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                    },"]
#[doc = "                    \"directories\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDirectories\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"dist\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDist\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"engines\": {"]
#[doc = "                      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                    },"]
#[doc = "                    \"files\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataFiles\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"git_head\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataGitHead\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"has_shrinkwrap\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataHasShrinkwrap\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"homepage\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataHomepage\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"id\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataId\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"installation_command\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataInstallationCommand\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"keywords\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataKeywords\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"license\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataLicense\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"main\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataMain\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"maintainers\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataMaintainers\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"man\": {"]
#[doc = "                      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataName\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"node_version\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNodeVersion\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"npm_user\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNpmUser\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"npm_version\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNpmVersion\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"optional_dependencies\": {"]
#[doc = "                      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                    },"]
#[doc = "                    \"os\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataOs\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"peer_dependencies\": {"]
#[doc = "                      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                    },"]
#[doc = "                    \"published_via_actions\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataPublishedViaActions\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"readme\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataReadme\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"release_id\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataReleaseId\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"repository\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataRepository\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"type\": \"null\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"scripts\": {"]
#[doc = "                      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                    },"]
#[doc = "                    \"version\": {"]
#[doc = "                      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataVersion\","]
#[doc = "                      \"description\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"nuget_metadata\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNugetMetadata\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionNugetMetadata\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"package_files\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionPackageFiles\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionPackageFiles\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"package_url\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionPackageUrl\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"prerelease\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionPrerelease\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"release\": {"]
#[doc = "              \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRelease\""]
#[doc = "            },"]
#[doc = "            \"rubygems_metadata\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadata\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRubygemsMetadata\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"source_url\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionSourceUrl\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"summary\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionSummary\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"tag_name\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionTagName\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"target_commitish\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionTargetCommitish\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"target_oid\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionTargetOid\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"updated_at\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionUpdatedAt\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"version\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionVersion\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"registry\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageRegistry\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PackagePublishedPackageRegistry\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackage {
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub ecosystem: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub namespace: String,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub package_type: String,
    #[doc = ""]
    pub package_version: Option<PackagePublishedPackagePackageVersion>,
    #[doc = ""]
    pub registry: Option<PackagePublishedPackageRegistry>,
    #[doc = ""]
    pub updated_at: Option<String>,
}
impl From<&PackagePublishedPackage> for PackagePublishedPackage {
    fn from(value: &PackagePublishedPackage) -> Self {
        value.clone()
    }
}
#[doc = "PackagePublishedPackagePackageVersion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"installation_command\","]
#[doc = "    \"metadata\","]
#[doc = "    \"name\","]
#[doc = "    \"package_files\","]
#[doc = "    \"summary\","]
#[doc = "    \"version\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"body_html\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionBodyHtml\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"container_metadata\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionContainerMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionContainerMetadata\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"docker_metadata\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionDockerMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionDockerMetadata\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"installation_command\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionInstallationCommand\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"manifest\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionManifest\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"npm_metadata\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"author\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataAuthor\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"bin\": {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            \"bugs\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataBugs\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"commit_oid\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataCommitOid\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"contributors\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataContributors\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"$ref\": \"#/$defs/Untyped\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"cpu\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataCpu\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"deleted_by_id\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDeletedById\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"dependencies\": {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDescription\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"dev_dependencies\": {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            \"directories\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDirectories\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"dist\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDist\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/Untyped\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"engines\": {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            \"files\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataFiles\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"git_head\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataGitHead\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"has_shrinkwrap\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataHasShrinkwrap\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"homepage\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataHomepage\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"id\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataId\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"installation_command\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataInstallationCommand\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"keywords\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataKeywords\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"license\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataLicense\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"main\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataMain\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"maintainers\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataMaintainers\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"$ref\": \"#/$defs/Untyped\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"man\": {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            \"name\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataName\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"node_version\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNodeVersion\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"npm_user\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNpmUser\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"npm_version\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNpmVersion\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"optional_dependencies\": {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            \"os\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataOs\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"peer_dependencies\": {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            \"published_via_actions\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataPublishedViaActions\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"readme\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataReadme\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"release_id\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataReleaseId\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"repository\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataRepository\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"type\": \"null\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"scripts\": {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            \"version\": {"]
#[doc = "              \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataVersion\","]
#[doc = "              \"description\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"nuget_metadata\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNugetMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionNugetMetadata\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"package_files\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionPackageFiles\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"package_url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPrerelease\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"release\": {"]
#[doc = "      \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRelease\""]
#[doc = "    },"]
#[doc = "    \"rubygems_metadata\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRubygemsMetadata\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"source_url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionSourceUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionSummary\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionTargetCommitish\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_oid\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionTargetOid\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersion {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<PackagePublishedPackagePackageVersionBody>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body_html: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_metadata: Option<PackagePublishedPackagePackageVersionContainerMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    pub description: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub docker_metadata: Vec<PackagePublishedPackagePackageVersionDockerMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub installation_command: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifest: Option<String>,
    #[doc = ""]
    pub metadata: Vec<Untyped>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub npm_metadata: Option<PackagePublishedPackagePackageVersionNpmMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nuget_metadata: Option<Vec<PackagePublishedPackagePackageVersionNugetMetadata>>,
    #[doc = ""]
    pub package_files: Vec<PackagePublishedPackagePackageVersionPackageFiles>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prerelease: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<PackagePublishedPackagePackageVersionRelease>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rubygems_metadata: Vec<PackagePublishedPackagePackageVersionRubygemsMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_url: Option<String>,
    #[doc = ""]
    pub summary: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_commitish: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_oid: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[doc = ""]
    pub version: String,
}
impl From<&PackagePublishedPackagePackageVersion> for PackagePublishedPackagePackageVersion {
    fn from(value: &PackagePublishedPackagePackageVersion) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackagePublishedPackagePackageVersionBody\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PackagePublishedPackagePackageVersionBody {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&PackagePublishedPackagePackageVersionBody>
    for PackagePublishedPackagePackageVersionBody
{
    fn from(value: &PackagePublishedPackagePackageVersionBody) -> Self {
        value.clone()
    }
}
impl From<Untyped> for PackagePublishedPackagePackageVersionBody {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "PackagePublishedPackagePackageVersionContainerMetadata"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionContainerMetadataLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"manifest\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionContainerMetadataManifest\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"tag\": {"]
#[doc = "      \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionContainerMetadataTag\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionContainerMetadata {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifest: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<PackagePublishedPackagePackageVersionContainerMetadataTag>,
}
impl From<&PackagePublishedPackagePackageVersionContainerMetadata>
    for PackagePublishedPackagePackageVersionContainerMetadata
{
    fn from(value: &PackagePublishedPackagePackageVersionContainerMetadata) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackagePublishedPackagePackageVersionContainerMetadataTag\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"digest\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionContainerMetadataTagDigest\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionContainerMetadataTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionContainerMetadataTag {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub digest: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}
impl From<&PackagePublishedPackagePackageVersionContainerMetadataTag>
    for PackagePublishedPackagePackageVersionContainerMetadataTag
{
    fn from(value: &PackagePublishedPackagePackageVersionContainerMetadataTag) -> Self {
        value.clone()
    }
}
#[doc = "PackagePublishedPackagePackageVersionDockerMetadata"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"tags\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionDockerMetadataTags\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionDockerMetadata {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub tags: Vec<String>,
}
impl From<&PackagePublishedPackagePackageVersionDockerMetadata>
    for PackagePublishedPackagePackageVersionDockerMetadata
{
    fn from(value: &PackagePublishedPackagePackageVersionDockerMetadata) -> Self {
        value.clone()
    }
}
#[doc = "PackagePublishedPackagePackageVersionNpmMetadata"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"bin\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"bugs\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataBugs\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"commit_oid\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataCommitOid\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataContributors\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"cpu\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataCpu\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"deleted_by_id\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDeletedById\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"dependencies\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dev_dependencies\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"directories\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDirectories\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dist\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataDist\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"engines\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"files\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"git_head\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataGitHead\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_shrinkwrap\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataHasShrinkwrap\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"installation_command\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataInstallationCommand\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keywords\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataKeywords\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"main\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataMain\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"maintainers\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataMaintainers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"man\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_version\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNodeVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"npm_user\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNpmUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"npm_version\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataNpmVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"optional_dependencies\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"os\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataOs\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"peer_dependencies\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"published_via_actions\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataPublishedViaActions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"readme\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataReadme\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"release_id\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataRepository\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"scripts\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNpmMetadataVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionNpmMetadata {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bin: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bugs: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commit_oid: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub contributors: Vec<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub cpu: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted_by_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dev_dependencies: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directories: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dist: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub engines: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub files: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_head: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_shrinkwrap: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation_command: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub keywords: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub main: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub maintainers: Vec<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub man: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_version: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub npm_user: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub npm_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional_dependencies: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub os: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_dependencies: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub published_via_actions: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readme: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scripts: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
impl From<&PackagePublishedPackagePackageVersionNpmMetadata>
    for PackagePublishedPackagePackageVersionNpmMetadata
{
    fn from(value: &PackagePublishedPackagePackageVersionNpmMetadata) -> Self {
        value.clone()
    }
}
#[doc = "PackagePublishedPackagePackageVersionNugetMetadata"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNugetMetadataId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNugetMetadataName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionNugetMetadataValue\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionNugetMetadata {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<PackagePublishedPackagePackageVersionNugetMetadataId>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<PackagePublishedPackagePackageVersionNugetMetadataValue>,
}
impl From<&PackagePublishedPackagePackageVersionNugetMetadata>
    for PackagePublishedPackagePackageVersionNugetMetadata
{
    fn from(value: &PackagePublishedPackagePackageVersionNugetMetadata) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackagePublishedPackagePackageVersionNugetMetadataId\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PackagePublishedPackagePackageVersionNugetMetadataId {
    Variant0(String),
    Variant1(i64),
}
impl From<&PackagePublishedPackagePackageVersionNugetMetadataId>
    for PackagePublishedPackagePackageVersionNugetMetadataId
{
    fn from(value: &PackagePublishedPackagePackageVersionNugetMetadataId) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PackagePublishedPackagePackageVersionNugetMetadataId {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PackagePublishedPackagePackageVersionNugetMetadataId {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PackagePublishedPackagePackageVersionNugetMetadataId {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PackagePublishedPackagePackageVersionNugetMetadataId {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PackagePublishedPackagePackageVersionNugetMetadataId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PackagePublishedPackagePackageVersionNugetMetadataId {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackagePublishedPackagePackageVersionNugetMetadataValue\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PackagePublishedPackagePackageVersionNugetMetadataValue {
    Variant0(bool),
    Variant1(String),
    Variant2(i64),
    Variant3(Untyped),
}
impl From<&PackagePublishedPackagePackageVersionNugetMetadataValue>
    for PackagePublishedPackagePackageVersionNugetMetadataValue
{
    fn from(value: &PackagePublishedPackagePackageVersionNugetMetadataValue) -> Self {
        value.clone()
    }
}
impl From<bool> for PackagePublishedPackagePackageVersionNugetMetadataValue {
    fn from(value: bool) -> Self {
        Self::Variant0(value)
    }
}
impl From<i64> for PackagePublishedPackagePackageVersionNugetMetadataValue {
    fn from(value: i64) -> Self {
        Self::Variant2(value)
    }
}
impl From<Untyped> for PackagePublishedPackagePackageVersionNugetMetadataValue {
    fn from(value: Untyped) -> Self {
        Self::Variant3(value)
    }
}
#[doc = "PackagePublishedPackagePackageVersionPackageFiles"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"content_type\","]
#[doc = "    \"created_at\","]
#[doc = "    \"download_url\","]
#[doc = "    \"id\","]
#[doc = "    \"md5\","]
#[doc = "    \"name\","]
#[doc = "    \"sha1\","]
#[doc = "    \"sha256\","]
#[doc = "    \"size\","]
#[doc = "    \"state\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"content_type\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesContentType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"download_url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesDownloadUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"md5\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesMd5\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"sha1\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesSha1\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"sha256\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesSha256\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesSize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionPackageFilesUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionPackageFiles {
    #[doc = ""]
    pub content_type: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub download_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub md5: Option<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub sha1: Option<String>,
    #[doc = ""]
    pub sha256: Option<String>,
    #[doc = ""]
    pub size: i64,
    #[doc = ""]
    pub state: Option<String>,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&PackagePublishedPackagePackageVersionPackageFiles>
    for PackagePublishedPackagePackageVersionPackageFiles
{
    fn from(value: &PackagePublishedPackagePackageVersionPackageFiles) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackagePublishedPackagePackageVersionRelease\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"created_at\","]
#[doc = "    \"draft\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"prerelease\","]
#[doc = "    \"published_at\","]
#[doc = "    \"tag_name\","]
#[doc = "    \"target_commitish\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleasePrerelease\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleasePublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseTargetCommitish\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionReleaseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionRelease {
    #[doc = ""]
    pub author: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub draft: bool,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: Option<String>,
    #[doc = ""]
    pub prerelease: bool,
    #[doc = ""]
    pub published_at: String,
    #[doc = ""]
    pub tag_name: String,
    #[doc = ""]
    pub target_commitish: String,
    #[doc = ""]
    pub url: String,
}
impl From<&PackagePublishedPackagePackageVersionRelease>
    for PackagePublishedPackagePackageVersionRelease
{
    fn from(value: &PackagePublishedPackagePackageVersionRelease) -> Self {
        value.clone()
    }
}
#[doc = "PackagePublishedPackagePackageVersionRubygemsMetadata"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"commit_oid\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataCommitOid\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dependencies\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataDependencies\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"platform\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataPlatform\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"readme\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataReadme\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataRepo\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"version_info\": {"]
#[doc = "      \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRubygemsMetadataVersionInfo\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionRubygemsMetadata {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commit_oid: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub dependencies: Vec<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readme: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repo: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version_info: Option<PackagePublishedPackagePackageVersionRubygemsMetadataVersionInfo>,
}
impl From<&PackagePublishedPackagePackageVersionRubygemsMetadata>
    for PackagePublishedPackagePackageVersionRubygemsMetadata
{
    fn from(value: &PackagePublishedPackagePackageVersionRubygemsMetadata) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataVersionInfo\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"PackagePublishedPackagePackageVersionRubygemsMetadataVersionInfoVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackagePackageVersionRubygemsMetadataVersionInfo {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
impl From<&PackagePublishedPackagePackageVersionRubygemsMetadataVersionInfo>
    for PackagePublishedPackagePackageVersionRubygemsMetadataVersionInfo
{
    fn from(value: &PackagePublishedPackagePackageVersionRubygemsMetadataVersionInfo) -> Self {
        value.clone()
    }
}
#[doc = "PackagePublishedPackageRegistry"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"about_url\","]
#[doc = "    \"name\","]
#[doc = "    \"type\","]
#[doc = "    \"url\","]
#[doc = "    \"vendor\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"about_url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageRegistryAboutUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageRegistryName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageRegistryType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageRegistryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"vendor\": {"]
#[doc = "      \"title\": \"PackagePublishedPackageRegistryVendor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackagePublishedPackageRegistry {
    #[doc = ""]
    pub about_url: String,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub vendor: String,
}
impl From<&PackagePublishedPackageRegistry> for PackagePublishedPackageRegistry {
    fn from(value: &PackagePublishedPackageRegistry) -> Self {
        value.clone()
    }
}
#[doc = "<p>Information about the package.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackageUpdatedPackage\","]
#[doc = "  \"description\": \"<p>Information about the package.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"ecosystem\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"namespace\","]
#[doc = "    \"owner\","]
#[doc = "    \"package_type\","]
#[doc = "    \"package_version\","]
#[doc = "    \"registry\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"ecosystem\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageEcosystem\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"namespace\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageNamespace\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"package_type\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"package_version\": {"]
#[doc = "      \"$ref\": \"#/$defs/PackageUpdatedPackagePackageVersion\""]
#[doc = "    },"]
#[doc = "    \"registry\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageRegistry\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PackagePublishedPackageRegistry\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackageUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackageUpdatedPackage {
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub ecosystem: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub namespace: String,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub package_type: String,
    pub package_version: PackageUpdatedPackagePackageVersion,
    #[doc = ""]
    pub registry: Option<PackagePublishedPackageRegistry>,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&PackageUpdatedPackage> for PackageUpdatedPackage {
    fn from(value: &PackageUpdatedPackage) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackageUpdatedPackagePackageVersion\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"body\","]
#[doc = "    \"body_html\","]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"installation_command\","]
#[doc = "    \"metadata\","]
#[doc = "    \"name\","]
#[doc = "    \"package_files\","]
#[doc = "    \"summary\","]
#[doc = "    \"target_commitish\","]
#[doc = "    \"target_oid\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"version\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"body_html\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionBodyHtml\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"docker_metadata\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionDockerMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionDockerMetadata\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"installation_command\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionInstallationCommand\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"manifest\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionManifest\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"package_files\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackageUpdatedPackagePackageVersionPackageFiles\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"package_url\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPrerelease\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"release\": {"]
#[doc = "      \"$ref\": \"#/$defs/PackageUpdatedPackagePackageVersionRelease\""]
#[doc = "    },"]
#[doc = "    \"rubygems_metadata\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionRubygemsMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRubygemsMetadata\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"source_url\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionSourceUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionSummary\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionTargetCommitish\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_oid\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionTargetOid\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackageUpdatedPackagePackageVersion {
    #[doc = ""]
    pub author: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub body: String,
    #[doc = ""]
    pub body_html: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub description: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub docker_metadata: Vec<PackagePublishedPackagePackageVersionDockerMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub installation_command: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifest: Option<String>,
    #[doc = ""]
    pub metadata: Vec<Untyped>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub package_files: Vec<PackageUpdatedPackagePackageVersionPackageFiles>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub package_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prerelease: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<PackageUpdatedPackagePackageVersionRelease>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rubygems_metadata: Vec<PackagePublishedPackagePackageVersionRubygemsMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_url: Option<String>,
    #[doc = ""]
    pub summary: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_name: Option<String>,
    #[doc = ""]
    pub target_commitish: String,
    #[doc = ""]
    pub target_oid: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub version: String,
}
impl From<&PackageUpdatedPackagePackageVersion> for PackageUpdatedPackagePackageVersion {
    fn from(value: &PackageUpdatedPackagePackageVersion) -> Self {
        value.clone()
    }
}
#[doc = "PackageUpdatedPackagePackageVersionPackageFiles"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"content_type\","]
#[doc = "    \"created_at\","]
#[doc = "    \"download_url\","]
#[doc = "    \"id\","]
#[doc = "    \"md5\","]
#[doc = "    \"name\","]
#[doc = "    \"sha1\","]
#[doc = "    \"sha256\","]
#[doc = "    \"size\","]
#[doc = "    \"state\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"content_type\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesContentType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"download_url\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesDownloadUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"md5\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesMd5\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"sha1\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesSha1\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"sha256\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesSha256\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesSize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionPackageFilesUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackageUpdatedPackagePackageVersionPackageFiles {
    #[doc = ""]
    pub content_type: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub download_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub md5: Option<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub sha1: Option<String>,
    #[doc = ""]
    pub sha256: String,
    #[doc = ""]
    pub size: i64,
    #[doc = ""]
    pub state: String,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&PackageUpdatedPackagePackageVersionPackageFiles>
    for PackageUpdatedPackagePackageVersionPackageFiles
{
    fn from(value: &PackageUpdatedPackagePackageVersionPackageFiles) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PackageUpdatedPackagePackageVersionRelease\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"created_at\","]
#[doc = "    \"draft\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"prerelease\","]
#[doc = "    \"published_at\","]
#[doc = "    \"tag_name\","]
#[doc = "    \"target_commitish\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleasePrerelease\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleasePublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseTargetCommitish\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PackageUpdatedPackagePackageVersionReleaseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PackageUpdatedPackagePackageVersionRelease {
    #[doc = ""]
    pub author: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub draft: bool,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub prerelease: bool,
    #[doc = ""]
    pub published_at: String,
    #[doc = ""]
    pub tag_name: String,
    #[doc = ""]
    pub target_commitish: String,
    #[doc = ""]
    pub url: String,
}
impl From<&PackageUpdatedPackagePackageVersionRelease>
    for PackageUpdatedPackagePackageVersionRelease
{
    fn from(value: &PackageUpdatedPackagePackageVersionRelease) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PageBuildDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"build\","]
#[doc = "    \"id\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"build\": {"]
#[doc = "      \"$ref\": \"#/$defs/PageBuildDefaultBuild\""]
#[doc = "    },"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PageBuildDefaultId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PageBuild {
    pub build: PageBuildDefaultBuild,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[doc = ""]
    pub id: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
}
impl From<&PageBuild> for PageBuild {
    fn from(value: &PageBuild) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/pages/pages#list-github-pages-builds\">List GitHub Pages builds</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PageBuildDefaultBuild\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/pages/pages#list-github-pages-builds\\\">List GitHub Pages builds</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"commit\","]
#[doc = "    \"created_at\","]
#[doc = "    \"duration\","]
#[doc = "    \"error\","]
#[doc = "    \"pusher\","]
#[doc = "    \"status\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"commit\": {"]
#[doc = "      \"title\": \"PageBuildDefaultBuildCommit\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PageBuildDefaultBuildCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"duration\": {"]
#[doc = "      \"title\": \"PageBuildDefaultBuildDuration\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"error\": {"]
#[doc = "      \"$ref\": \"#/$defs/PageBuildDefaultBuildError\""]
#[doc = "    },"]
#[doc = "    \"pusher\": {"]
#[doc = "      \"title\": \"PageBuildDefaultBuildPusher\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"PageBuildDefaultBuildStatus\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PageBuildDefaultBuildUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PageBuildDefaultBuildUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PageBuildDefaultBuild {
    #[doc = ""]
    pub commit: Option<String>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub duration: i64,
    pub error: PageBuildDefaultBuildError,
    #[doc = ""]
    pub pusher: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub status: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&PageBuildDefaultBuild> for PageBuildDefaultBuild {
    fn from(value: &PageBuildDefaultBuild) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PageBuildDefaultBuildError\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"message\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"message\": {"]
#[doc = "      \"title\": \"PageBuildDefaultBuildErrorMessage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PageBuildDefaultBuildError {
    #[doc = ""]
    pub message: Option<String>,
}
impl From<&PageBuildDefaultBuildError> for PageBuildDefaultBuildError {
    fn from(value: &PageBuildDefaultBuildError) -> Self {
        value.clone()
    }
}
#[doc = "PersonalAccessTokenRequest"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"personal_access_token_request\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestApproved\","]
#[doc = "      \"description\": \"<p>A fine-grained personal access token request was approved.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"organization\","]
#[doc = "        \"personal_access_token_request\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PersonalAccessTokenRequestApprovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"approved\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"personal_access_token_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestCancelled\","]
#[doc = "      \"description\": \"<p>A fine-grained personal access token request was cancelled by the requester.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"organization\","]
#[doc = "        \"personal_access_token_request\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PersonalAccessTokenRequestCancelledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"cancelled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"personal_access_token_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestCreated\","]
#[doc = "      \"description\": \"<p>A fine-grained personal access token request was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"personal_access_token_request\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PersonalAccessTokenRequestCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"personal_access_token_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestDenied\","]
#[doc = "      \"description\": \"<p>A fine-grained personal access token request was denied.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"installation\","]
#[doc = "        \"organization\","]
#[doc = "        \"personal_access_token_request\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PersonalAccessTokenRequestDeniedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"denied\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"personal_access_token_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum PersonalAccessTokenRequest {
    #[doc = "PersonalAccessTokenRequestApproved\n\n<p>A fine-grained personal access token request was approved.</p>"]
    #[serde(rename = "approved")]
    Approved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        organization: Untyped,
        personal_access_token_request: PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest,
        sender: Untyped,
    },
    #[doc = "PersonalAccessTokenRequestCancelled\n\n<p>A fine-grained personal access token request was cancelled by the requester.</p>"]
    #[serde(rename = "cancelled")]
    Cancelled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        organization: Untyped,
        personal_access_token_request: PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest,
        sender: Untyped,
    },
    #[doc = "PersonalAccessTokenRequestCreated\n\n<p>A fine-grained personal access token request was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        personal_access_token_request: PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest,
        sender: Untyped,
    },
    #[doc = "PersonalAccessTokenRequestDenied\n\n<p>A fine-grained personal access token request was denied.</p>"]
    #[serde(rename = "denied")]
    Denied {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        installation: SomethingWithAnId,
        organization: Untyped,
        personal_access_token_request: PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest,
        sender: Untyped,
    },
}
impl From<&PersonalAccessTokenRequest> for PersonalAccessTokenRequest {
    fn from(value: &PersonalAccessTokenRequest) -> Self {
        value.clone()
    }
}
#[doc = "<p>Details of a Personal Access Token Request.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest\","]
#[doc = "  \"description\": \"<p>Details of a Personal Access Token Request.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"id\","]
#[doc = "    \"owner\","]
#[doc = "    \"permissions_added\","]
#[doc = "    \"permissions_result\","]
#[doc = "    \"permissions_upgraded\","]
#[doc = "    \"repositories\","]
#[doc = "    \"repository_count\","]
#[doc = "    \"repository_selection\","]
#[doc = "    \"token_expired\","]
#[doc = "    \"token_expires_at\","]
#[doc = "    \"token_last_used_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestCreatedAt\","]
#[doc = "      \"description\": \"<p>Date and time when the request for access was created.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the request for access via fine-grained personal access token. Used as the <code>pat_request_id</code> parameter in the list and review API calls.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"permissions_added\": {"]
#[doc = "      \"$ref\": \"#/$defs/PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded\""]
#[doc = "    },"]
#[doc = "    \"permissions_result\": {"]
#[doc = "      \"$ref\": \"#/$defs/PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded\""]
#[doc = "    },"]
#[doc = "    \"permissions_upgraded\": {"]
#[doc = "      \"$ref\": \"#/$defs/PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded\""]
#[doc = "    },"]
#[doc = "    \"repositories\": {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositories\","]
#[doc = "      \"description\": \"<p>An array of repository objects the token is requesting access to. This field is only populated when <code>repository_selection</code> is <code>subset</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/InstallationCreatedRepositories\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository_count\": {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositoryCount\","]
#[doc = "      \"description\": \"<p>The number of repositories the token is requesting access to. This field is only populated when <code>repository_selection</code> is <code>subset</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository_selection\": {"]
#[doc = "      \"$ref\": \"#/$defs/PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection\""]
#[doc = "    },"]
#[doc = "    \"token_expired\": {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestTokenExpired\","]
#[doc = "      \"description\": \"<p>Whether the associated fine-grained personal access token has expired.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"token_expires_at\": {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestTokenExpiresAt\","]
#[doc = "      \"description\": \"<p>Date and time when the associated fine-grained personal access token expires.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"token_last_used_at\": {"]
#[doc = "      \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestTokenLastUsedAt\","]
#[doc = "      \"description\": \"<p>Date and time when the associated fine-grained personal access token was last used for authentication.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest {
    #[doc = "<p>Date and time when the request for access was created.</p>"]
    pub created_at: String,
    #[doc = "<p>Unique identifier of the request for access via fine-grained personal access token. Used as the <code>pat_request_id</code> parameter in the list and review API calls.</p>"]
    pub id: i64,
    pub owner: DiscussionTransferredChangesNewRepositoryOrganization,
    pub permissions_added:
        PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded,
    pub permissions_result:
        PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded,
    pub permissions_upgraded:
        PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded,
    #[doc = "<p>An array of repository objects the token is requesting access to. This field is only populated when <code>repository_selection</code> is <code>subset</code>.</p>"]
    pub repositories: Option<Vec<InstallationCreatedRepositories>>,
    #[doc = "<p>The number of repositories the token is requesting access to. This field is only populated when <code>repository_selection</code> is <code>subset</code>.</p>"]
    pub repository_count: Option<i64>,
    pub repository_selection:
        PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection,
    #[doc = "<p>Whether the associated fine-grained personal access token has expired.</p>"]
    pub token_expired: bool,
    #[doc = "<p>Date and time when the associated fine-grained personal access token expires.</p>"]
    pub token_expires_at: Option<String>,
    #[doc = "<p>Date and time when the associated fine-grained personal access token was last used for authentication.</p>"]
    pub token_last_used_at: Option<String>,
}
impl From<&PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest>
    for PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest
{
    fn from(value: &PersonalAccessTokenRequestApprovedPersonalAccessTokenRequest) -> Self {
        value.clone()
    }
}
#[doc = "<p>New requested permissions, categorized by type of permission.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded\","]
#[doc = "  \"description\": \"<p>New requested permissions, categorized by type of permission.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"other\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub other: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<SomethingWithAnId>,
}
impl From<&PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded>
    for PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded
{
    fn from(
        value: &PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestPermissionsAdded,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>Type of repository selection requested.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection\","]
#[doc = "  \"description\": \"<p>Type of repository selection requested.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"all\","]
#[doc = "    \"none\","]
#[doc = "    \"subset\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "subset")]
    Subset,
}
impl From<&PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection>
    for PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection
{
    fn from(
        value: &PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::All => write!(f, "all"),
            Self::None => write!(f, "none"),
            Self::Subset => write!(f, "subset"),
        }
    }
}
impl std::str::FromStr
    for PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "all" => Ok(Self::All),
            "none" => Ok(Self::None),
            "subset" => Ok(Self::Subset),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for PersonalAccessTokenRequestApprovedPersonalAccessTokenRequestRepositorySelection
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PingDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"hook\": {"]
#[doc = "      \"$ref\": \"#/$defs/PingDefaultHook\""]
#[doc = "    },"]
#[doc = "    \"hook_id\": {"]
#[doc = "      \"title\": \"PingDefaultHookId\","]
#[doc = "      \"description\": \"<p>The ID of the webhook that triggered the ping.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"zen\": {"]
#[doc = "      \"title\": \"PingDefaultZen\","]
#[doc = "      \"description\": \"<p>Random string of GitHub zen.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Ping {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hook: Option<PingDefaultHook>,
    #[doc = "<p>The ID of the webhook that triggered the ping.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hook_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<Untyped>,
    #[doc = "<p>Random string of GitHub zen.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zen: Option<String>,
}
impl From<&Ping> for Ping {
    fn from(value: &Ping) -> Self {
        value.clone()
    }
}
#[doc = "<p>The webhook that is being pinged</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PingDefaultHook\","]
#[doc = "  \"description\": \"<p>The webhook that is being pinged</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"active\","]
#[doc = "    \"config\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"type\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active\": {"]
#[doc = "      \"title\": \"PingDefaultHookActive\","]
#[doc = "      \"description\": \"<p>Determines whether the hook is actually triggered for the events it subscribes to.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"app_id\": {"]
#[doc = "      \"title\": \"PingDefaultHookAppId\","]
#[doc = "      \"description\": \"<p>Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"config\": {"]
#[doc = "      \"$ref\": \"#/$defs/PingDefaultHookConfig\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PingDefaultHookCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deliveries_url\": {"]
#[doc = "      \"title\": \"PingDefaultHookDeliveriesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events\": {"]
#[doc = "      \"title\": \"PingDefaultHookEvents\","]
#[doc = "      \"description\": \"<p>Determines what events the hook is triggered for. Default: ['push'].</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PingDefaultHookId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the webhook.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"last_response\": {"]
#[doc = "      \"$ref\": \"#/$defs/PingDefaultHookLastResponse\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PingDefaultHookName\","]
#[doc = "      \"description\": \"<p>The type of webhook. The only valid value is 'web'.</p>\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"web\""]
#[doc = "    },"]
#[doc = "    \"ping_url\": {"]
#[doc = "      \"title\": \"PingDefaultHookPingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"test_url\": {"]
#[doc = "      \"title\": \"PingDefaultHookTestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"PingDefaultHookType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PingDefaultHookUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PingDefaultHookUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PingDefaultHook {
    #[doc = "<p>Determines whether the hook is actually triggered for the events it subscribes to.</p>"]
    pub active: bool,
    #[doc = "<p>Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub app_id: Option<i64>,
    pub config: PingDefaultHookConfig,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deliveries_url: Option<String>,
    #[doc = "<p>Determines what events the hook is triggered for. Default: ['push'].</p>"]
    pub events: Vec<String>,
    #[doc = "<p>Unique identifier of the webhook.</p>"]
    pub id: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub last_response: Option<PingDefaultHookLastResponse>,
    #[doc = "<p>The type of webhook. The only valid value is 'web'.</p>"]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ping_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub test_url: Option<String>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&PingDefaultHook> for PingDefaultHook {
    fn from(value: &PingDefaultHook) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PingDefaultHookConfig\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"content_type\": {"]
#[doc = "      \"title\": \"PingDefaultHookConfigContentType\","]
#[doc = "      \"description\": \"<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"insecure_ssl\": {"]
#[doc = "      \"title\": \"PingDefaultHookConfigInsecureSsl\","]
#[doc = "      \"description\": \"<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"secret\": {"]
#[doc = "      \"title\": \"PingDefaultHookConfigSecret\","]
#[doc = "      \"description\": \"<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\\\"https://docs.github.com/webhooks/event-payloads/#delivery-headers\\\">delivery signature headers</a>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PingDefaultHookConfigUrl\","]
#[doc = "      \"description\": \"<p>The URL to which the payloads will be delivered.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PingDefaultHookConfig {
    #[doc = "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[doc = "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub insecure_ssl: Option<PingDefaultHookConfigInsecureSsl>,
    #[doc = "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    #[doc = "<p>The URL to which the payloads will be delivered.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&PingDefaultHookConfig> for PingDefaultHookConfig {
    fn from(value: &PingDefaultHookConfig) -> Self {
        value.clone()
    }
}
#[doc = "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PingDefaultHookConfigInsecureSsl\","]
#[doc = "  \"description\": \"<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PingDefaultHookConfigInsecureSsl {
    Variant0(f64),
    Variant1(String),
}
impl From<&PingDefaultHookConfigInsecureSsl> for PingDefaultHookConfigInsecureSsl {
    fn from(value: &PingDefaultHookConfigInsecureSsl) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PingDefaultHookConfigInsecureSsl {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PingDefaultHookConfigInsecureSsl {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PingDefaultHookConfigInsecureSsl {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PingDefaultHookConfigInsecureSsl {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PingDefaultHookConfigInsecureSsl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<f64> for PingDefaultHookConfigInsecureSsl {
    fn from(value: f64) -> Self {
        Self::Variant0(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PingDefaultHookLastResponse\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"code\","]
#[doc = "    \"message\","]
#[doc = "    \"status\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"code\": {"]
#[doc = "      \"title\": \"PingDefaultHookLastResponseCode\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"message\": {"]
#[doc = "      \"title\": \"PingDefaultHookLastResponseMessage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"title\": \"PingDefaultHookLastResponseStatus\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PingDefaultHookLastResponse {
    #[doc = ""]
    pub code: Option<i64>,
    #[doc = ""]
    pub message: Option<String>,
    #[doc = ""]
    pub status: Option<String>,
}
impl From<&PingDefaultHookLastResponse> for PingDefaultHookLastResponse {
    fn from(value: &PingDefaultHookLastResponse) -> Self {
        value.clone()
    }
}
#[doc = "Project"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"project\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectClosed\","]
#[doc = "      \"description\": \"<p>A project (classic) was closed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectClosedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"closed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectClosedProject\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectCreated\","]
#[doc = "      \"description\": \"<p>A project (classic) was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectClosedProject\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectDeleted\","]
#[doc = "      \"description\": \"<p>A project (classic) was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectClosedProject\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectEdited\","]
#[doc = "      \"description\": \"<p>The name or description of a project (classic) was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectClosedProject\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectReopened\","]
#[doc = "      \"description\": \"<p>A project (classic) was closed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectReopenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reopened\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectClosedProject\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Project {
    #[doc = "ProjectClosed\n\n<p>A project (classic) was closed.</p>"]
    #[serde(rename = "closed")]
    Closed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project: ProjectClosedProject,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "ProjectCreated\n\n<p>A project (classic) was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project: ProjectClosedProject,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "ProjectDeleted\n\n<p>A project (classic) was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project: ProjectClosedProject,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ProjectEdited\n\n<p>The name or description of a project (classic) was changed.</p>"]
    #[serde(rename = "edited")]
    Edited {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<ProjectEditedChanges>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project: ProjectClosedProject,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ProjectReopened\n\n<p>A project (classic) was closed.</p>"]
    #[serde(rename = "reopened")]
    Reopened {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project: ProjectClosedProject,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
}
impl From<&Project> for Project {
    fn from(value: &Project) -> Self {
        value.clone()
    }
}
#[doc = "ProjectCard"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"project_card\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectCardConverted\","]
#[doc = "      \"description\": \"<p>A note in a project (classic) was converted to an issue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"project_card\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectCardConvertedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"converted\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectCardConvertedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_card\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectCardConvertedProjectCard\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectCardCreated\","]
#[doc = "      \"description\": \"<p>A card was added to a project (classic).</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project_card\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectCardCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_card\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectCardConvertedProjectCard\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectCardDeleted\","]
#[doc = "      \"description\": \"<p>A card on a project (classic) was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project_card\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectCardDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_card\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectCardDeletedProjectCard\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectCardEdited\","]
#[doc = "      \"description\": \"<p>A note on a project (classic) was edited.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"project_card\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectCardEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectCardEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_card\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectCardConvertedProjectCard\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectCardMoved\","]
#[doc = "      \"description\": \"<p>A card on a project (classic) was moved to another column or to another position in its column.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project_card\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectCardMovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"moved\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectCardMovedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_card\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectCardMovedProjectCard\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum ProjectCard {
    #[doc = "ProjectCardConverted\n\n<p>A note in a project (classic) was converted to an issue.</p>"]
    #[serde(rename = "converted")]
    Converted {
        changes: ProjectCardConvertedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_card: ProjectCardConvertedProjectCard,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "ProjectCardCreated\n\n<p>A card was added to a project (classic).</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_card: ProjectCardConvertedProjectCard,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "ProjectCardDeleted\n\n<p>A card on a project (classic) was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_card: ProjectCardDeletedProjectCard,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "ProjectCardEdited\n\n<p>A note on a project (classic) was edited.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: ProjectCardEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_card: ProjectCardConvertedProjectCard,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "ProjectCardMoved\n\n<p>A card on a project (classic) was moved to another column or to another position in its column.</p>"]
    #[serde(rename = "moved")]
    Moved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<ProjectCardMovedChanges>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_card: ProjectCardMovedProjectCard,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
}
impl From<&ProjectCard> for ProjectCard {
    fn from(value: &ProjectCard) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectCardConvertedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"note\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"note\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectCardConvertedChanges {
    pub note: DiscussionEditedChangesBody,
}
impl From<&ProjectCardConvertedChanges> for ProjectCardConvertedChanges {
    fn from(value: &ProjectCardConvertedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectCardConvertedProjectCard\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archived\","]
#[doc = "    \"column_id\","]
#[doc = "    \"column_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"note\","]
#[doc = "    \"project_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"after_id\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardAfterId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardArchived\","]
#[doc = "      \"description\": \"<p>Whether or not the card is archived</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"column_id\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardColumnId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"column_url\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardColumnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"content_url\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardContentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardId\","]
#[doc = "      \"description\": \"<p>The project card's ID</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"note\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardNote\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"project_url\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardProjectUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ProjectCardConvertedProjectCardUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectCardConvertedProjectCard {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub after_id: Option<i64>,
    #[doc = "<p>Whether or not the card is archived</p>"]
    pub archived: bool,
    #[doc = ""]
    pub column_id: i64,
    #[doc = ""]
    pub column_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_url: Option<String>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>The project card's ID</p>"]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub note: Option<String>,
    #[doc = ""]
    pub project_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&ProjectCardConvertedProjectCard> for ProjectCardConvertedProjectCard {
    fn from(value: &ProjectCardConvertedProjectCard) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectCardDeletedProjectCard\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archived\","]
#[doc = "    \"column_id\","]
#[doc = "    \"column_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"note\","]
#[doc = "    \"project_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"after_id\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardAfterId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardArchived\","]
#[doc = "      \"description\": \"<p>Whether or not the card is archived</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"column_id\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardColumnId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"column_url\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardColumnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"content_url\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardContentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardId\","]
#[doc = "      \"description\": \"<p>The project card's ID</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"note\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardNote\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"project_url\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardProjectUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ProjectCardDeletedProjectCardUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectCardDeletedProjectCard {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub after_id: Option<i64>,
    #[doc = "<p>Whether or not the card is archived</p>"]
    pub archived: bool,
    #[doc = ""]
    pub column_id: Option<i64>,
    #[doc = ""]
    pub column_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_url: Option<String>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<MilestoneClosedMilestoneCreator>,
    #[doc = "<p>The project card's ID</p>"]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub note: Option<String>,
    #[doc = ""]
    pub project_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&ProjectCardDeletedProjectCard> for ProjectCardDeletedProjectCard {
    fn from(value: &ProjectCardDeletedProjectCard) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectCardEditedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"note\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"note\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryEditedChangesDescription\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectCardEditedChanges {
    pub note: RepositoryEditedChangesDescription,
}
impl From<&ProjectCardEditedChanges> for ProjectCardEditedChanges {
    fn from(value: &ProjectCardEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectCardMovedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"column_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"column_id\": {"]
#[doc = "      \"$ref\": \"#/$defs/ProjectCardMovedChangesColumnId\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectCardMovedChanges {
    pub column_id: ProjectCardMovedChangesColumnId,
}
impl From<&ProjectCardMovedChanges> for ProjectCardMovedChanges {
    fn from(value: &ProjectCardMovedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectCardMovedChangesColumnId\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"from\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"title\": \"ProjectCardMovedChangesColumnIdFrom\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectCardMovedChangesColumnId {
    #[doc = ""]
    pub from: i64,
}
impl From<&ProjectCardMovedChangesColumnId> for ProjectCardMovedChangesColumnId {
    fn from(value: &ProjectCardMovedChangesColumnId) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectCardMovedProjectCard\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"after_id\","]
#[doc = "    \"archived\","]
#[doc = "    \"column_id\","]
#[doc = "    \"column_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"note\","]
#[doc = "    \"project_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"after_id\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardAfterId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardArchived\","]
#[doc = "      \"description\": \"<p>Whether or not the card is archived</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"column_id\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardColumnId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"column_url\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardColumnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"content_url\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardContentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardId\","]
#[doc = "      \"description\": \"<p>The project card's ID</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"note\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardNote\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"project_url\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardProjectUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ProjectCardMovedProjectCardUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectCardMovedProjectCard {
    #[doc = ""]
    pub after_id: Option<f64>,
    #[doc = "<p>Whether or not the card is archived</p>"]
    pub archived: bool,
    #[doc = ""]
    pub column_id: i64,
    #[doc = ""]
    pub column_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content_url: Option<String>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<MilestoneClosedMilestoneCreator>,
    #[doc = "<p>The project card's ID</p>"]
    pub id: i64,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub note: Option<String>,
    #[doc = ""]
    pub project_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&ProjectCardMovedProjectCard> for ProjectCardMovedProjectCard {
    fn from(value: &ProjectCardMovedProjectCard) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectClosedProject\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"body\","]
#[doc = "    \"columns_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"creator\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"owner_url\","]
#[doc = "    \"state\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectBody\","]
#[doc = "      \"description\": \"<p>Body of the project</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"columns_url\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectColumnsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"creator\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectCreator\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectName\","]
#[doc = "      \"description\": \"<p>Name of the project</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"owner_url\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectOwnerUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ProjectClosedProjectUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectClosedProject {
    #[doc = "<p>Body of the project</p>"]
    pub body: Option<String>,
    #[doc = ""]
    pub columns_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub creator: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = "<p>Name of the project</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub owner_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&ProjectClosedProject> for ProjectClosedProject {
    fn from(value: &ProjectClosedProject) -> Self {
        value.clone()
    }
}
#[doc = "ProjectColumn"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"project_column\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectColumnCreated\","]
#[doc = "      \"description\": \"<p>A column was added to a project (classic).</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project_column\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectColumnCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_column\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectColumnCreatedProjectColumn\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectColumnDeleted\","]
#[doc = "      \"description\": \"<p>A column was deleted from a project (classic).</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project_column\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectColumnDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_column\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectColumnCreatedProjectColumn\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectColumnEdited\","]
#[doc = "      \"description\": \"<p>The name of a column on a project (classic) was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"project_column\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectColumnEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryRenamedChangesRepository\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_column\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectColumnCreatedProjectColumn\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ProjectColumnMoved\","]
#[doc = "      \"description\": \"<p>A column was moved to a new position on a project (classic).</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"project_column\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ProjectColumnMovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"moved\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"project_column\": {"]
#[doc = "          \"$ref\": \"#/$defs/ProjectColumnCreatedProjectColumn\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum ProjectColumn {
    #[doc = "ProjectColumnCreated\n\n<p>A column was added to a project (classic).</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_column: ProjectColumnCreatedProjectColumn,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ProjectColumnDeleted\n\n<p>A column was deleted from a project (classic).</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_column: ProjectColumnCreatedProjectColumn,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ProjectColumnEdited\n\n<p>The name of a column on a project (classic) was changed.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: RepositoryRenamedChangesRepository,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_column: ProjectColumnCreatedProjectColumn,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ProjectColumnMoved\n\n<p>A column was moved to a new position on a project (classic).</p>"]
    #[serde(rename = "moved")]
    Moved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        project_column: ProjectColumnCreatedProjectColumn,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
}
impl From<&ProjectColumn> for ProjectColumn {
    fn from(value: &ProjectColumn) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectColumnCreatedProjectColumn\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"cards_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"project_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"after_id\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnAfterId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cards_url\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnCardsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnId\","]
#[doc = "      \"description\": \"<p>The unique identifier of the project column</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnName\","]
#[doc = "      \"description\": \"<p>Name of the project column</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"project_url\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnProjectUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ProjectColumnCreatedProjectColumnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectColumnCreatedProjectColumn {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub after_id: Option<i64>,
    #[doc = ""]
    pub cards_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The unique identifier of the project column</p>"]
    pub id: i64,
    #[doc = "<p>Name of the project column</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub project_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
}
impl From<&ProjectColumnCreatedProjectColumn> for ProjectColumnCreatedProjectColumn {
    fn from(value: &ProjectColumnCreatedProjectColumn) -> Self {
        value.clone()
    }
}
#[doc = "<p>The changes to the project if the action was <code>edited</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ProjectEditedChanges\","]
#[doc = "  \"description\": \"<p>The changes to the project if the action was <code>edited</code>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"body\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ProjectEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<DiscussionEditedChangesBody>,
}
impl From<&ProjectEditedChanges> for ProjectEditedChanges {
    fn from(value: &ProjectEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PublicDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"repository\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Public {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
}
impl From<&Public> for Public {
    fn from(value: &Public) -> Self {
        value.clone()
    }
}
#[doc = "PullRequest"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"pull_request\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestAssigned\","]
#[doc = "      \"description\": \"<p>A pull request was assigned to a user.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"assignee\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestAssignedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"assigned\""]
#[doc = "        },"]
#[doc = "        \"assignee\": {"]
#[doc = "          \"title\": \"PullRequestAssignedAssignee\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestAssignedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestAssignedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabled\","]
#[doc = "      \"description\": \"<p>Auto merge was disabled for a pull request. For more information, see \\\"<a href=\\\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request\\\">Automatically merging a pull request</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"reason\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestAutoMergeDisabledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"auto_merge_disabled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestAutoMergeDisabledNumber\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestAutoMergeDisabledPullRequest\""]
#[doc = "        },"]
#[doc = "        \"reason\": {"]
#[doc = "          \"title\": \"PullRequestAutoMergeDisabledReason\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabled\","]
#[doc = "      \"description\": \"<p>Auto merge was enabled for a pull request. For more information, see \\\"<a href=\\\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request\\\">Automatically merging a pull request</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestAutoMergeEnabledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"auto_merge_enabled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestAutoMergeEnabledNumber\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestAutoMergeEnabledPullRequest\""]
#[doc = "        },"]
#[doc = "        \"reason\": {"]
#[doc = "          \"title\": \"PullRequestAutoMergeEnabledReason\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestClosed\","]
#[doc = "      \"description\": \"<p>A pull request was closed. If <code>merged</code> is false in the webhook payload, the pull request was closed with unmerged commits. If <code>merged</code> is true in the webhook payload, the pull request was merged.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestClosedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"closed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestClosedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestClosedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestConvertedToDraft\","]
#[doc = "      \"description\": \"<p>A pull request was converted to a draft. For more information, see \\\"<a href=\\\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request\\\">Changing the stage of a pull request</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestConvertedToDraftAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"converted_to_draft\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestConvertedToDraftNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestClosedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestDemilestoned\","]
#[doc = "      \"description\": \"<p>A pull request was removed from a milestone.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestDemilestonedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"demilestoned\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsMilestone\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestDemilestonedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestDemilestonedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestDequeued\","]
#[doc = "      \"description\": \"<p>A pull request was removed from the merge queue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"reason\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestDequeuedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"dequeued\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestDequeuedNumber\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestAutoMergeEnabledPullRequest\""]
#[doc = "        },"]
#[doc = "        \"reason\": {"]
#[doc = "          \"title\": \"PullRequestDequeuedReason\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"ALREADY_MERGED\","]
#[doc = "            \"BRANCH_PROTECTIONS\","]
#[doc = "            \"CI_FAILURE\","]
#[doc = "            \"CI_TIMEOUT\","]
#[doc = "            \"GIT_TREE_INVALID\","]
#[doc = "            \"INVALID_MERGE_COMMIT\","]
#[doc = "            \"MANUAL\","]
#[doc = "            \"MERGE\","]
#[doc = "            \"MERGE_CONFLICT\","]
#[doc = "            \"QUEUE_CLEARED\","]
#[doc = "            \"ROLL_BACK\","]
#[doc = "            \"UNKNOWN_REMOVAL_REASON\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestEdited\","]
#[doc = "      \"description\": \"<p>The title or body of a pull request was edited, or the base branch of a pull request was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestEditedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestClosedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestEnqueued\","]
#[doc = "      \"description\": \"<p>A pull request was added to the merge queue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestEnqueuedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"enqueued\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestEnqueuedNumber\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestAutoMergeEnabledPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestLabeled\","]
#[doc = "      \"description\": \"<p>A label was added to a pull request.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestLabeledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"labeled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestLabeledNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestLabeledPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestLocked\","]
#[doc = "      \"description\": \"<p>Conversation on a pull request was locked. For more information, see \\\"<a href=\\\"https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations\\\">Locking conversations</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestLockedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"locked\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestLockedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestLockedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestMilestoned\","]
#[doc = "      \"description\": \"<p>A pull request was added to a milestone.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestMilestonedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"milestoned\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsMilestone\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestMilestonedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestDemilestonedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestOpened\","]
#[doc = "      \"description\": \"<p>A pull request was created</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestOpenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"opened\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestOpenedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestClosedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReadyForReview\","]
#[doc = "      \"description\": \"<p>A draft pull request was marked as ready for review. For more information, see \\\"<a href=\\\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request\\\">Changing the stage of a pull request</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReadyForReviewAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"ready_for_review\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestReadyForReviewNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestClosedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReopened\","]
#[doc = "      \"description\": \"<p>A previously closed pull request was reopened.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReopenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reopened\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestReopenedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestClosedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemoved\","]
#[doc = "      \"description\": \"<p>A request for review by a person or team was removed from a pull request.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"requested_reviewer\","]
#[doc = "        \"requested_team\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewRequestRemovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"review_request_removed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestReviewRequestRemovedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewRequestRemovedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requested_reviewer\": {"]
#[doc = "          \"title\": \"PullRequestReviewRequestRemovedRequestedReviewer\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"requested_team\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewRequested\","]
#[doc = "      \"description\": \"<p>Review by a person or team was requested for a pull request. For more information, see \\\"<a href=\\\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review\\\">Requesting a pull request review</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"requested_reviewer\","]
#[doc = "        \"requested_team\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewRequestedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"review_requested\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestReviewRequestedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewRequestedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"requested_reviewer\": {"]
#[doc = "          \"title\": \"PullRequestReviewRequestedRequestedReviewer\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"requested_team\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestSynchronize\","]
#[doc = "      \"description\": \"<p>A pull request's head branch was updated. For example, the head branch was updated from the base branch or new commits were pushed to the head branch.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"after\","]
#[doc = "        \"before\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestSynchronizeAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"synchronize\""]
#[doc = "        },"]
#[doc = "        \"after\": {"]
#[doc = "          \"title\": \"PullRequestSynchronizeAfter\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"before\": {"]
#[doc = "          \"title\": \"PullRequestSynchronizeBefore\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestSynchronizeNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewRequestedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestUnassigned\","]
#[doc = "      \"description\": \"<p>A user was unassigned from a pull request.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestUnassignedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unassigned\""]
#[doc = "        },"]
#[doc = "        \"assignee\": {"]
#[doc = "          \"title\": \"PullRequestUnassignedAssignee\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestUnassignedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestUnassignedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestUnlabeled\","]
#[doc = "      \"description\": \"<p>A label was removed from a pull request.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestUnlabeledAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unlabeled\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestUnlabeledNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestAssignedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestUnlocked\","]
#[doc = "      \"description\": \"<p>Conversation on a pull request was unlocked. For more information, see \\\"<a href=\\\"https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations\\\">Locking conversations</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"number\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestUnlockedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unlocked\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"number\": {"]
#[doc = "          \"title\": \"PullRequestUnlockedNumber\","]
#[doc = "          \"description\": \"<p>The pull request number.</p>\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestUnlockedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum PullRequest {
    #[doc = "PullRequestAssigned\n\n<p>A pull request was assigned to a user.</p>"]
    #[serde(rename = "assigned")]
    Assigned {
        #[doc = ""]
        assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestAssignedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestAutoMergeDisabled\n\n<p>Auto merge was disabled for a pull request. For more information, see \"<a href=\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request\">Automatically merging a pull request</a>.\"</p>"]
    #[serde(rename = "auto_merge_disabled")]
    AutoMergeDisabled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestAutoMergeDisabledPullRequest,
        #[doc = ""]
        reason: String,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestAutoMergeEnabled\n\n<p>Auto merge was enabled for a pull request. For more information, see \"<a href=\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request\">Automatically merging a pull request</a>.\"</p>"]
    #[serde(rename = "auto_merge_enabled")]
    AutoMergeEnabled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestAutoMergeEnabledPullRequest,
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        reason: Option<String>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestClosed\n\n<p>A pull request was closed. If <code>merged</code> is false in the webhook payload, the pull request was closed with unmerged commits. If <code>merged</code> is true in the webhook payload, the pull request was merged.</p>"]
    #[serde(rename = "closed")]
    Closed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestClosedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestConvertedToDraft\n\n<p>A pull request was converted to a draft. For more information, see \"<a href=\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request\">Changing the stage of a pull request</a>.\"</p>"]
    #[serde(rename = "converted_to_draft")]
    ConvertedToDraft {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestClosedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestDemilestoned\n\n<p>A pull request was removed from a milestone.</p>"]
    #[serde(rename = "demilestoned")]
    Demilestoned {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        milestone: Option<DeploymentProtectionRuleRequestedPullRequestsMilestone>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestDemilestonedPullRequest,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "PullRequestDequeued\n\n<p>A pull request was removed from the merge queue.</p>"]
    #[serde(rename = "dequeued")]
    Dequeued {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestAutoMergeEnabledPullRequest,
        #[doc = ""]
        reason: PullRequestDequeuedReason,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestEdited\n\n<p>The title or body of a pull request was edited, or the base branch of a pull request was changed.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: PullRequestEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestClosedPullRequest,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "PullRequestEnqueued\n\n<p>A pull request was added to the merge queue.</p>"]
    #[serde(rename = "enqueued")]
    Enqueued {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = ""]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestAutoMergeEnabledPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestLabeled\n\n<p>A label was added to a pull request.</p>"]
    #[serde(rename = "labeled")]
    Labeled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        label: Option<DiscussionLabeledLabel>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestLabeledPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestLocked\n\n<p>Conversation on a pull request was locked. For more information, see \"<a href=\"https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations\">Locking conversations</a>.\"</p>"]
    #[serde(rename = "locked")]
    Locked {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestLockedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestMilestoned\n\n<p>A pull request was added to a milestone.</p>"]
    #[serde(rename = "milestoned")]
    Milestoned {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        milestone: Option<DeploymentProtectionRuleRequestedPullRequestsMilestone>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestDemilestonedPullRequest,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "PullRequestOpened\n\n<p>A pull request was created</p>"]
    #[serde(rename = "opened")]
    Opened {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestClosedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestReadyForReview\n\n<p>A draft pull request was marked as ready for review. For more information, see \"<a href=\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request\">Changing the stage of a pull request</a>.\"</p>"]
    #[serde(rename = "ready_for_review")]
    ReadyForReview {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestClosedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestReopened\n\n<p>A previously closed pull request was reopened.</p>"]
    #[serde(rename = "reopened")]
    Reopened {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestClosedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestReviewRequestRemoved\n\n<p>A request for review by a person or team was removed from a pull request.</p>"]
    #[serde(rename = "review_request_removed")]
    ReviewRequestRemoved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewRequestRemovedPullRequest,
        repository: SomethingWithAnId,
        #[doc = ""]
        requested_reviewer: Option<DeploymentStatusCreatedDeploymentCreator>,
        requested_team: PullRequestReviewCommentCreatedPullRequestRequestedTeams,
        sender: Untyped,
    },
    #[doc = "PullRequestReviewRequested\n\n<p>Review by a person or team was requested for a pull request. For more information, see \"<a href=\"https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review\">Requesting a pull request review</a>.\"</p>"]
    #[serde(rename = "review_requested")]
    ReviewRequested {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewRequestedPullRequest,
        repository: SomethingWithAnId,
        #[doc = ""]
        requested_reviewer: Option<MilestoneClosedMilestoneCreator>,
        requested_team: PullRequestReviewCommentCreatedPullRequestRequestedTeams,
        sender: Untyped,
    },
    #[doc = "PullRequestSynchronize\n\n<p>A pull request's head branch was updated. For example, the head branch was updated from the base branch or new commits were pushed to the head branch.</p>"]
    #[serde(rename = "synchronize")]
    Synchronize {
        #[doc = ""]
        after: String,
        #[doc = ""]
        before: String,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewRequestedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestUnassigned\n\n<p>A user was unassigned from a pull request.</p>"]
    #[serde(rename = "unassigned")]
    Unassigned {
        #[doc = ""]
        #[serde(default, skip_serializing_if = "Option::is_none")]
        assignee: Option<MilestoneClosedMilestoneCreator>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestUnassignedPullRequest,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "PullRequestUnlabeled\n\n<p>A label was removed from a pull request.</p>"]
    #[serde(rename = "unlabeled")]
    Unlabeled {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        label: Option<DiscussionLabeledLabel>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestAssignedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestUnlocked\n\n<p>Conversation on a pull request was unlocked. For more information, see \"<a href=\"https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations\">Locking conversations</a>.\"</p>"]
    #[serde(rename = "unlocked")]
    Unlocked {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[doc = "<p>The pull request number.</p>"]
        number: i64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestUnlockedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&PullRequest> for PullRequest {
    fn from(value: &PullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestAssignedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewSubmittedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestAssignedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestAssignedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewSubmittedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestAssignedPullRequest> for PullRequestAssignedPullRequest {
    fn from(value: &PullRequestAssignedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestAutoMergeDisabledPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestAutoMergeDisabledPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestAutoMergeDisabledPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestAutoMergeDisabledPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestAutoMergeDisabledPullRequest> for PullRequestAutoMergeDisabledPullRequest {
    fn from(value: &PullRequestAutoMergeDisabledPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestAutoMergeDisabledPullRequestBase\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestAutoMergeDisabledPullRequestBaseRepo\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestAutoMergeDisabledPullRequestBase {
    #[doc = ""]
    pub label: String,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repo: PullRequestAutoMergeDisabledPullRequestBaseRepo,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestAutoMergeDisabledPullRequestBase>
    for PullRequestAutoMergeDisabledPullRequestBase
{
    fn from(value: &PullRequestAutoMergeDisabledPullRequestBase) -> Self {
        value.clone()
    }
}
#[doc = "<p>A git repository</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepo\","]
#[doc = "  \"description\": \"<p>A git repository</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_discussions\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"topics\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"visibility\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow auto-merge for pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoAllowForking\","]
#[doc = "      \"description\": \"<p>Whether to allow private forks</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoAllowUpdateBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoDisabled\","]
#[doc = "      \"description\": \"<p>Returns whether or not this repository is disabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_discussions\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHasDiscussions\","]
#[doc = "      \"description\": \"<p>Whether discussions are enabled.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoLicense\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoOrganization\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"public\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoPublic\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoRoleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoSize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoSshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoStargazers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoSubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoSubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoSvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"use_squash_pr_title_as_default\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoUseSquashPrTitleAsDefault\","]
#[doc = "      \"description\": \"<p>Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"<p>Whether to require contributors to sign off on web-based commits</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestAutoMergeDisabledPullRequestBaseRepo {
    #[doc = "<p>Whether to allow auto-merge for pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow private forks</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Returns whether or not this repository is disabled.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether discussions are enabled.</p>"]
    pub has_discussions: bool,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub license: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoLicense>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[doc = ""]
    pub size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle>,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers: Option<i64>,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</p>"]
    #[serde(default)]
    pub use_squash_pr_title_as_default: bool,
    pub visibility: PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
    #[doc = "<p>Whether to require contributors to sign off on web-based commits</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web_commit_signoff_required: Option<bool>,
}
impl From<&PullRequestAutoMergeDisabledPullRequestBaseRepo>
    for PullRequestAutoMergeDisabledPullRequestBaseRepo
{
    fn from(value: &PullRequestAutoMergeDisabledPullRequestBaseRepo) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt>
    for PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt
{
    fn from(value: &PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt>
    for PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt
{
    fn from(value: &PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestAutoMergeEnabledPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestAutoMergeEnabledPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestAutoMergeEnabledPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestAutoMergeEnabledPullRequest> for PullRequestAutoMergeEnabledPullRequest {
    fn from(value: &PullRequestAutoMergeEnabledPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestClosedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"additions\","]
#[doc = "    \"assignee\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"changed_files\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"deletions\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"maintainer_can_modify\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"mergeable\","]
#[doc = "    \"mergeable_state\","]
#[doc = "    \"merged\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"merged_by\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow auto-merge for pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestAllowUpdateBranch\","]
#[doc = "      \"description\": \"<p>Whether to allow updating the pull request's branch.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHead\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionAnsweredDiscussionLabels\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsMilestone\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsRequestedTeams\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"use_squash_pr_title_as_default\": {"]
#[doc = "      \"title\": \"PullRequestClosedPullRequestUseSquashPrTitleAsDefault\","]
#[doc = "      \"description\": \"<p>Whether a squash merge commit can use the pull request title as default. <strong>This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</strong></p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestClosedPullRequest {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active_lock_reason: Option<String>,
    #[doc = ""]
    pub additions: i64,
    #[doc = "<p>Whether to allow auto-merge for pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow updating the pull request's branch.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    pub assignee: DiscussionTransferredChangesNewRepositoryOrganization,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignees: Option<Vec<DiscussionTransferredChangesNewRepositoryOrganization>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<DeploymentProtectionRuleRequestedPullRequestsAutoMerge>,
    pub base: DeploymentProtectionRuleRequestedPullRequestsHead,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub changed_files: i64,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits: i64,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged.</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deletions: i64,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    pub head: DeploymentProtectionRuleRequestedPullRequestsHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionAnsweredDiscussionLabels>,
    #[serde(rename = "_links")]
    pub links: DeploymentProtectionRuleRequestedPullRequestsLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    pub maintainer_can_modify: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle>,
    #[doc = ""]
    pub mergeable: Option<bool>,
    #[doc = ""]
    pub mergeable_state: String,
    #[doc = ""]
    pub merged: bool,
    #[doc = ""]
    pub merged_at: Option<String>,
    pub merged_by: DiscussionTransferredChangesNewRepositoryOrganization,
    pub milestone: DeploymentProtectionRuleRequestedPullRequestsMilestone,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requested_reviewers: Option<Vec<DiscussionTransferredChangesNewRepositoryOrganization>>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requested_teams: Option<Vec<DeploymentProtectionRuleRequestedPullRequestsRequestedTeams>>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments: i64,
    #[doc = ""]
    pub review_comments_url: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle>,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>Whether a squash merge commit can use the pull request title as default. <strong>This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</strong></p>"]
    #[serde(default)]
    pub use_squash_pr_title_as_default: bool,
    pub user: DiscussionTransferredChangesNewRepositoryOrganization,
}
impl From<&PullRequestClosedPullRequest> for PullRequestClosedPullRequest {
    fn from(value: &PullRequestClosedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestDemilestonedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestDemilestonedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestDemilestonedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<MilestoneClosedMilestoneCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestDemilestonedPullRequest> for PullRequestDemilestonedPullRequest {
    fn from(value: &PullRequestDemilestonedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestDequeuedReason\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"ALREADY_MERGED\","]
#[doc = "    \"BRANCH_PROTECTIONS\","]
#[doc = "    \"CI_FAILURE\","]
#[doc = "    \"CI_TIMEOUT\","]
#[doc = "    \"GIT_TREE_INVALID\","]
#[doc = "    \"INVALID_MERGE_COMMIT\","]
#[doc = "    \"MANUAL\","]
#[doc = "    \"MERGE\","]
#[doc = "    \"MERGE_CONFLICT\","]
#[doc = "    \"QUEUE_CLEARED\","]
#[doc = "    \"ROLL_BACK\","]
#[doc = "    \"UNKNOWN_REMOVAL_REASON\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum PullRequestDequeuedReason {
    #[serde(rename = "ALREADY_MERGED")]
    AlreadyMerged,
    #[serde(rename = "BRANCH_PROTECTIONS")]
    BranchProtections,
    #[serde(rename = "CI_FAILURE")]
    CiFailure,
    #[serde(rename = "CI_TIMEOUT")]
    CiTimeout,
    #[serde(rename = "GIT_TREE_INVALID")]
    GitTreeInvalid,
    #[serde(rename = "INVALID_MERGE_COMMIT")]
    InvalidMergeCommit,
    #[serde(rename = "MANUAL")]
    Manual,
    #[serde(rename = "MERGE")]
    Merge,
    #[serde(rename = "MERGE_CONFLICT")]
    MergeConflict,
    #[serde(rename = "QUEUE_CLEARED")]
    QueueCleared,
    #[serde(rename = "ROLL_BACK")]
    RollBack,
    #[serde(rename = "UNKNOWN_REMOVAL_REASON")]
    UnknownRemovalReason,
}
impl From<&PullRequestDequeuedReason> for PullRequestDequeuedReason {
    fn from(value: &PullRequestDequeuedReason) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for PullRequestDequeuedReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::AlreadyMerged => write!(f, "ALREADY_MERGED"),
            Self::BranchProtections => write!(f, "BRANCH_PROTECTIONS"),
            Self::CiFailure => write!(f, "CI_FAILURE"),
            Self::CiTimeout => write!(f, "CI_TIMEOUT"),
            Self::GitTreeInvalid => write!(f, "GIT_TREE_INVALID"),
            Self::InvalidMergeCommit => write!(f, "INVALID_MERGE_COMMIT"),
            Self::Manual => write!(f, "MANUAL"),
            Self::Merge => write!(f, "MERGE"),
            Self::MergeConflict => write!(f, "MERGE_CONFLICT"),
            Self::QueueCleared => write!(f, "QUEUE_CLEARED"),
            Self::RollBack => write!(f, "ROLL_BACK"),
            Self::UnknownRemovalReason => write!(f, "UNKNOWN_REMOVAL_REASON"),
        }
    }
}
impl std::str::FromStr for PullRequestDequeuedReason {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "ALREADY_MERGED" => Ok(Self::AlreadyMerged),
            "BRANCH_PROTECTIONS" => Ok(Self::BranchProtections),
            "CI_FAILURE" => Ok(Self::CiFailure),
            "CI_TIMEOUT" => Ok(Self::CiTimeout),
            "GIT_TREE_INVALID" => Ok(Self::GitTreeInvalid),
            "INVALID_MERGE_COMMIT" => Ok(Self::InvalidMergeCommit),
            "MANUAL" => Ok(Self::Manual),
            "MERGE" => Ok(Self::Merge),
            "MERGE_CONFLICT" => Ok(Self::MergeConflict),
            "QUEUE_CLEARED" => Ok(Self::QueueCleared),
            "ROLL_BACK" => Ok(Self::RollBack),
            "UNKNOWN_REMOVAL_REASON" => Ok(Self::UnknownRemovalReason),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestDequeuedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestDequeuedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestDequeuedReason {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The changes to the comment if the action was <code>edited</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestEditedChanges\","]
#[doc = "  \"description\": \"<p>The changes to the comment if the action was <code>edited</code>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestEditedChangesBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub base: Option<PullRequestEditedChangesBase>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<DiscussionEditedChangesBody>,
}
impl From<&PullRequestEditedChanges> for PullRequestEditedChanges {
    fn from(value: &PullRequestEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestEditedChangesBase\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"ref\","]
#[doc = "    \"sha\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"ref\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestEditedChangesBase {
    #[serde(rename = "ref")]
    pub ref_: DiscussionEditedChangesBody,
    pub sha: DiscussionEditedChangesBody,
}
impl From<&PullRequestEditedChangesBase> for PullRequestEditedChangesBase {
    fn from(value: &PullRequestEditedChangesBase) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestLabeledPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewSubmittedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestLabeledPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestLabeledPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewSubmittedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<MilestoneClosedMilestoneCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestLabeledPullRequest> for PullRequestLabeledPullRequest {
    fn from(value: &PullRequestLabeledPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestLockedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewSubmittedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestLockedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestLockedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewSubmittedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<MilestoneClosedMilestoneCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestLockedPullRequest> for PullRequestLockedPullRequest {
    fn from(value: &PullRequestLockedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReview"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"pull_request_review\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewDismissed\","]
#[doc = "      \"description\": \"<p>A review on a pull request was dismissed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"review\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewDismissedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"dismissed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewDismissedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"review\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewDismissedReview\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewEdited\","]
#[doc = "      \"description\": \"<p>The body comment on a pull request review was edited.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"review\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewEditedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"review\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewEditedReview\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewSubmitted\","]
#[doc = "      \"description\": \"<p>A review on a pull request was submitted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"review\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewSubmittedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"submitted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewSubmittedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"review\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewEditedReview\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum PullRequestReview {
    #[doc = "PullRequestReviewDismissed\n\n<p>A review on a pull request was dismissed.</p>"]
    #[serde(rename = "dismissed")]
    Dismissed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewDismissedPullRequest,
        repository: SomethingWithAnId,
        review: PullRequestReviewDismissedReview,
        sender: Untyped,
    },
    #[doc = "PullRequestReviewEdited\n\n<p>The body comment on a pull request review was edited.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: IssueCommentEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewEditedPullRequest,
        repository: SomethingWithAnId,
        review: PullRequestReviewEditedReview,
        sender: Untyped,
    },
    #[doc = "PullRequestReviewSubmitted\n\n<p>A review on a pull request was submitted.</p>"]
    #[serde(rename = "submitted")]
    Submitted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewSubmittedPullRequest,
        repository: SomethingWithAnId,
        review: PullRequestReviewEditedReview,
        sender: Untyped,
    },
}
impl From<&PullRequestReview> for PullRequestReview {
    fn from(value: &PullRequestReview) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewComment"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"pull_request_review_comment\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreated\","]
#[doc = "      \"description\": \"<p>A comment on a pull request diff was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"comment\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewCommentCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedComment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeleted\","]
#[doc = "      \"description\": \"<p>A comment on a pull request diff was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"comment\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewCommentDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentDeletedComment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentDeletedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEdited\","]
#[doc = "      \"description\": \"<p>The content of a comment on a pull request diff was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"comment\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewCommentEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentDeletedComment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentEditedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum PullRequestReviewComment {
    #[doc = "PullRequestReviewCommentCreated\n\n<p>A comment on a pull request diff was created.</p>"]
    #[serde(rename = "created")]
    Created {
        comment: PullRequestReviewCommentCreatedComment,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewCommentCreatedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestReviewCommentDeleted\n\n<p>A comment on a pull request diff was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        comment: PullRequestReviewCommentDeletedComment,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewCommentDeletedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "PullRequestReviewCommentEdited\n\n<p>The content of a comment on a pull request diff was changed.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: IssueCommentEditedChanges,
        comment: PullRequestReviewCommentDeletedComment,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewCommentEditedPullRequest,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&PullRequestReviewComment> for PullRequestReviewComment {
    fn from(value: &PullRequestReviewComment) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request\">comment</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedComment\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request\\\">comment</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"commit_id\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_hunk\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"line\","]
#[doc = "    \"node_id\","]
#[doc = "    \"original_commit_id\","]
#[doc = "    \"original_line\","]
#[doc = "    \"original_position\","]
#[doc = "    \"original_start_line\","]
#[doc = "    \"path\","]
#[doc = "    \"position\","]
#[doc = "    \"pull_request_review_id\","]
#[doc = "    \"pull_request_url\","]
#[doc = "    \"reactions\","]
#[doc = "    \"side\","]
#[doc = "    \"start_line\","]
#[doc = "    \"start_side\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentLinks\""]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentBody\","]
#[doc = "      \"description\": \"<p>The text of the comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commit_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentCommitId\","]
#[doc = "      \"description\": \"<p>The SHA of the commit to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_hunk\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentDiffHunk\","]
#[doc = "      \"description\": \"<p>The diff of the line that the comment refers to.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentHtmlUrl\","]
#[doc = "      \"description\": \"<p>HTML URL for the pull request review comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentId\","]
#[doc = "      \"description\": \"<p>The ID of the pull request review comment.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"in_reply_to_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentInReplyToId\","]
#[doc = "      \"description\": \"<p>The comment ID to reply to.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"line\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentLine\","]
#[doc = "      \"description\": \"<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentNodeId\","]
#[doc = "      \"description\": \"<p>The node ID of the pull request review comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_commit_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentOriginalCommitId\","]
#[doc = "      \"description\": \"<p>The SHA of the original commit to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentOriginalLine\","]
#[doc = "      \"description\": \"<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"original_position\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentOriginalPosition\","]
#[doc = "      \"description\": \"<p>The index of the original line in the diff to which the comment applies.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"original_start_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentOriginalStartLine\","]
#[doc = "      \"description\": \"<p>The first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentPath\","]
#[doc = "      \"description\": \"<p>The relative path of the file to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"position\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentPosition\","]
#[doc = "      \"description\": \"<p>The line index in the diff to which the comment applies.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request_review_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentPullRequestReviewId\","]
#[doc = "      \"description\": \"<p>The ID of the pull request review to which the comment belongs.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentPullRequestUrl\","]
#[doc = "      \"description\": \"<p>URL for the pull request that the review comment belongs to.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"side\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentSide\""]
#[doc = "    },"]
#[doc = "    \"start_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentStartLine\","]
#[doc = "      \"description\": \"<p>The first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"start_side\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentStartSide\","]
#[doc = "      \"description\": \"<p>The side of the first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentStartSide\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"subject_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentSubjectType\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentUrl\","]
#[doc = "      \"description\": \"<p>URL for the pull request review comment</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedCommentUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedComment {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The text of the comment.</p>"]
    pub body: String,
    #[doc = "<p>The SHA of the commit to which the comment applies.</p>"]
    pub commit_id: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The diff of the line that the comment refers to.</p>"]
    pub diff_hunk: String,
    #[doc = "<p>HTML URL for the pull request review comment.</p>"]
    pub html_url: String,
    #[doc = "<p>The ID of the pull request review comment.</p>"]
    pub id: i64,
    #[doc = "<p>The comment ID to reply to.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_reply_to_id: Option<i64>,
    #[doc = "<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>"]
    pub line: Option<i64>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedCommentLinks,
    #[doc = "<p>The node ID of the pull request review comment.</p>"]
    pub node_id: String,
    #[doc = "<p>The SHA of the original commit to which the comment applies.</p>"]
    pub original_commit_id: String,
    #[doc = "<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>"]
    pub original_line: Option<i64>,
    #[doc = "<p>The index of the original line in the diff to which the comment applies.</p>"]
    pub original_position: i64,
    #[doc = "<p>The first line of the range for a multi-line comment.</p>"]
    pub original_start_line: Option<i64>,
    #[doc = "<p>The relative path of the file to which the comment applies.</p>"]
    pub path: String,
    #[doc = "<p>The line index in the diff to which the comment applies.</p>"]
    pub position: Option<i64>,
    #[doc = "<p>The ID of the pull request review to which the comment belongs.</p>"]
    pub pull_request_review_id: Option<i64>,
    #[doc = "<p>URL for the pull request that the review comment belongs to.</p>"]
    pub pull_request_url: String,
    pub reactions: DiscussionAnsweredAnswerReactions,
    pub side: PullRequestReviewCommentCreatedCommentSide,
    #[doc = "<p>The first line of the range for a multi-line comment.</p>"]
    pub start_line: Option<i64>,
    #[doc = "<p>The side of the first line of the range for a multi-line comment.</p>"]
    pub start_side: Option<PullRequestReviewCommentCreatedCommentStartSide>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject_type: Option<PullRequestReviewCommentCreatedCommentSubjectType>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the pull request review comment</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewCommentCreatedComment> for PullRequestReviewCommentCreatedComment {
    fn from(value: &PullRequestReviewCommentCreatedComment) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedCommentLinks\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"html\","]
#[doc = "    \"pull_request\","]
#[doc = "    \"self\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"html\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"self\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedCommentLinks {
    pub html: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub pull_request: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    #[serde(rename = "self")]
    pub self_: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
}
impl From<&PullRequestReviewCommentCreatedCommentLinks>
    for PullRequestReviewCommentCreatedCommentLinks
{
    fn from(value: &PullRequestReviewCommentCreatedCommentLinks) -> Self {
        value.clone()
    }
}
#[doc = "<p>The side of the first line of the range for a multi-line comment.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedCommentSide\","]
#[doc = "  \"description\": \"<p>The side of the first line of the range for a multi-line comment.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"LEFT\","]
#[doc = "    \"RIGHT\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum PullRequestReviewCommentCreatedCommentSide {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
}
impl From<&PullRequestReviewCommentCreatedCommentSide>
    for PullRequestReviewCommentCreatedCommentSide
{
    fn from(value: &PullRequestReviewCommentCreatedCommentSide) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for PullRequestReviewCommentCreatedCommentSide {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Left => write!(f, "LEFT"),
            Self::Right => write!(f, "RIGHT"),
        }
    }
}
impl std::str::FromStr for PullRequestReviewCommentCreatedCommentSide {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "LEFT" => Ok(Self::Left),
            "RIGHT" => Ok(Self::Right),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewCommentCreatedCommentSide {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestReviewCommentCreatedCommentSide {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewCommentCreatedCommentSide {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "PullRequestReviewCommentCreatedCommentStartSide"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"default\": \"RIGHT\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"LEFT\","]
#[doc = "    \"RIGHT\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum PullRequestReviewCommentCreatedCommentStartSide {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
}
impl From<&PullRequestReviewCommentCreatedCommentStartSide>
    for PullRequestReviewCommentCreatedCommentStartSide
{
    fn from(value: &PullRequestReviewCommentCreatedCommentStartSide) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for PullRequestReviewCommentCreatedCommentStartSide {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Left => write!(f, "LEFT"),
            Self::Right => write!(f, "RIGHT"),
        }
    }
}
impl std::str::FromStr for PullRequestReviewCommentCreatedCommentStartSide {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "LEFT" => Ok(Self::Left),
            "RIGHT" => Ok(Self::Right),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewCommentCreatedCommentStartSide {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestReviewCommentCreatedCommentStartSide {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewCommentCreatedCommentStartSide {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl Default for PullRequestReviewCommentCreatedCommentStartSide {
    fn default() -> Self {
        PullRequestReviewCommentCreatedCommentStartSide::Right
    }
}
#[doc = "<p>The level at which the comment is targeted, can be a diff line or a file.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedCommentSubjectType\","]
#[doc = "  \"description\": \"<p>The level at which the comment is targeted, can be a diff line or a file.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"file\","]
#[doc = "    \"line\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum PullRequestReviewCommentCreatedCommentSubjectType {
    #[serde(rename = "file")]
    File,
    #[serde(rename = "line")]
    Line,
}
impl From<&PullRequestReviewCommentCreatedCommentSubjectType>
    for PullRequestReviewCommentCreatedCommentSubjectType
{
    fn from(value: &PullRequestReviewCommentCreatedCommentSubjectType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for PullRequestReviewCommentCreatedCommentSubjectType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::File => write!(f, "file"),
            Self::Line => write!(f, "line"),
        }
    }
}
impl std::str::FromStr for PullRequestReviewCommentCreatedCommentSubjectType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "file" => Ok(Self::File),
            "line" => Ok(Self::Line),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewCommentCreatedCommentSubjectType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestReviewCommentCreatedCommentSubjectType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewCommentCreatedCommentSubjectType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub diff_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommentCreatedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewCommentCreatedPullRequest>
    for PullRequestReviewCommentCreatedPullRequest
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewCommentCreatedPullRequestAutoMerge"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"commit_message\","]
#[doc = "    \"commit_title\","]
#[doc = "    \"enabled_by\","]
#[doc = "    \"merge_method\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"commit_message\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestAutoMergeCommitMessage\","]
#[doc = "      \"description\": \"<p>Commit message for the merge commit.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"commit_title\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestAutoMergeCommitTitle\","]
#[doc = "      \"description\": \"<p>Title for the merge commit message.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"enabled_by\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestAutoMergeEnabledBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merge_method\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestAutoMerge {
    #[doc = "<p>Commit message for the merge commit.</p>"]
    pub commit_message: Option<String>,
    #[doc = "<p>Title for the merge commit message.</p>"]
    pub commit_title: Option<String>,
    #[doc = ""]
    pub enabled_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    pub merge_method: DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod,
}
impl From<&PullRequestReviewCommentCreatedPullRequestAutoMerge>
    for PullRequestReviewCommentCreatedPullRequestAutoMerge
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestAutoMerge) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedPullRequestBase\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepo\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestBase {
    #[doc = ""]
    pub label: String,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repo: PullRequestReviewCommentCreatedPullRequestBaseRepo,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewCommentCreatedPullRequestBase>
    for PullRequestReviewCommentCreatedPullRequestBase
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestBase) -> Self {
        value.clone()
    }
}
#[doc = "<p>A git repository</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepo\","]
#[doc = "  \"description\": \"<p>A git repository</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_discussions\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"topics\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"visibility\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow auto-merge for pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoAllowForking\","]
#[doc = "      \"description\": \"<p>Whether to allow private forks</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoAllowUpdateBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoDisabled\","]
#[doc = "      \"description\": \"<p>Returns whether or not this repository is disabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_discussions\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHasDiscussions\","]
#[doc = "      \"description\": \"<p>Whether discussions are enabled.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoLicense\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoOrganization\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"public\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPublic\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoRoleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoSize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_message\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage\""]
#[doc = "    },"]
#[doc = "    \"squash_merge_commit_title\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoSshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoStargazers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoSubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoSubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoSvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"use_squash_pr_title_as_default\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoUseSquashPrTitleAsDefault\","]
#[doc = "      \"description\": \"<p>Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"<p>Whether to require contributors to sign off on web-based commits</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestBaseRepo {
    #[doc = "<p>Whether to allow auto-merge for pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow private forks</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Returns whether or not this repository is disabled.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether discussions are enabled.</p>"]
    pub has_discussions: bool,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub license: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoLicense>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositoryMergeCommitTitle>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[doc = ""]
    pub size: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_message:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitMessage>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub squash_merge_commit_title:
        Option<DiscussionTransferredChangesNewRepositoryTemplateRepositorySquashMergeCommitTitle>,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers: Option<i64>,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use <code>squash_merge_commit_title</code> instead.</p>"]
    #[serde(default)]
    pub use_squash_pr_title_as_default: bool,
    pub visibility: PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
    #[doc = "<p>Whether to require contributors to sign off on web-based commits</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web_commit_signoff_required: Option<bool>,
}
impl From<&PullRequestReviewCommentCreatedPullRequestBaseRepo>
    for PullRequestReviewCommentCreatedPullRequestBaseRepo
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestBaseRepo) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt>
    for PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "PullRequestReviewCommentCreatedPullRequestBaseRepoLicense"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"key\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"spdx_id\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"key\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLicenseKey\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLicenseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLicenseNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"spdx_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLicenseSpdxId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoLicenseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestBaseRepoLicense {
    #[doc = ""]
    pub key: String,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub spdx_id: String,
    #[doc = ""]
    pub url: Option<String>,
}
impl From<&PullRequestReviewCommentCreatedPullRequestBaseRepoLicense>
    for PullRequestReviewCommentCreatedPullRequestBaseRepoLicense
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestBaseRepoLicense) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"admin\","]
#[doc = "    \"pull\","]
#[doc = "    \"push\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"admin\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPermissionsAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintain\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPermissionsMaintain\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pull\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPermissionsPull\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"push\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPermissionsPush\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"triage\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoPermissionsTriage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions {
    #[doc = ""]
    pub admin: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintain: Option<bool>,
    #[doc = ""]
    pub pull: bool,
    #[doc = ""]
    pub push: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub triage: Option<bool>,
}
impl From<&PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions>
    for PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt>
    for PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"internal\","]
#[doc = "    \"private\","]
#[doc = "    \"public\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility {
    #[serde(rename = "internal")]
    Internal,
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "public")]
    Public,
}
impl From<&PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility>
    for PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Internal => write!(f, "internal"),
            Self::Private => write!(f, "private"),
            Self::Public => write!(f, "public"),
        }
    }
}
impl std::str::FromStr for PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "internal" => Ok(Self::Internal),
            "private" => Ok(Self::Private),
            "public" => Ok(Self::Public),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedPullRequestHead\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestHeadLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestHeadRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestHeadRepo\","]
#[doc = "      \"description\": \"<p>A git repository</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepo\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestHeadUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestHead {
    #[doc = ""]
    pub label: String,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    #[doc = "<p>A git repository</p>"]
    pub repo: Option<PullRequestReviewCommentCreatedPullRequestBaseRepo>,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewCommentCreatedPullRequestHead>
    for PullRequestReviewCommentCreatedPullRequestHead
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestHead) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentCreatedPullRequestLinks\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"comments\","]
#[doc = "    \"commits\","]
#[doc = "    \"html\","]
#[doc = "    \"issue\","]
#[doc = "    \"review_comment\","]
#[doc = "    \"review_comments\","]
#[doc = "    \"self\","]
#[doc = "    \"statuses\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"comments\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"html\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"issue\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"review_comment\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"self\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"statuses\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestLinks {
    pub comments: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub commits: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub html: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub issue: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub review_comment: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub review_comments: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    #[serde(rename = "self")]
    pub self_: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub statuses: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
}
impl From<&PullRequestReviewCommentCreatedPullRequestLinks>
    for PullRequestReviewCommentCreatedPullRequestLinks
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestLinks) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewCommentCreatedPullRequestRequestedTeams"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsDescription\","]
#[doc = "      \"description\": \"<p>Description of the team</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the team</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"members_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsName\","]
#[doc = "      \"description\": \"<p>Name of the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parent\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeamsParent\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permission\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsPermission\","]
#[doc = "      \"description\": \"<p>Permission that the team will have for its repositories</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"privacy\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamAddDefaultTeamParentPrivacy\""]
#[doc = "    },"]
#[doc = "    \"repositories_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsRepositoriesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsSlug\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsUrl\","]
#[doc = "      \"description\": \"<p>URL for the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestRequestedTeams {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[doc = "<p>Description of the team</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = "<p>Unique identifier of the team</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members_url: Option<String>,
    #[doc = "<p>Name of the team</p>"]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<PullRequestReviewCommentCreatedPullRequestRequestedTeamsParent>,
    #[doc = "<p>Permission that the team will have for its repositories</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privacy: Option<TeamAddDefaultTeamParentPrivacy>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[doc = "<p>URL for the team</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&PullRequestReviewCommentCreatedPullRequestRequestedTeams>
    for PullRequestReviewCommentCreatedPullRequestRequestedTeams
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestRequestedTeams) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewCommentCreatedPullRequestRequestedTeamsParent"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"members_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"permission\","]
#[doc = "    \"privacy\","]
#[doc = "    \"repositories_url\","]
#[doc = "    \"slug\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentDescription\","]
#[doc = "      \"description\": \"<p>Description of the team</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the team</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"members_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentName\","]
#[doc = "      \"description\": \"<p>Name of the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"permission\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentPermission\","]
#[doc = "      \"description\": \"<p>Permission that the team will have for its repositories</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"privacy\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamAddDefaultTeamParentPrivacy\""]
#[doc = "    },"]
#[doc = "    \"repositories_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentRepositoriesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentSlug\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentCreatedPullRequestRequestedTeamsParentUrl\","]
#[doc = "      \"description\": \"<p>URL for the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentCreatedPullRequestRequestedTeamsParent {
    #[doc = "<p>Description of the team</p>"]
    pub description: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the team</p>"]
    pub id: i64,
    #[doc = ""]
    pub members_url: String,
    #[doc = "<p>Name of the team</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Permission that the team will have for its repositories</p>"]
    pub permission: String,
    pub privacy: TeamAddDefaultTeamParentPrivacy,
    #[doc = ""]
    pub repositories_url: String,
    #[doc = ""]
    pub slug: String,
    #[doc = "<p>URL for the team</p>"]
    pub url: String,
}
impl From<&PullRequestReviewCommentCreatedPullRequestRequestedTeamsParent>
    for PullRequestReviewCommentCreatedPullRequestRequestedTeamsParent
{
    fn from(value: &PullRequestReviewCommentCreatedPullRequestRequestedTeamsParent) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request\">comment</a> itself.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentDeletedComment\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request\\\">comment</a> itself.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"commit_id\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_hunk\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"line\","]
#[doc = "    \"node_id\","]
#[doc = "    \"original_commit_id\","]
#[doc = "    \"original_line\","]
#[doc = "    \"original_position\","]
#[doc = "    \"original_start_line\","]
#[doc = "    \"path\","]
#[doc = "    \"position\","]
#[doc = "    \"pull_request_review_id\","]
#[doc = "    \"pull_request_url\","]
#[doc = "    \"reactions\","]
#[doc = "    \"side\","]
#[doc = "    \"start_line\","]
#[doc = "    \"start_side\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentLinks\""]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentBody\","]
#[doc = "      \"description\": \"<p>The text of the comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commit_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentCommitId\","]
#[doc = "      \"description\": \"<p>The SHA of the commit to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_hunk\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentDiffHunk\","]
#[doc = "      \"description\": \"<p>The diff of the line that the comment refers to.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentHtmlUrl\","]
#[doc = "      \"description\": \"<p>HTML URL for the pull request review comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentId\","]
#[doc = "      \"description\": \"<p>The ID of the pull request review comment.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"in_reply_to_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentInReplyToId\","]
#[doc = "      \"description\": \"<p>The comment ID to reply to.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"line\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentLine\","]
#[doc = "      \"description\": \"<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentNodeId\","]
#[doc = "      \"description\": \"<p>The node ID of the pull request review comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_commit_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentOriginalCommitId\","]
#[doc = "      \"description\": \"<p>The SHA of the original commit to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentOriginalLine\","]
#[doc = "      \"description\": \"<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"original_position\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentOriginalPosition\","]
#[doc = "      \"description\": \"<p>The index of the original line in the diff to which the comment applies.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"original_start_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentOriginalStartLine\","]
#[doc = "      \"description\": \"<p>The first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentPath\","]
#[doc = "      \"description\": \"<p>The relative path of the file to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"position\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentPosition\","]
#[doc = "      \"description\": \"<p>The line index in the diff to which the comment applies.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request_review_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentPullRequestReviewId\","]
#[doc = "      \"description\": \"<p>The ID of the pull request review to which the comment belongs.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentPullRequestUrl\","]
#[doc = "      \"description\": \"<p>URL for the pull request that the review comment belongs to.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"side\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentSide\""]
#[doc = "    },"]
#[doc = "    \"start_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentStartLine\","]
#[doc = "      \"description\": \"<p>The first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"start_side\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentStartSide\","]
#[doc = "      \"description\": \"<p>The side of the first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentStartSide\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"subject_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentSubjectType\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentUrl\","]
#[doc = "      \"description\": \"<p>URL for the pull request review comment</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedCommentUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentDeletedComment {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The text of the comment.</p>"]
    pub body: String,
    #[doc = "<p>The SHA of the commit to which the comment applies.</p>"]
    pub commit_id: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The diff of the line that the comment refers to.</p>"]
    pub diff_hunk: String,
    #[doc = "<p>HTML URL for the pull request review comment.</p>"]
    pub html_url: String,
    #[doc = "<p>The ID of the pull request review comment.</p>"]
    pub id: i64,
    #[doc = "<p>The comment ID to reply to.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_reply_to_id: Option<i64>,
    #[doc = "<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>"]
    pub line: Option<i64>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedCommentLinks,
    #[doc = "<p>The node ID of the pull request review comment.</p>"]
    pub node_id: String,
    #[doc = "<p>The SHA of the original commit to which the comment applies.</p>"]
    pub original_commit_id: String,
    #[doc = "<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>"]
    pub original_line: i64,
    #[doc = "<p>The index of the original line in the diff to which the comment applies.</p>"]
    pub original_position: i64,
    #[doc = "<p>The first line of the range for a multi-line comment.</p>"]
    pub original_start_line: Option<i64>,
    #[doc = "<p>The relative path of the file to which the comment applies.</p>"]
    pub path: String,
    #[doc = "<p>The line index in the diff to which the comment applies.</p>"]
    pub position: Option<i64>,
    #[doc = "<p>The ID of the pull request review to which the comment belongs.</p>"]
    pub pull_request_review_id: Option<i64>,
    #[doc = "<p>URL for the pull request that the review comment belongs to.</p>"]
    pub pull_request_url: String,
    pub reactions: DiscussionAnsweredAnswerReactions,
    pub side: PullRequestReviewCommentCreatedCommentSide,
    #[doc = "<p>The first line of the range for a multi-line comment.</p>"]
    pub start_line: Option<i64>,
    #[doc = "<p>The side of the first line of the range for a multi-line comment.</p>"]
    pub start_side: Option<PullRequestReviewCommentCreatedCommentStartSide>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject_type: Option<PullRequestReviewCommentCreatedCommentSubjectType>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the pull request review comment</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewCommentDeletedComment> for PullRequestReviewCommentDeletedComment {
    fn from(value: &PullRequestReviewCommentDeletedComment) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentDeletedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentDeletedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentDeletedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub diff_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommentCreatedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewCommentDeletedPullRequest>
    for PullRequestReviewCommentDeletedPullRequest
{
    fn from(value: &PullRequestReviewCommentDeletedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewCommentEditedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentEditedPullRequestUser\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentEditedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub diff_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    pub head: PullRequestReviewCommentCreatedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<PullRequestReviewCommentEditedPullRequestUser>,
}
impl From<&PullRequestReviewCommentEditedPullRequest>
    for PullRequestReviewCommentEditedPullRequest
{
    fn from(value: &PullRequestReviewCommentEditedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewCommentEditedPullRequestUser"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"login\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserEmail\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"followers_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserFollowersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"following_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserFollowingUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gists_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserGistsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"gravatar_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserGravatarId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organizations_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserOrganizationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"received_events_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserReceivedEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"site_admin\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserSiteAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"starred_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserStarredUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscriptions_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserSubscriptionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreatorType\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user_view_type\": {"]
#[doc = "      \"title\": \"PullRequestReviewCommentEditedPullRequestUserUserViewType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewCommentEditedPullRequestUser {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub followers_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub following_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gists_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub login: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organizations_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub received_events_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repos_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub site_admin: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub starred_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriptions_url: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<MilestoneClosedMilestoneCreatorType>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_view_type: Option<String>,
}
impl From<&PullRequestReviewCommentEditedPullRequestUser>
    for PullRequestReviewCommentEditedPullRequestUser
{
    fn from(value: &PullRequestReviewCommentEditedPullRequestUser) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewDismissedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewDismissedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub diff_url: String,
    #[doc = ""]
    pub draft: bool,
    pub head: PullRequestReviewCommentCreatedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewDismissedPullRequest> for PullRequestReviewDismissedPullRequest {
    fn from(value: &PullRequestReviewDismissedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = "<p>The review that was affected.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewDismissedReview\","]
#[doc = "  \"description\": \"<p>The review that was affected.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"commit_id\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"pull_request_url\","]
#[doc = "    \"state\","]
#[doc = "    \"submitted_at\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewDismissedReviewLinks\""]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewBody\","]
#[doc = "      \"description\": \"<p>The text of the review.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"commit_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewCommitId\","]
#[doc = "      \"description\": \"<p>A commit SHA for the review.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the review</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pull_request_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"approved\","]
#[doc = "        \"changes_requested\","]
#[doc = "        \"dismissed\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"submitted_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewSubmittedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewDismissedReviewUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewDismissedReview {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The text of the review.</p>"]
    pub body: Option<String>,
    #[doc = "<p>A commit SHA for the review.</p>"]
    pub commit_id: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the review</p>"]
    pub id: i64,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewDismissedReviewLinks,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub pull_request_url: String,
    #[doc = ""]
    pub state: PullRequestReviewDismissedReviewState,
    #[doc = ""]
    pub submitted_at: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewDismissedReview> for PullRequestReviewDismissedReview {
    fn from(value: &PullRequestReviewDismissedReview) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewDismissedReviewLinks\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"html\","]
#[doc = "    \"pull_request\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"html\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewDismissedReviewLinks {
    pub html: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
    pub pull_request: RepositoryRulesetCreatedRepositoryRulesetLinksSelf,
}
impl From<&PullRequestReviewDismissedReviewLinks> for PullRequestReviewDismissedReviewLinks {
    fn from(value: &PullRequestReviewDismissedReviewLinks) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewDismissedReviewState\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"approved\","]
#[doc = "    \"changes_requested\","]
#[doc = "    \"dismissed\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum PullRequestReviewDismissedReviewState {
    #[serde(rename = "approved")]
    Approved,
    #[serde(rename = "changes_requested")]
    ChangesRequested,
    #[serde(rename = "dismissed")]
    Dismissed,
}
impl From<&PullRequestReviewDismissedReviewState> for PullRequestReviewDismissedReviewState {
    fn from(value: &PullRequestReviewDismissedReviewState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for PullRequestReviewDismissedReviewState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Approved => write!(f, "approved"),
            Self::ChangesRequested => write!(f, "changes_requested"),
            Self::Dismissed => write!(f, "dismissed"),
        }
    }
}
impl std::str::FromStr for PullRequestReviewDismissedReviewState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "approved" => Ok(Self::Approved),
            "changes_requested" => Ok(Self::ChangesRequested),
            "dismissed" => Ok(Self::Dismissed),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewDismissedReviewState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestReviewDismissedReviewState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewDismissedReviewState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewEditedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewEditedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewEditedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewEditedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewEditedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub diff_url: String,
    #[doc = ""]
    pub draft: bool,
    pub head: PullRequestReviewEditedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewEditedPullRequest> for PullRequestReviewEditedPullRequest {
    fn from(value: &PullRequestReviewEditedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewEditedPullRequestBase\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewEditedPullRequestBaseRepo\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewEditedPullRequestBase {
    #[doc = ""]
    pub label: String,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repo: PullRequestReviewEditedPullRequestBaseRepo,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewEditedPullRequestBase> for PullRequestReviewEditedPullRequestBase {
    fn from(value: &PullRequestReviewEditedPullRequestBase) -> Self {
        value.clone()
    }
}
#[doc = "<p>A git repository</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewEditedPullRequestBaseRepo\","]
#[doc = "  \"description\": \"<p>A git repository</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"topics\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"visibility\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow auto-merge for pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoAllowForking\","]
#[doc = "      \"description\": \"<p>Whether to allow private forks</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoAllowUpdateBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoDisabled\","]
#[doc = "      \"description\": \"<p>Returns whether or not this repository is disabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoLicense\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoOrganization\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"public\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoPublic\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoRoleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoSize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoSshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoStargazers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoSubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoSubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoSvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestBaseRepoWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewEditedPullRequestBaseRepo {
    #[doc = "<p>Whether to allow auto-merge for pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow private forks</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: PullRequestReviewEditedPullRequestBaseRepoCreatedAt,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Returns whether or not this repository is disabled.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub license: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoLicense>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<PullRequestReviewEditedPullRequestBaseRepoPushedAt>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[doc = ""]
    pub size: i64,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers: Option<i64>,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    pub visibility: PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
}
impl From<&PullRequestReviewEditedPullRequestBaseRepo>
    for PullRequestReviewEditedPullRequestBaseRepo
{
    fn from(value: &PullRequestReviewEditedPullRequestBaseRepo) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewEditedPullRequestBaseRepoCreatedAt\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PullRequestReviewEditedPullRequestBaseRepoCreatedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&PullRequestReviewEditedPullRequestBaseRepoCreatedAt>
    for PullRequestReviewEditedPullRequestBaseRepoCreatedAt
{
    fn from(value: &PullRequestReviewEditedPullRequestBaseRepoCreatedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PullRequestReviewEditedPullRequestBaseRepoCreatedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewEditedPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestReviewEditedPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewEditedPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PullRequestReviewEditedPullRequestBaseRepoCreatedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PullRequestReviewEditedPullRequestBaseRepoCreatedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "PullRequestReviewEditedPullRequestBaseRepoPushedAt"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PullRequestReviewEditedPullRequestBaseRepoPushedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&PullRequestReviewEditedPullRequestBaseRepoPushedAt>
    for PullRequestReviewEditedPullRequestBaseRepoPushedAt
{
    fn from(value: &PullRequestReviewEditedPullRequestBaseRepoPushedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PullRequestReviewEditedPullRequestBaseRepoPushedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewEditedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestReviewEditedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewEditedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PullRequestReviewEditedPullRequestBaseRepoPushedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PullRequestReviewEditedPullRequestBaseRepoPushedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewEditedPullRequestHead\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestHeadLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestHeadRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestHeadRepo\","]
#[doc = "      \"description\": \"<p>A git repository</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewEditedPullRequestBaseRepo\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedPullRequestHeadUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewEditedPullRequestHead {
    #[doc = ""]
    pub label: String,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    #[doc = "<p>A git repository</p>"]
    pub repo: Option<PullRequestReviewEditedPullRequestBaseRepo>,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewEditedPullRequestHead> for PullRequestReviewEditedPullRequestHead {
    fn from(value: &PullRequestReviewEditedPullRequestHead) -> Self {
        value.clone()
    }
}
#[doc = "<p>The review that was affected.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewEditedReview\","]
#[doc = "  \"description\": \"<p>The review that was affected.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"commit_id\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"node_id\","]
#[doc = "    \"pull_request_url\","]
#[doc = "    \"state\","]
#[doc = "    \"submitted_at\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewDismissedReviewLinks\""]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewBody\","]
#[doc = "      \"description\": \"<p>The text of the review.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"commit_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewCommitId\","]
#[doc = "      \"description\": \"<p>A commit SHA for the review.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the review</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pull_request_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"submitted_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewSubmittedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewEditedReviewUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewEditedReview {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The text of the review.</p>"]
    pub body: Option<String>,
    #[doc = "<p>A commit SHA for the review.</p>"]
    pub commit_id: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the review</p>"]
    pub id: i64,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewDismissedReviewLinks,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub pull_request_url: String,
    #[doc = ""]
    pub state: String,
    #[doc = ""]
    pub submitted_at: Option<String>,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewEditedReview> for PullRequestReviewEditedReview {
    fn from(value: &PullRequestReviewEditedReview) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewRequestRemovedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestRemovedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewRequestRemovedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewRequestRemovedPullRequest>
    for PullRequestReviewRequestRemovedPullRequest
{
    fn from(value: &PullRequestReviewRequestRemovedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewRequestedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewRequestedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewRequestedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewRequestedPullRequest> for PullRequestReviewRequestedPullRequest {
    fn from(value: &PullRequestReviewRequestedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewSubmittedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewSubmittedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewSubmittedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub diff_url: String,
    #[doc = ""]
    pub draft: bool,
    pub head: PullRequestReviewSubmittedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewSubmittedPullRequest> for PullRequestReviewSubmittedPullRequest {
    fn from(value: &PullRequestReviewSubmittedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewSubmittedPullRequestHead\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestHeadLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestHeadRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestHeadRepo\","]
#[doc = "      \"description\": \"<p>A git repository</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepo\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewSubmittedPullRequestHeadUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewSubmittedPullRequestHead {
    #[doc = ""]
    pub label: Option<String>,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    #[doc = "<p>A git repository</p>"]
    pub repo: Option<PullRequestReviewCommentCreatedPullRequestBaseRepo>,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewSubmittedPullRequestHead>
    for PullRequestReviewSubmittedPullRequestHead
{
    fn from(value: &PullRequestReviewSubmittedPullRequestHead) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewThread"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"pull_request_review_thread\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolved\","]
#[doc = "      \"description\": \"<p>A comment thread on a pull request was marked as resolved.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"thread\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewThreadResolvedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"resolved\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"thread\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedThread\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolved\","]
#[doc = "      \"description\": \"<p>A previously resolved comment thread on a pull request was marked as unresolved.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"pull_request\","]
#[doc = "        \"repository\","]
#[doc = "        \"thread\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"PullRequestReviewThreadUnresolvedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unresolved\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewThreadUnresolvedPullRequest\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"thread\": {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewThreadUnresolvedThread\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum PullRequestReviewThread {
    #[doc = "PullRequestReviewThreadResolved\n\n<p>A comment thread on a pull request was marked as resolved.</p>"]
    #[serde(rename = "resolved")]
    Resolved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewThreadResolvedPullRequest,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        thread: PullRequestReviewThreadResolvedThread,
    },
    #[doc = "PullRequestReviewThreadUnresolved\n\n<p>A previously resolved comment thread on a pull request was marked as unresolved.</p>"]
    #[serde(rename = "unresolved")]
    Unresolved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        pull_request: PullRequestReviewThreadUnresolvedPullRequest,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        thread: PullRequestReviewThreadUnresolvedThread,
    },
}
impl From<&PullRequestReviewThread> for PullRequestReviewThread {
    fn from(value: &PullRequestReviewThread) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewThreadResolvedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadResolvedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestReviewThreadResolvedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub diff_url: String,
    #[doc = ""]
    pub draft: bool,
    pub head: PullRequestReviewThreadResolvedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewThreadResolvedPullRequest>
    for PullRequestReviewThreadResolvedPullRequest
{
    fn from(value: &PullRequestReviewThreadResolvedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewThreadResolvedPullRequestBase\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedPullRequestBaseRepo\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadResolvedPullRequestBase {
    #[doc = ""]
    pub label: String,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repo: PullRequestReviewThreadResolvedPullRequestBaseRepo,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewThreadResolvedPullRequestBase>
    for PullRequestReviewThreadResolvedPullRequestBase
{
    fn from(value: &PullRequestReviewThreadResolvedPullRequestBase) -> Self {
        value.clone()
    }
}
#[doc = "<p>A git repository</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepo\","]
#[doc = "  \"description\": \"<p>A git repository</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"archived\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"clone_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"default_branch\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks\","]
#[doc = "    \"forks_count\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"git_url\","]
#[doc = "    \"has_discussions\","]
#[doc = "    \"has_downloads\","]
#[doc = "    \"has_issues\","]
#[doc = "    \"has_pages\","]
#[doc = "    \"has_projects\","]
#[doc = "    \"has_wiki\","]
#[doc = "    \"homepage\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"language\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"license\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"mirror_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"open_issues\","]
#[doc = "    \"open_issues_count\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"pushed_at\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"size\","]
#[doc = "    \"ssh_url\","]
#[doc = "    \"stargazers_count\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"svn_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"topics\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"visibility\","]
#[doc = "    \"watchers\","]
#[doc = "    \"watchers_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"allow_auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoAllowAutoMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow auto-merge for pull requests.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_forking\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoAllowForking\","]
#[doc = "      \"description\": \"<p>Whether to allow private forks</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_merge_commit\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoAllowMergeCommit\","]
#[doc = "      \"description\": \"<p>Whether to allow merge commits for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_rebase_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoAllowRebaseMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow rebase merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_squash_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoAllowSquashMerge\","]
#[doc = "      \"description\": \"<p>Whether to allow squash merges for pull requests.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"allow_update_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoAllowUpdateBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"archived\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoArchived\","]
#[doc = "      \"description\": \"<p>Whether the repository is archived.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"clone_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoCloneUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoDefaultBranch\","]
#[doc = "      \"description\": \"<p>The default branch of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"delete_branch_on_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoDeleteBranchOnMerge\","]
#[doc = "      \"description\": \"<p>Whether to delete head branches when pull requests are merged</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"disabled\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoDisabled\","]
#[doc = "      \"description\": \"<p>Returns whether or not this repository is disabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoForks\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoForksCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoGitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_discussions\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHasDiscussions\","]
#[doc = "      \"description\": \"<p>Whether discussions are enabled.</p>\","]
#[doc = "      \"default\": false,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_downloads\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHasDownloads\","]
#[doc = "      \"description\": \"<p>Whether downloads are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_issues\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHasIssues\","]
#[doc = "      \"description\": \"<p>Whether issues are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_pages\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHasPages\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_projects\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHasProjects\","]
#[doc = "      \"description\": \"<p>Whether projects are enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"has_wiki\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHasWiki\","]
#[doc = "      \"description\": \"<p>Whether the wiki is enabled.</p>\","]
#[doc = "      \"default\": true,"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"is_template\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoIsTemplate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"language\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoLanguage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoLicense\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"master_branch\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoMasterBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"mirror_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoMirrorUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"open_issues\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoOpenIssues\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"open_issues_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoOpenIssuesCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoOrganization\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"public\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoPublic\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"pushed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"role_name\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoRoleName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoSize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"ssh_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoSshUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoStargazers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoStargazersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoSubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoSubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"svn_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoSvnUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoTopics\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"visibility\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility\""]
#[doc = "    },"]
#[doc = "    \"watchers\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoWatchers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"watchers_count\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoWatchersCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"web_commit_signoff_required\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoWebCommitSignoffRequired\","]
#[doc = "      \"description\": \"<p>Whether to require contributors to sign off on web-based commits</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadResolvedPullRequestBaseRepo {
    #[doc = "<p>Whether to allow auto-merge for pull requests.</p>"]
    #[serde(default)]
    pub allow_auto_merge: bool,
    #[doc = "<p>Whether to allow private forks</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_forking: Option<bool>,
    #[doc = "<p>Whether to allow merge commits for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_merge_commit: bool,
    #[doc = "<p>Whether to allow rebase merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_rebase_merge: bool,
    #[doc = "<p>Whether to allow squash merges for pull requests.</p>"]
    #[serde(default = "defaults::default_bool::<true>")]
    pub allow_squash_merge: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub allow_update_branch: Option<bool>,
    #[doc = ""]
    pub archive_url: String,
    #[doc = "<p>Whether the repository is archived.</p>"]
    pub archived: bool,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub clone_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub created_at: PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt,
    #[doc = "<p>The default branch of the repository.</p>"]
    pub default_branch: String,
    #[doc = "<p>Whether to delete head branches when pull requests are merged</p>"]
    #[serde(default)]
    pub delete_branch_on_merge: bool,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = "<p>Returns whether or not this repository is disabled.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks: i64,
    #[doc = ""]
    pub forks_count: i64,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub git_url: String,
    #[doc = "<p>Whether discussions are enabled.</p>"]
    pub has_discussions: bool,
    #[doc = "<p>Whether downloads are enabled.</p>"]
    pub has_downloads: bool,
    #[doc = "<p>Whether issues are enabled.</p>"]
    pub has_issues: bool,
    #[doc = ""]
    pub has_pages: bool,
    #[doc = "<p>Whether projects are enabled.</p>"]
    pub has_projects: bool,
    #[doc = "<p>Whether the wiki is enabled.</p>"]
    pub has_wiki: bool,
    #[doc = ""]
    pub homepage: Option<String>,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub is_template: Option<bool>,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub language: Option<String>,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub license: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoLicense>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub master_branch: Option<String>,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = ""]
    pub mirror_url: Option<String>,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub open_issues: i64,
    #[doc = ""]
    pub open_issues_count: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PullRequestReviewCommentCreatedPullRequestBaseRepoPermissions>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub pushed_at: Option<PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt>,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role_name: Option<String>,
    #[doc = ""]
    pub size: i64,
    #[doc = ""]
    pub ssh_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stargazers: Option<i64>,
    #[doc = ""]
    pub stargazers_count: i64,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub svn_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub topics: Vec<String>,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    pub visibility: PullRequestReviewCommentCreatedPullRequestBaseRepoVisibility,
    #[doc = ""]
    pub watchers: i64,
    #[doc = ""]
    pub watchers_count: i64,
    #[doc = "<p>Whether to require contributors to sign off on web-based commits</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub web_commit_signoff_required: Option<bool>,
}
impl From<&PullRequestReviewThreadResolvedPullRequestBaseRepo>
    for PullRequestReviewThreadResolvedPullRequestBaseRepo
{
    fn from(value: &PullRequestReviewThreadResolvedPullRequestBaseRepo) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt>
    for PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt
{
    fn from(value: &PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = "PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt {
    Variant0(String),
    Variant1(i64),
}
impl From<&PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt>
    for PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt
{
    fn from(value: &PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        if let Ok(v) = value.parse() {
            Ok(Self::Variant0(v))
        } else if let Ok(v) = value.parse() {
            Ok(Self::Variant1(v))
        } else {
            Err("string conversion failed for all variants".into())
        }
    }
}
impl std::convert::TryFrom<&str> for PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::fmt::Display for PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            Self::Variant0(x) => x.fmt(f),
            Self::Variant1(x) => x.fmt(f),
        }
    }
}
impl From<i64> for PullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewThreadResolvedPullRequestHead\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestHeadLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestHeadRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestHeadRepo\","]
#[doc = "      \"description\": \"<p>A git repository</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedPullRequestBaseRepo\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedPullRequestHeadUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadResolvedPullRequestHead {
    #[doc = ""]
    pub label: Option<String>,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    #[doc = "<p>A git repository</p>"]
    pub repo: Option<PullRequestReviewThreadResolvedPullRequestBaseRepo>,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewThreadResolvedPullRequestHead>
    for PullRequestReviewThreadResolvedPullRequestHead
{
    fn from(value: &PullRequestReviewThreadResolvedPullRequestHead) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewThreadResolvedThread\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"comments\","]
#[doc = "    \"node_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedThreadComments\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadResolvedThread {
    #[doc = ""]
    pub comments: Vec<PullRequestReviewThreadResolvedThreadComments>,
    #[doc = ""]
    pub node_id: String,
}
impl From<&PullRequestReviewThreadResolvedThread> for PullRequestReviewThreadResolvedThread {
    fn from(value: &PullRequestReviewThreadResolvedThread) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewThreadResolvedThreadComments"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"author_association\","]
#[doc = "    \"body\","]
#[doc = "    \"commit_id\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_hunk\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"line\","]
#[doc = "    \"node_id\","]
#[doc = "    \"original_commit_id\","]
#[doc = "    \"original_line\","]
#[doc = "    \"original_position\","]
#[doc = "    \"original_start_line\","]
#[doc = "    \"path\","]
#[doc = "    \"position\","]
#[doc = "    \"pull_request_review_id\","]
#[doc = "    \"pull_request_url\","]
#[doc = "    \"reactions\","]
#[doc = "    \"side\","]
#[doc = "    \"start_line\","]
#[doc = "    \"start_side\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentLinks\""]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsBody\","]
#[doc = "      \"description\": \"<p>The text of the comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commit_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsCommitId\","]
#[doc = "      \"description\": \"<p>The SHA of the commit to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_hunk\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsDiffHunk\","]
#[doc = "      \"description\": \"<p>The diff of the line that the comment refers to.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsHtmlUrl\","]
#[doc = "      \"description\": \"<p>HTML URL for the pull request review comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsId\","]
#[doc = "      \"description\": \"<p>The ID of the pull request review comment.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"in_reply_to_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsInReplyToId\","]
#[doc = "      \"description\": \"<p>The comment ID to reply to.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"line\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsLine\","]
#[doc = "      \"description\": \"<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsNodeId\","]
#[doc = "      \"description\": \"<p>The node ID of the pull request review comment.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_commit_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsOriginalCommitId\","]
#[doc = "      \"description\": \"<p>The SHA of the original commit to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"original_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsOriginalLine\","]
#[doc = "      \"description\": \"<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"original_position\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsOriginalPosition\","]
#[doc = "      \"description\": \"<p>The index of the original line in the diff to which the comment applies.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"original_start_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsOriginalStartLine\","]
#[doc = "      \"description\": \"<p>The first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsPath\","]
#[doc = "      \"description\": \"<p>The relative path of the file to which the comment applies.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"position\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsPosition\","]
#[doc = "      \"description\": \"<p>The line index in the diff to which the comment applies.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request_review_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsPullRequestReviewId\","]
#[doc = "      \"description\": \"<p>The ID of the pull request review to which the comment belongs.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_request_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsPullRequestUrl\","]
#[doc = "      \"description\": \"<p>URL for the pull request that the review comment belongs to.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"side\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentSide\""]
#[doc = "    },"]
#[doc = "    \"start_line\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsStartLine\","]
#[doc = "      \"description\": \"<p>The first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"start_side\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsStartSide\","]
#[doc = "      \"description\": \"<p>The side of the first line of the range for a multi-line comment.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentStartSide\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"subject_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedCommentSubjectType\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsUrl\","]
#[doc = "      \"description\": \"<p>URL for the pull request review comment</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadResolvedThreadCommentsUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadResolvedThreadComments {
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The text of the comment.</p>"]
    pub body: String,
    #[doc = "<p>The SHA of the commit to which the comment applies.</p>"]
    pub commit_id: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The diff of the line that the comment refers to.</p>"]
    pub diff_hunk: String,
    #[doc = "<p>HTML URL for the pull request review comment.</p>"]
    pub html_url: String,
    #[doc = "<p>The ID of the pull request review comment.</p>"]
    pub id: i64,
    #[doc = "<p>The comment ID to reply to.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub in_reply_to_id: Option<i64>,
    #[doc = "<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>"]
    pub line: Option<i64>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedCommentLinks,
    #[doc = "<p>The node ID of the pull request review comment.</p>"]
    pub node_id: String,
    #[doc = "<p>The SHA of the original commit to which the comment applies.</p>"]
    pub original_commit_id: String,
    #[doc = "<p>The line of the blob to which the comment applies. The last line of the range for a multi-line comment</p>"]
    pub original_line: Option<i64>,
    #[doc = "<p>The index of the original line in the diff to which the comment applies.</p>"]
    pub original_position: i64,
    #[doc = "<p>The first line of the range for a multi-line comment.</p>"]
    pub original_start_line: Option<i64>,
    #[doc = "<p>The relative path of the file to which the comment applies.</p>"]
    pub path: String,
    #[doc = "<p>The line index in the diff to which the comment applies.</p>"]
    pub position: Option<i64>,
    #[doc = "<p>The ID of the pull request review to which the comment belongs.</p>"]
    pub pull_request_review_id: Option<i64>,
    #[doc = "<p>URL for the pull request that the review comment belongs to.</p>"]
    pub pull_request_url: String,
    pub reactions: DiscussionAnsweredAnswerReactions,
    pub side: PullRequestReviewCommentCreatedCommentSide,
    #[doc = "<p>The first line of the range for a multi-line comment.</p>"]
    pub start_line: Option<i64>,
    #[doc = "<p>The side of the first line of the range for a multi-line comment.</p>"]
    pub start_side: Option<PullRequestReviewCommentCreatedCommentStartSide>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject_type: Option<PullRequestReviewCommentCreatedCommentSubjectType>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the pull request review comment</p>"]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestReviewThreadResolvedThreadComments>
    for PullRequestReviewThreadResolvedThreadComments
{
    fn from(value: &PullRequestReviewThreadResolvedThreadComments) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewThreadUnresolvedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewThreadUnresolvedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewThreadResolvedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadUnresolvedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewThreadUnresolvedPullRequestAutoMerge>,
    pub base: PullRequestReviewThreadResolvedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub diff_url: String,
    #[doc = ""]
    pub draft: bool,
    pub head: PullRequestReviewThreadResolvedPullRequestBase,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestReviewThreadUnresolvedPullRequest>
    for PullRequestReviewThreadUnresolvedPullRequest
{
    fn from(value: &PullRequestReviewThreadUnresolvedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = "PullRequestReviewThreadUnresolvedPullRequestAutoMerge"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"commit_message\","]
#[doc = "    \"commit_title\","]
#[doc = "    \"enabled_by\","]
#[doc = "    \"merge_method\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"commit_message\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestAutoMergeCommitMessage\","]
#[doc = "      \"description\": \"<p>Commit message for the merge commit.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"commit_title\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestAutoMergeCommitTitle\","]
#[doc = "      \"description\": \"<p>Title for the merge commit message.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"enabled_by\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merge_method\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadUnresolvedPullRequestAutoMerge {
    #[doc = "<p>Commit message for the merge commit.</p>"]
    pub commit_message: Option<String>,
    #[doc = "<p>Title for the merge commit message.</p>"]
    pub commit_title: String,
    #[doc = ""]
    pub enabled_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    pub merge_method: DeploymentProtectionRuleRequestedPullRequestsAutoMergeMergeMethod,
}
impl From<&PullRequestReviewThreadUnresolvedPullRequestAutoMerge>
    for PullRequestReviewThreadUnresolvedPullRequestAutoMerge
{
    fn from(value: &PullRequestReviewThreadUnresolvedPullRequestAutoMerge) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestReviewThreadUnresolvedThread\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"comments\","]
#[doc = "    \"node_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedThreadComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentDeletedComment\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestReviewThreadUnresolvedThreadNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestReviewThreadUnresolvedThread {
    #[doc = ""]
    pub comments: Vec<PullRequestReviewCommentDeletedComment>,
    #[doc = ""]
    pub node_id: String,
}
impl From<&PullRequestReviewThreadUnresolvedThread> for PullRequestReviewThreadUnresolvedThread {
    fn from(value: &PullRequestReviewThreadUnresolvedThread) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestUnassignedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestUnassignedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewSubmittedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneClosedMilestoneCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestUnassignedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<MilestoneClosedMilestoneCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewCommentCreatedPullRequestAutoMerge>,
    pub base: PullRequestUnassignedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewSubmittedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<MilestoneClosedMilestoneCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneClosedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<MilestoneClosedMilestoneCreator>,
}
impl From<&PullRequestUnassignedPullRequest> for PullRequestUnassignedPullRequest {
    fn from(value: &PullRequestUnassignedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestUnassignedPullRequestBase\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"label\","]
#[doc = "    \"ref\","]
#[doc = "    \"repo\","]
#[doc = "    \"sha\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestBaseLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestBaseRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repo\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBaseRepo\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestBaseSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestUnassignedPullRequestBaseUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestUnassignedPullRequestBase {
    #[doc = ""]
    pub label: Option<String>,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repo: PullRequestReviewCommentCreatedPullRequestBaseRepo,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestUnassignedPullRequestBase> for PullRequestUnassignedPullRequestBase {
    fn from(value: &PullRequestUnassignedPullRequestBase) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PullRequestUnlockedPullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"_links\","]
#[doc = "    \"active_lock_reason\","]
#[doc = "    \"assignee\","]
#[doc = "    \"assignees\","]
#[doc = "    \"author_association\","]
#[doc = "    \"auto_merge\","]
#[doc = "    \"base\","]
#[doc = "    \"body\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"diff_url\","]
#[doc = "    \"draft\","]
#[doc = "    \"head\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_url\","]
#[doc = "    \"labels\","]
#[doc = "    \"locked\","]
#[doc = "    \"merge_commit_sha\","]
#[doc = "    \"merged_at\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"requested_reviewers\","]
#[doc = "    \"requested_teams\","]
#[doc = "    \"review_comment_url\","]
#[doc = "    \"review_comments_url\","]
#[doc = "    \"state\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestLinks\""]
#[doc = "    },"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/IssueCommentCreatedIssueActiveLockReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"additions\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestAdditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestAssignee\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"auto_merge\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestAutoMerge\","]
#[doc = "      \"description\": \"<p>The status of auto merging a pull request.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PullRequestReviewThreadUnresolvedPullRequestAutoMerge\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestBase\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"changed_files\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestChangedFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestCommits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deletions\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestDeletions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestDraft\","]
#[doc = "      \"description\": \"<p>Indicates whether or not the pull request is a draft.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestHead\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestIssueUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DiscussionLabeledLabel\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintainer_can_modify\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestMaintainerCanModify\","]
#[doc = "      \"description\": \"<p>Indicates whether maintainers can modify the pull request.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"merge_commit_sha\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestMergeCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestMergeable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"mergeable_state\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestMergeableState\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merged\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestMerged\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_by\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestMergedBy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestMilestone\","]
#[doc = "      \"description\": \"<p>A collection of related issues and pull requests.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/MilestoneCreatedMilestone\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the pull request within its repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rebaseable\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestRebaseable\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"requested_reviewers\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestRequestedReviewers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"requested_teams\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestRequestedTeams\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PullRequestReviewCommentCreatedPullRequestRequestedTeams\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"review_comment_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestReviewCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"review_comments\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestReviewComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"review_comments_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestReviewCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsState\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestTitle\","]
#[doc = "      \"description\": \"<p>The title of the pull request.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"PullRequestUnlockedPullRequestUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PullRequestUnlockedPullRequest {
    #[doc = ""]
    pub active_lock_reason: Option<IssueCommentCreatedIssueActiveLockReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub additions: Option<i64>,
    #[doc = ""]
    pub assignee: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub assignees: Vec<Option<Untyped>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>The status of auto merging a pull request.</p>"]
    pub auto_merge: Option<PullRequestReviewThreadUnresolvedPullRequestAutoMerge>,
    pub base: PullRequestReviewCommentCreatedPullRequestBase,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changed_files: Option<i64>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comments: Option<i64>,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commits: Option<i64>,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i64>,
    #[doc = ""]
    pub diff_url: String,
    #[doc = "<p>Indicates whether or not the pull request is a draft.</p>"]
    pub draft: bool,
    pub head: PullRequestReviewCommentCreatedPullRequestHead,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issue_url: String,
    #[doc = ""]
    pub labels: Vec<DiscussionLabeledLabel>,
    #[serde(rename = "_links")]
    pub links: PullRequestReviewCommentCreatedPullRequestLinks,
    #[doc = ""]
    pub locked: bool,
    #[doc = "<p>Indicates whether maintainers can modify the pull request.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub maintainer_can_modify: Option<bool>,
    #[doc = ""]
    pub merge_commit_sha: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mergeable_state: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged: Option<bool>,
    #[doc = ""]
    pub merged_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_by: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>A collection of related issues and pull requests.</p>"]
    pub milestone: Option<MilestoneCreatedMilestone>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the pull request within its repository.</p>"]
    pub number: i64,
    #[doc = ""]
    pub patch_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rebaseable: Option<bool>,
    #[doc = ""]
    pub requested_reviewers: Vec<::serde_json::Value>,
    #[doc = ""]
    pub requested_teams: Vec<PullRequestReviewCommentCreatedPullRequestRequestedTeams>,
    #[doc = ""]
    pub review_comment_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub review_comments: Option<i64>,
    #[doc = ""]
    pub review_comments_url: String,
    pub state: DeploymentProtectionRuleRequestedPullRequestsState,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = "<p>The title of the pull request.</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&PullRequestUnlockedPullRequest> for PullRequestUnlockedPullRequest {
    fn from(value: &PullRequestUnlockedPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PushDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"after\","]
#[doc = "    \"base_ref\","]
#[doc = "    \"before\","]
#[doc = "    \"commits\","]
#[doc = "    \"compare\","]
#[doc = "    \"created\","]
#[doc = "    \"deleted\","]
#[doc = "    \"forced\","]
#[doc = "    \"head_commit\","]
#[doc = "    \"pusher\","]
#[doc = "    \"ref\","]
#[doc = "    \"repository\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"after\": {"]
#[doc = "      \"title\": \"PushDefaultAfter\","]
#[doc = "      \"description\": \"<p>The SHA of the most recent commit on <code>ref</code> after the push.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"base_ref\": {"]
#[doc = "      \"title\": \"PushDefaultBaseRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"before\": {"]
#[doc = "      \"title\": \"PushDefaultBefore\","]
#[doc = "      \"description\": \"<p>The SHA of the most recent commit on <code>ref</code> before the push.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits\": {"]
#[doc = "      \"title\": \"PushDefaultCommits\","]
#[doc = "      \"description\": \"<p>An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the <code>compare</code> between the <code>before</code> commit and the <code>after</code> commit.) The array includes a maximum of 2048 commits. If necessary, you can use the <a href=\\\"https://docs.github.com/rest/commits\\\">Commits API</a> to fetch additional commits.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PushDefaultCommits\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"compare\": {"]
#[doc = "      \"title\": \"PushDefaultCompare\","]
#[doc = "      \"description\": \"<p>URL that shows the changes in this <code>ref</code> update, from the <code>before</code> commit to the <code>after</code> commit. For a newly created <code>ref</code> that is directly based on the default branch, this is the comparison between the head of the default branch and the <code>after</code> commit. Otherwise, this shows all commits until the <code>after</code> commit.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created\": {"]
#[doc = "      \"title\": \"PushDefaultCreated\","]
#[doc = "      \"description\": \"<p>Whether this push created the <code>ref</code>.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"PushDefaultDeleted\","]
#[doc = "      \"description\": \"<p>Whether this push deleted the <code>ref</code>.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"forced\": {"]
#[doc = "      \"title\": \"PushDefaultForced\","]
#[doc = "      \"description\": \"<p>Whether this push was a force push of the <code>ref</code>.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"title\": \"PushDefaultHeadCommit\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PushDefaultCommits\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"pusher\": {"]
#[doc = "      \"$ref\": \"#/$defs/PushDefaultCommitsAuthor\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"PushDefaultRef\","]
#[doc = "      \"description\": \"<p>The full git ref that was pushed. Example: <code>refs/heads/main</code> or <code>refs/tags/v3.14.1</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Push {
    #[doc = "<p>The SHA of the most recent commit on <code>ref</code> after the push.</p>"]
    pub after: String,
    #[doc = ""]
    pub base_ref: Option<String>,
    #[doc = "<p>The SHA of the most recent commit on <code>ref</code> before the push.</p>"]
    pub before: String,
    #[doc = "<p>An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the <code>compare</code> between the <code>before</code> commit and the <code>after</code> commit.) The array includes a maximum of 2048 commits. If necessary, you can use the <a href=\"https://docs.github.com/rest/commits\">Commits API</a> to fetch additional commits.</p>"]
    pub commits: Vec<PushDefaultCommits>,
    #[doc = "<p>URL that shows the changes in this <code>ref</code> update, from the <code>before</code> commit to the <code>after</code> commit. For a newly created <code>ref</code> that is directly based on the default branch, this is the comparison between the head of the default branch and the <code>after</code> commit. Otherwise, this shows all commits until the <code>after</code> commit.</p>"]
    pub compare: String,
    #[doc = "<p>Whether this push created the <code>ref</code>.</p>"]
    pub created: bool,
    #[doc = "<p>Whether this push deleted the <code>ref</code>.</p>"]
    pub deleted: bool,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[doc = "<p>Whether this push was a force push of the <code>ref</code>.</p>"]
    pub forced: bool,
    #[doc = ""]
    pub head_commit: Option<PushDefaultCommits>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub pusher: PushDefaultCommitsAuthor,
    #[doc = "<p>The full git ref that was pushed. Example: <code>refs/heads/main</code> or <code>refs/tags/v3.14.1</code>.</p>"]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repository: SomethingWithAnId,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<Untyped>,
}
impl From<&Push> for Push {
    fn from(value: &Push) -> Self {
        value.clone()
    }
}
#[doc = "PushDefaultCommits"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"committer\","]
#[doc = "    \"distinct\","]
#[doc = "    \"id\","]
#[doc = "    \"message\","]
#[doc = "    \"timestamp\","]
#[doc = "    \"tree_id\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"added\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsAdded\","]
#[doc = "      \"description\": \"<p>An array of files added in the commit. A maximum of 3000 changed files will be reported per commit.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"author\": {"]
#[doc = "      \"$ref\": \"#/$defs/PushDefaultCommitsAuthor\""]
#[doc = "    },"]
#[doc = "    \"committer\": {"]
#[doc = "      \"$ref\": \"#/$defs/PushDefaultCommitsAuthor\""]
#[doc = "    },"]
#[doc = "    \"distinct\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsDistinct\","]
#[doc = "      \"description\": \"<p>Whether this commit is distinct from any that have been pushed before.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"message\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsMessage\","]
#[doc = "      \"description\": \"<p>The commit message.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"modified\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsModified\","]
#[doc = "      \"description\": \"<p>An array of files modified by the commit. A maximum of 3000 changed files will be reported per commit.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"removed\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsRemoved\","]
#[doc = "      \"description\": \"<p>An array of files removed in the commit. A maximum of 3000 changed files will be reported per commit.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"timestamp\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsTimestamp\","]
#[doc = "      \"description\": \"<p>The ISO 8601 timestamp of the commit.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tree_id\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsTreeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsUrl\","]
#[doc = "      \"description\": \"<p>URL that points to the commit API resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PushDefaultCommits {
    #[doc = "<p>An array of files added in the commit. A maximum of 3000 changed files will be reported per commit.</p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub added: Vec<String>,
    pub author: PushDefaultCommitsAuthor,
    pub committer: PushDefaultCommitsAuthor,
    #[doc = "<p>Whether this commit is distinct from any that have been pushed before.</p>"]
    pub distinct: bool,
    #[doc = ""]
    pub id: String,
    #[doc = "<p>The commit message.</p>"]
    pub message: String,
    #[doc = "<p>An array of files modified by the commit. A maximum of 3000 changed files will be reported per commit.</p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub modified: Vec<String>,
    #[doc = "<p>An array of files removed in the commit. A maximum of 3000 changed files will be reported per commit.</p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub removed: Vec<String>,
    #[doc = "<p>The ISO 8601 timestamp of the commit.</p>"]
    pub timestamp: String,
    #[doc = ""]
    pub tree_id: String,
    #[doc = "<p>URL that points to the commit API resource.</p>"]
    pub url: String,
}
impl From<&PushDefaultCommits> for PushDefaultCommits {
    fn from(value: &PushDefaultCommits) -> Self {
        value.clone()
    }
}
#[doc = "<p>Metaproperties for Git author/committer information.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PushDefaultCommitsAuthor\","]
#[doc = "  \"description\": \"<p>Metaproperties for Git author/committer information.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"email\","]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"date\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsAuthorDate\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"email\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsAuthorEmail\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsAuthorName\","]
#[doc = "      \"description\": \"<p>The git author's name.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"username\": {"]
#[doc = "      \"title\": \"PushDefaultCommitsAuthorUsername\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PushDefaultCommitsAuthor {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[doc = ""]
    pub email: Option<String>,
    #[doc = "<p>The git author's name.</p>"]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}
impl From<&PushDefaultCommitsAuthor> for PushDefaultCommitsAuthor {
    fn from(value: &PushDefaultCommitsAuthor) -> Self {
        value.clone()
    }
}
#[doc = "RegistryPackage"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"registry_package\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"RegistryPackagePublished\","]
#[doc = "      \"description\": \"<p>A package was published to a registry.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"registry_package\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RegistryPackagePublishedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"published\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"registry_package\": {"]
#[doc = "          \"$ref\": \"#/$defs/RegistryPackagePublishedRegistryPackage\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RegistryPackageUpdated\","]
#[doc = "      \"description\": \"<p>A package that was previously published to a registry was updated.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"registry_package\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RegistryPackageUpdatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"updated\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"registry_package\": {"]
#[doc = "          \"$ref\": \"#/$defs/RegistryPackageUpdatedRegistryPackage\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum RegistryPackage {
    #[doc = "RegistryPackagePublished\n\n<p>A package was published to a registry.</p>"]
    #[serde(rename = "published")]
    Published {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        registry_package: RegistryPackagePublishedRegistryPackage,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
    #[doc = "RegistryPackageUpdated\n\n<p>A package that was previously published to a registry was updated.</p>"]
    #[serde(rename = "updated")]
    Updated {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        registry_package: RegistryPackageUpdatedRegistryPackage,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
    },
}
impl From<&RegistryPackage> for RegistryPackage {
    fn from(value: &RegistryPackage) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RegistryPackagePublishedRegistryPackage\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"ecosystem\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"namespace\","]
#[doc = "    \"owner\","]
#[doc = "    \"package_type\","]
#[doc = "    \"package_version\","]
#[doc = "    \"registry\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"ecosystem\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageEcosystem\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"namespace\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageNamespace\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "    },"]
#[doc = "    \"package_type\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"package_version\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RegistryPackagePublishedRegistryPackagePackageVersion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"registry\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageRegistry\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/PackagePublishedPackageRegistry\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackageUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RegistryPackagePublishedRegistryPackage {
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub ecosystem: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub namespace: String,
    pub owner: DeploymentReviewApprovedApprover,
    #[doc = ""]
    pub package_type: String,
    #[doc = ""]
    pub package_version: Option<RegistryPackagePublishedRegistryPackagePackageVersion>,
    #[doc = ""]
    pub registry: Option<PackagePublishedPackageRegistry>,
    #[doc = ""]
    pub updated_at: Option<String>,
}
impl From<&RegistryPackagePublishedRegistryPackage> for RegistryPackagePublishedRegistryPackage {
    fn from(value: &RegistryPackagePublishedRegistryPackage) -> Self {
        value.clone()
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"installation_command\","]
#[doc = "    \"metadata\","]
#[doc = "    \"name\","]
#[doc = "    \"package_files\","]
#[doc = "    \"package_url\","]
#[doc = "    \"summary\","]
#[doc = "    \"version\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"body_html\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionBodyHtml\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"container_metadata\": {"]
#[doc = "      \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionContainerMetadata\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"docker_metadata\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionDockerMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionDockerMetadata\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"installation_command\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionInstallationCommand\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"manifest\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionManifest\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"npm_metadata\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"nuget_metadata\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"package_files\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionPackageFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionPackageFiles\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"package_url\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionPackageUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionPrerelease\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"release\": {"]
#[doc = "      \"$ref\": \"#/$defs/RegistryPackagePublishedRegistryPackagePackageVersionRelease\""]
#[doc = "    },"]
#[doc = "    \"rubygems_metadata\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionRubygemsMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRubygemsMetadata\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionSummary\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionTargetCommitish\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_oid\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionTargetOid\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RegistryPackagePublishedRegistryPackagePackageVersion {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<DeploymentReviewApprovedApprover>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<RegistryPackagePublishedRegistryPackagePackageVersionBody>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body_html: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub container_metadata: Option<PackagePublishedPackagePackageVersionContainerMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    pub description: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub docker_metadata: Vec<PackagePublishedPackagePackageVersionDockerMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub installation_command: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifest: Option<String>,
    #[doc = ""]
    pub metadata: Vec<Untyped>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub npm_metadata: Option<RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nuget_metadata:
        Option<Vec<RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata>>,
    #[doc = ""]
    pub package_files: Vec<PackagePublishedPackagePackageVersionPackageFiles>,
    #[doc = ""]
    pub package_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prerelease: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<RegistryPackagePublishedRegistryPackagePackageVersionRelease>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rubygems_metadata: Vec<PackagePublishedPackagePackageVersionRubygemsMetadata>,
    #[doc = ""]
    pub summary: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_commitish: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_oid: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[doc = ""]
    pub version: String,
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersion>
    for RegistryPackagePublishedRegistryPackagePackageVersion
{
    fn from(value: &RegistryPackagePublishedRegistryPackagePackageVersion) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionBody\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum RegistryPackagePublishedRegistryPackagePackageVersionBody {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionBody>
    for RegistryPackagePublishedRegistryPackagePackageVersionBody
{
    fn from(value: &RegistryPackagePublishedRegistryPackagePackageVersionBody) -> Self {
        value.clone()
    }
}
impl From<Untyped> for RegistryPackagePublishedRegistryPackagePackageVersionBody {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"bin\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"bugs\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataBugs\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"commit_oid\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataCommitOid\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataContributors\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"cpu\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataCpu\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"deleted_by_id\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDeletedById\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"dependencies\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dev_dependencies\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"directories\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDirectories\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"dist\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDist\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"engines\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"files\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"git_head\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataGitHead\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"has_shrinkwrap\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataHasShrinkwrap\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataHomepage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"installation_command\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataInstallationCommand\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keywords\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataKeywords\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"license\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataLicense\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"main\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataMain\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"maintainers\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataMaintainers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"man\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_version\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataNodeVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"npm_user\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataNpmUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"npm_version\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataNpmVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"optional_dependencies\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"os\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataOs\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"peer_dependencies\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"published_via_actions\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataPublishedViaActions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"readme\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataReadme\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"release_id\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataRepository\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"scripts\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataAuthor>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bin: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bugs: Option<RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataBugs>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commit_oid: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub contributors: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub cpu: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted_by_id: Option<i64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dev_dependencies: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub directories:
        Option<RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDirectories>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dist: Option<RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDist>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub engines: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub files: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub git_head: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub has_shrinkwrap: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation_command: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub keywords: Vec<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub main: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub maintainers: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub man: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_version: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub npm_user: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub npm_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional_dependencies: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub os: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub peer_dependencies: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub published_via_actions: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub readme: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release_id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository:
        Option<RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataRepository>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scripts: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata>
    for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata
{
    fn from(value: &RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata) -> Self {
        value.clone()
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataAuthor"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataAuthor {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataAuthor>
    for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataAuthor
{
    fn from(
        value: &RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataAuthor,
    ) -> Self {
        value.clone()
    }
}
impl From<Untyped> for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataAuthor {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataBugs"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataBugs {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataBugs>
    for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataBugs
{
    fn from(value: &RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataBugs) -> Self {
        value.clone()
    }
}
impl From<Untyped> for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataBugs {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDirectories"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDirectories {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDirectories>
    for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDirectories
{
    fn from(
        value: &RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDirectories,
    ) -> Self {
        value.clone()
    }
}
impl From<Untyped> for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDirectories {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDist"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDist {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDist>
    for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDist
{
    fn from(value: &RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDist) -> Self {
        value.clone()
    }
}
impl From<Untyped> for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataDist {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataRepository"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataRepository {
    Variant0(Untyped),
    Variant1(String),
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataRepository>
    for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataRepository
{
    fn from(
        value: &RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataRepository,
    ) -> Self {
        value.clone()
    }
}
impl From<Untyped> for RegistryPackagePublishedRegistryPackagePackageVersionNpmMetadataRepository {
    fn from(value: Untyped) -> Self {
        Self::Variant0(value)
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"anyOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/Untyped\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"anyOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue>,
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata>
    for RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata
{
    fn from(value: &RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata) -> Self {
        value.clone()
    }
}
#[doc = "RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId {
    Variant0(String),
    Variant1(i64),
    Variant2(Untyped),
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId>
    for RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId
{
    fn from(value: &RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId) -> Self {
        value.clone()
    }
}
impl From<i64> for RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId {
    fn from(value: i64) -> Self {
        Self::Variant1(value)
    }
}
impl From<Untyped> for RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataId {
    fn from(value: Untyped) -> Self {
        Self::Variant2(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"anyOf\": ["]
#[doc = "    {"]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue {
    Variant0(bool),
    Variant1(String),
    Variant2(i64),
    Variant3(Untyped),
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue>
    for RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue
{
    fn from(
        value: &RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue,
    ) -> Self {
        value.clone()
    }
}
impl From<bool> for RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue {
    fn from(value: bool) -> Self {
        Self::Variant0(value)
    }
}
impl From<i64> for RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue {
    fn from(value: i64) -> Self {
        Self::Variant2(value)
    }
}
impl From<Untyped> for RegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValue {
    fn from(value: Untyped) -> Self {
        Self::Variant3(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionRelease\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleaseCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleaseDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleaseHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleaseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleasePrerelease\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleasePublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleaseTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleaseTargetCommitish\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"RegistryPackagePublishedRegistryPackagePackageVersionReleaseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RegistryPackagePublishedRegistryPackagePackageVersionRelease {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub author: Option<DeploymentReviewApprovedApprover>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prerelease: Option<bool>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_name: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target_commitish: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&RegistryPackagePublishedRegistryPackagePackageVersionRelease>
    for RegistryPackagePublishedRegistryPackagePackageVersionRelease
{
    fn from(value: &RegistryPackagePublishedRegistryPackagePackageVersionRelease) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RegistryPackageUpdatedRegistryPackage\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"ecosystem\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"namespace\","]
#[doc = "    \"owner\","]
#[doc = "    \"package_type\","]
#[doc = "    \"package_version\","]
#[doc = "    \"registry\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"ecosystem\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageEcosystem\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"namespace\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageNamespace\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "    },"]
#[doc = "    \"package_type\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"package_version\": {"]
#[doc = "      \"$ref\": \"#/$defs/RegistryPackageUpdatedRegistryPackagePackageVersion\""]
#[doc = "    },"]
#[doc = "    \"registry\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageRegistry\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackageUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RegistryPackageUpdatedRegistryPackage {
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub description: (),
    #[doc = ""]
    pub ecosystem: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub namespace: String,
    pub owner: DeploymentReviewApprovedApprover,
    #[doc = ""]
    pub package_type: String,
    pub package_version: RegistryPackageUpdatedRegistryPackagePackageVersion,
    #[doc = ""]
    pub registry: Option<Untyped>,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&RegistryPackageUpdatedRegistryPackage> for RegistryPackageUpdatedRegistryPackage {
    fn from(value: &RegistryPackageUpdatedRegistryPackage) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersion\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"body\","]
#[doc = "    \"body_html\","]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"installation_command\","]
#[doc = "    \"metadata\","]
#[doc = "    \"name\","]
#[doc = "    \"package_files\","]
#[doc = "    \"package_url\","]
#[doc = "    \"summary\","]
#[doc = "    \"target_commitish\","]
#[doc = "    \"target_oid\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"version\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"body_html\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionBodyHtml\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"docker_metadata\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionDockerMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"installation_command\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionInstallationCommand\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"manifest\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionManifest\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"metadata\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/Untyped\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"package_files\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionPackageFiles\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackageUpdatedPackagePackageVersionPackageFiles\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"package_url\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionPackageUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionPrerelease\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"release\": {"]
#[doc = "      \"$ref\": \"#/$defs/RegistryPackageUpdatedRegistryPackagePackageVersionRelease\""]
#[doc = "    },"]
#[doc = "    \"rubygems_metadata\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionRubygemsMetadata\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/PackagePublishedPackagePackageVersionRubygemsMetadata\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionSummary\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionTargetCommitish\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_oid\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionTargetOid\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"version\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RegistryPackageUpdatedRegistryPackagePackageVersion {
    pub author: DeploymentReviewApprovedApprover,
    #[doc = ""]
    pub body: String,
    #[doc = ""]
    pub body_html: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub description: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub docker_metadata: Vec<Option<Untyped>>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub installation_command: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub manifest: Option<String>,
    #[doc = ""]
    pub metadata: Vec<Untyped>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub package_files: Vec<PackageUpdatedPackagePackageVersionPackageFiles>,
    #[doc = ""]
    pub package_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prerelease: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub release: Option<RegistryPackageUpdatedRegistryPackagePackageVersionRelease>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rubygems_metadata: Vec<PackagePublishedPackagePackageVersionRubygemsMetadata>,
    #[doc = ""]
    pub summary: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_name: Option<String>,
    #[doc = ""]
    pub target_commitish: String,
    #[doc = ""]
    pub target_oid: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub version: String,
}
impl From<&RegistryPackageUpdatedRegistryPackagePackageVersion>
    for RegistryPackageUpdatedRegistryPackagePackageVersion
{
    fn from(value: &RegistryPackageUpdatedRegistryPackagePackageVersion) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionRelease\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"created_at\","]
#[doc = "    \"draft\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"prerelease\","]
#[doc = "    \"published_at\","]
#[doc = "    \"tag_name\","]
#[doc = "    \"target_commitish\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentReviewApprovedApprover\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleaseCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleaseDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleaseHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleaseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleasePrerelease\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleasePublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleaseTagName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleaseTargetCommitish\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"RegistryPackageUpdatedRegistryPackagePackageVersionReleaseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RegistryPackageUpdatedRegistryPackagePackageVersionRelease {
    pub author: DeploymentReviewApprovedApprover,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub draft: bool,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub prerelease: bool,
    #[doc = ""]
    pub published_at: String,
    #[doc = ""]
    pub tag_name: String,
    #[doc = ""]
    pub target_commitish: String,
    #[doc = ""]
    pub url: String,
}
impl From<&RegistryPackageUpdatedRegistryPackagePackageVersionRelease>
    for RegistryPackageUpdatedRegistryPackagePackageVersionRelease
{
    fn from(value: &RegistryPackageUpdatedRegistryPackagePackageVersionRelease) -> Self {
        value.clone()
    }
}
#[doc = "Release"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"release\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"ReleaseCreated\","]
#[doc = "      \"description\": \"<p>A draft was saved, or a release or pre-release was published without previously being saved as a draft.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"release\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ReleaseCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"release\": {"]
#[doc = "          \"$ref\": \"#/$defs/ReleaseCreatedRelease\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ReleaseDeleted\","]
#[doc = "      \"description\": \"<p>A release, pre-release, or draft release was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"release\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ReleaseDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"release\": {"]
#[doc = "          \"$ref\": \"#/$defs/ReleaseCreatedRelease\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ReleaseEdited\","]
#[doc = "      \"description\": \"<p>The details of a release, pre-release, or draft release were edited. For more information, see \\\"<a href=\\\"https://docs.github.com/repositories/releasing-projects-on-github/managing-releases-in-a-repository#editing-a-release\\\">Managing releases in a repository</a>.\\\"</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"release\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ReleaseEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/ReleaseEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"release\": {"]
#[doc = "          \"$ref\": \"#/$defs/ReleaseCreatedRelease\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ReleasePrereleased\","]
#[doc = "      \"description\": \"<p>A release was created and identified as a pre-release. A pre-release is a release that is not ready for production and may be unstable.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"release\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ReleasePrereleasedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"prereleased\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"release\": {"]
#[doc = "          \"$ref\": \"#/$defs/ReleasePrereleasedRelease\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ReleasePublished\","]
#[doc = "      \"description\": \"<p>A release, pre-release, or draft of a release was published.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"release\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ReleasePublishedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"published\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"release\": {"]
#[doc = "          \"$ref\": \"#/$defs/ReleasePublishedRelease\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ReleaseReleased\","]
#[doc = "      \"description\": \"<p>A release was published, or a pre-release was changed to a release.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"release\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ReleaseReleasedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"released\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"release\": {"]
#[doc = "          \"$ref\": \"#/$defs/ReleaseCreatedRelease\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ReleaseUnpublished\","]
#[doc = "      \"description\": \"<p>A release or pre-release was unpublished.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"release\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"ReleaseUnpublishedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unpublished\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"release\": {"]
#[doc = "          \"$ref\": \"#/$defs/ReleasePublishedRelease\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Release {
    #[doc = "ReleaseCreated\n\n<p>A draft was saved, or a release or pre-release was published without previously being saved as a draft.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        release: ReleaseCreatedRelease,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "ReleaseDeleted\n\n<p>A release, pre-release, or draft release was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        release: ReleaseCreatedRelease,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "ReleaseEdited\n\n<p>The details of a release, pre-release, or draft release were edited. For more information, see \"<a href=\"https://docs.github.com/repositories/releasing-projects-on-github/managing-releases-in-a-repository#editing-a-release\">Managing releases in a repository</a>.\"</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: ReleaseEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        release: ReleaseCreatedRelease,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ReleasePrereleased\n\n<p>A release was created and identified as a pre-release. A pre-release is a release that is not ready for production and may be unstable.</p>"]
    #[serde(rename = "prereleased")]
    Prereleased {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        release: ReleasePrereleasedRelease,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ReleasePublished\n\n<p>A release, pre-release, or draft of a release was published.</p>"]
    #[serde(rename = "published")]
    Published {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        release: ReleasePublishedRelease,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ReleaseReleased\n\n<p>A release was published, or a pre-release was changed to a release.</p>"]
    #[serde(rename = "released")]
    Released {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        release: ReleaseCreatedRelease,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "ReleaseUnpublished\n\n<p>A release or pre-release was unpublished.</p>"]
    #[serde(rename = "unpublished")]
    Unpublished {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        release: ReleasePublishedRelease,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
}
impl From<&Release> for Release {
    fn from(value: &Release) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/releases/releases/#get-a-release\">release</a> object.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ReleaseCreatedRelease\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/releases/releases/#get-a-release\\\">release</a> object.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"assets\","]
#[doc = "    \"assets_url\","]
#[doc = "    \"author\","]
#[doc = "    \"body\","]
#[doc = "    \"created_at\","]
#[doc = "    \"draft\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"prerelease\","]
#[doc = "    \"published_at\","]
#[doc = "    \"tag_name\","]
#[doc = "    \"tarball_url\","]
#[doc = "    \"target_commitish\","]
#[doc = "    \"upload_url\","]
#[doc = "    \"url\","]
#[doc = "    \"zipball_url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"assets\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssets\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/ReleaseCreatedReleaseAssets\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"assets_url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"discussion_url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseDiscussionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseDraft\","]
#[doc = "      \"description\": \"<p>Whether the release is a draft or published</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleasePrerelease\","]
#[doc = "      \"description\": \"<p>Whether the release is identified as a prerelease or a full release.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleasePublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseTagName\","]
#[doc = "      \"description\": \"<p>The name of the tag.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tarball_url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseTarballUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseTargetCommitish\","]
#[doc = "      \"description\": \"<p>Specifies the commitish value that determines where the Git tag is created from.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"upload_url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseUploadUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"zipball_url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseZipballUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ReleaseCreatedRelease {
    #[doc = ""]
    pub assets: Vec<ReleaseCreatedReleaseAssets>,
    #[doc = ""]
    pub assets_url: String,
    #[doc = ""]
    pub author: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discussion_url: Option<String>,
    #[doc = "<p>Whether the release is a draft or published</p>"]
    pub draft: bool,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Whether the release is identified as a prerelease or a full release.</p>"]
    pub prerelease: bool,
    #[doc = ""]
    pub published_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reactions: Option<DiscussionAnsweredAnswerReactions>,
    #[doc = "<p>The name of the tag.</p>"]
    pub tag_name: String,
    #[doc = ""]
    pub tarball_url: Option<String>,
    #[doc = "<p>Specifies the commitish value that determines where the Git tag is created from.</p>"]
    pub target_commitish: String,
    #[doc = ""]
    pub upload_url: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub zipball_url: Option<String>,
}
impl From<&ReleaseCreatedRelease> for ReleaseCreatedRelease {
    fn from(value: &ReleaseCreatedRelease) -> Self {
        value.clone()
    }
}
#[doc = "ReleaseCreatedReleaseAssets"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"browser_download_url\","]
#[doc = "    \"content_type\","]
#[doc = "    \"created_at\","]
#[doc = "    \"download_count\","]
#[doc = "    \"id\","]
#[doc = "    \"label\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"size\","]
#[doc = "    \"state\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"browser_download_url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsBrowserDownloadUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"content_type\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsContentType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"download_count\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsDownloadCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"label\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsLabel\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsName\","]
#[doc = "      \"description\": \"<p>The file name of the asset.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"size\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsSize\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsState\","]
#[doc = "      \"description\": \"<p>State of the release asset.</p>\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"uploaded\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"uploader\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsUploader\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ReleaseCreatedReleaseAssetsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ReleaseCreatedReleaseAssets {
    #[doc = ""]
    pub browser_download_url: String,
    #[doc = ""]
    pub content_type: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub download_count: i64,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub label: Option<String>,
    #[doc = "<p>The file name of the asset.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub size: i64,
    #[doc = "<p>State of the release asset.</p>"]
    pub state: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uploader: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = ""]
    pub url: String,
}
impl From<&ReleaseCreatedReleaseAssets> for ReleaseCreatedReleaseAssets {
    fn from(value: &ReleaseCreatedReleaseAssets) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ReleaseEditedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"body\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"make_latest\": {"]
#[doc = "      \"$ref\": \"#/$defs/ReleaseEditedChangesMakeLatest\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ReleaseEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub make_latest: Option<ReleaseEditedChangesMakeLatest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<DiscussionEditedChangesBody>,
}
impl From<&ReleaseEditedChanges> for ReleaseEditedChanges {
    fn from(value: &ReleaseEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ReleaseEditedChangesMakeLatest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"to\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"to\": {"]
#[doc = "      \"title\": \"ReleaseEditedChangesMakeLatestTo\","]
#[doc = "      \"description\": \"<p>Whether this release was explicitly <code>edited</code> to be the latest.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ReleaseEditedChangesMakeLatest {
    #[doc = "<p>Whether this release was explicitly <code>edited</code> to be the latest.</p>"]
    pub to: bool,
}
impl From<&ReleaseEditedChangesMakeLatest> for ReleaseEditedChangesMakeLatest {
    fn from(value: &ReleaseEditedChangesMakeLatest) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/releases/releases/#get-a-release\">release</a> object.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ReleasePrereleasedRelease\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/releases/releases/#get-a-release\\\">release</a> object.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"assets\","]
#[doc = "    \"assets_url\","]
#[doc = "    \"author\","]
#[doc = "    \"body\","]
#[doc = "    \"created_at\","]
#[doc = "    \"draft\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"prerelease\","]
#[doc = "    \"published_at\","]
#[doc = "    \"tag_name\","]
#[doc = "    \"tarball_url\","]
#[doc = "    \"target_commitish\","]
#[doc = "    \"upload_url\","]
#[doc = "    \"url\","]
#[doc = "    \"zipball_url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"assets\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseAssets\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"assets_url\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseAssetsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"discussion_url\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseDiscussionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseDraft\","]
#[doc = "      \"description\": \"<p>Whether the release is a draft or published</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleasePrerelease\","]
#[doc = "      \"description\": \"<p>Whether the release is identified as a prerelease or a full release.</p>\","]
#[doc = "      \"type\": \"boolean\","]
#[doc = "      \"const\": true"]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleasePublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseTagName\","]
#[doc = "      \"description\": \"<p>The name of the tag.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tarball_url\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseTarballUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseTargetCommitish\","]
#[doc = "      \"description\": \"<p>Specifies the commitish value that determines where the Git tag is created from.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"upload_url\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseUploadUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"zipball_url\": {"]
#[doc = "      \"title\": \"ReleasePrereleasedReleaseZipballUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ReleasePrereleasedRelease {
    #[doc = ""]
    pub assets: Vec<Option<Untyped>>,
    #[doc = ""]
    pub assets_url: String,
    #[doc = ""]
    pub author: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discussion_url: Option<String>,
    #[doc = "<p>Whether the release is a draft or published</p>"]
    pub draft: bool,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Whether the release is identified as a prerelease or a full release.</p>"]
    pub prerelease: bool,
    #[doc = ""]
    pub published_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reactions: Option<DiscussionAnsweredAnswerReactions>,
    #[doc = "<p>The name of the tag.</p>"]
    pub tag_name: String,
    #[doc = ""]
    pub tarball_url: Option<String>,
    #[doc = "<p>Specifies the commitish value that determines where the Git tag is created from.</p>"]
    pub target_commitish: String,
    #[doc = ""]
    pub upload_url: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub zipball_url: Option<String>,
}
impl From<&ReleasePrereleasedRelease> for ReleasePrereleasedRelease {
    fn from(value: &ReleasePrereleasedRelease) -> Self {
        value.clone()
    }
}
#[doc = "<p>The <a href=\"https://docs.github.com/rest/releases/releases/#get-a-release\">release</a> object.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ReleasePublishedRelease\","]
#[doc = "  \"description\": \"<p>The <a href=\\\"https://docs.github.com/rest/releases/releases/#get-a-release\\\">release</a> object.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"assets\","]
#[doc = "    \"assets_url\","]
#[doc = "    \"author\","]
#[doc = "    \"body\","]
#[doc = "    \"created_at\","]
#[doc = "    \"draft\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"prerelease\","]
#[doc = "    \"published_at\","]
#[doc = "    \"tag_name\","]
#[doc = "    \"tarball_url\","]
#[doc = "    \"target_commitish\","]
#[doc = "    \"upload_url\","]
#[doc = "    \"url\","]
#[doc = "    \"zipball_url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"assets\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseAssets\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"assets_url\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseAssetsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseBody\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"discussion_url\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseDiscussionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseDraft\","]
#[doc = "      \"description\": \"<p>Whether the release is a draft or published</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"prerelease\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleasePrerelease\","]
#[doc = "      \"description\": \"<p>Whether the release is identified as a prerelease or a full release.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleasePublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerReactions\""]
#[doc = "    },"]
#[doc = "    \"tag_name\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseTagName\","]
#[doc = "      \"description\": \"<p>The name of the tag.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tarball_url\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseTarballUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"target_commitish\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseTargetCommitish\","]
#[doc = "      \"description\": \"<p>Specifies the commitish value that determines where the Git tag is created from.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"upload_url\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseUploadUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"zipball_url\": {"]
#[doc = "      \"title\": \"ReleasePublishedReleaseZipballUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ReleasePublishedRelease {
    #[doc = ""]
    pub assets: Vec<Option<Untyped>>,
    #[doc = ""]
    pub assets_url: String,
    #[doc = ""]
    pub author: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub body: Option<String>,
    #[doc = ""]
    pub created_at: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub discussion_url: Option<String>,
    #[doc = "<p>Whether the release is a draft or published</p>"]
    pub draft: bool,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Whether the release is identified as a prerelease or a full release.</p>"]
    pub prerelease: bool,
    #[doc = ""]
    pub published_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reactions: Option<DiscussionAnsweredAnswerReactions>,
    #[doc = "<p>The name of the tag.</p>"]
    pub tag_name: String,
    #[doc = ""]
    pub tarball_url: Option<String>,
    #[doc = "<p>Specifies the commitish value that determines where the Git tag is created from.</p>"]
    pub target_commitish: String,
    #[doc = ""]
    pub upload_url: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub zipball_url: Option<String>,
}
impl From<&ReleasePublishedRelease> for ReleasePublishedRelease {
    fn from(value: &ReleasePublishedRelease) -> Self {
        value.clone()
    }
}
#[doc = "Repository"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"repository\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryArchived\","]
#[doc = "      \"description\": \"<p>A repository was archived.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryArchivedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"archived\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryCreated\","]
#[doc = "      \"description\": \"<p>A repository was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryDeleted\","]
#[doc = "      \"description\": \"<p>A repository was deleted. GitHub Apps and repository webhooks will not receive this event.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryEdited\","]
#[doc = "      \"description\": \"<p>The topics, default branch, description, or homepage of a repository was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryPrivatized\","]
#[doc = "      \"description\": \"<p>The visibility of a repository was changed to <code>private</code>.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryPrivatizedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"privatized\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryPublicized\","]
#[doc = "      \"description\": \"<p>The visibility of a repository was changed to <code>public</code>.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryPublicizedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"publicized\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryRenamed\","]
#[doc = "      \"description\": \"<p>The name of a repository was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryRenamedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"renamed\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryRenamedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryTransferred\","]
#[doc = "      \"description\": \"<p>Ownership of the repository was transferred to a user or organization account. This event is only sent to the account where the ownership is transferred. To receive the <code>repository.transferred</code> event, the new owner account must have the GitHub App installed, and the App must be subscribed to \\\"Repository\\\" events.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryTransferredAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"transferred\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryTransferredChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryUnarchived\","]
#[doc = "      \"description\": \"<p>A previously archived repository was unarchived.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryUnarchivedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"unarchived\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Repository {
    #[doc = "RepositoryArchived\n\n<p>A repository was archived.</p>"]
    #[serde(rename = "archived")]
    Archived {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "RepositoryCreated\n\n<p>A repository was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "RepositoryDeleted\n\n<p>A repository was deleted. GitHub Apps and repository webhooks will not receive this event.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "RepositoryEdited\n\n<p>The topics, default branch, description, or homepage of a repository was changed.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: RepositoryEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "RepositoryPrivatized\n\n<p>The visibility of a repository was changed to <code>private</code>.</p>"]
    #[serde(rename = "privatized")]
    Privatized {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "RepositoryPublicized\n\n<p>The visibility of a repository was changed to <code>public</code>.</p>"]
    #[serde(rename = "publicized")]
    Publicized {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "RepositoryRenamed\n\n<p>The name of a repository was changed.</p>"]
    #[serde(rename = "renamed")]
    Renamed {
        changes: RepositoryRenamedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "RepositoryTransferred\n\n<p>Ownership of the repository was transferred to a user or organization account. This event is only sent to the account where the ownership is transferred. To receive the <code>repository.transferred</code> event, the new owner account must have the GitHub App installed, and the App must be subscribed to \"Repository\" events.</p>"]
    #[serde(rename = "transferred")]
    Transferred {
        changes: RepositoryTransferredChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
    #[doc = "RepositoryUnarchived\n\n<p>A previously archived repository was unarchived.</p>"]
    #[serde(rename = "unarchived")]
    Unarchived {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&Repository> for Repository {
    fn from(value: &Repository) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisory"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"repository_advisory\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublished\","]
#[doc = "      \"description\": \"<p>A repository security advisory was published.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"repository_advisory\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryAdvisoryPublishedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"published\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"repository_advisory\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisory\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryAdvisoryReported\","]
#[doc = "      \"description\": \"<p>A private vulnerability report was submitted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"repository_advisory\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryAdvisoryReportedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reported\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"repository_advisory\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisory\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum RepositoryAdvisory {
    #[doc = "RepositoryAdvisoryPublished\n\n<p>A repository security advisory was published.</p>"]
    #[serde(rename = "published")]
    Published {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        repository_advisory: RepositoryAdvisoryPublishedRepositoryAdvisory,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "RepositoryAdvisoryReported\n\n<p>A private vulnerability report was submitted.</p>"]
    #[serde(rename = "reported")]
    Reported {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        repository_advisory: RepositoryAdvisoryPublishedRepositoryAdvisory,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
}
impl From<&RepositoryAdvisory> for RepositoryAdvisory {
    fn from(value: &RepositoryAdvisory) -> Self {
        value.clone()
    }
}
#[doc = "<p>A repository security advisory.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisory\","]
#[doc = "  \"description\": \"<p>A repository security advisory.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"collaborating_teams\","]
#[doc = "    \"collaborating_users\","]
#[doc = "    \"created_at\","]
#[doc = "    \"credits\","]
#[doc = "    \"credits_detailed\","]
#[doc = "    \"cve_id\","]
#[doc = "    \"cvss\","]
#[doc = "    \"cwe_ids\","]
#[doc = "    \"cwes\","]
#[doc = "    \"description\","]
#[doc = "    \"ghsa_id\","]
#[doc = "    \"html_url\","]
#[doc = "    \"identifiers\","]
#[doc = "    \"private_fork\","]
#[doc = "    \"published_at\","]
#[doc = "    \"publisher\","]
#[doc = "    \"severity\","]
#[doc = "    \"state\","]
#[doc = "    \"submission\","]
#[doc = "    \"summary\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"vulnerabilities\","]
#[doc = "    \"withdrawn_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryAuthor\","]
#[doc = "      \"description\": \"<p>The author of the advisory.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryClosedAt\","]
#[doc = "      \"description\": \"<p>The date and time of when the advisory was closed, in ISO 8601 format.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"collaborating_teams\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeams\","]
#[doc = "      \"description\": \"<p>A list of teams that collaborate on the advisory.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeams\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"collaborating_users\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingUsers\","]
#[doc = "      \"description\": \"<p>A list of users that collaborate on the advisory.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCreatedAt\","]
#[doc = "      \"description\": \"<p>The date and time of when the advisory was created, in ISO 8601 format.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"credits\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCredits\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCredits\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"credits_detailed\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailed\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailed\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cve_id\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCveId\","]
#[doc = "      \"description\": \"<p>The Common Vulnerabilities and Exposures (CVE) ID.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cvss\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCvss\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCvss\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cvss_severities\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cwe_ids\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCweIds\","]
#[doc = "      \"description\": \"<p>A list of only the CWE IDs.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cwes\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCwes\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCwes\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryDescription\","]
#[doc = "      \"description\": \"<p>A detailed description of what the advisory entails.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"ghsa_id\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryGhsaId\","]
#[doc = "      \"description\": \"<p>The GitHub Security Advisory ID.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryHtmlUrl\","]
#[doc = "      \"description\": \"<p>The URL for the advisory.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"identifiers\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"private_fork\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateFork\","]
#[doc = "      \"description\": \"<p>A temporary private fork of the advisory's repository for collaborating on a fix.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateFork\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPublishedAt\","]
#[doc = "      \"description\": \"<p>The date and time of when the advisory was published, in ISO 8601 format.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"publisher\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPublisher\","]
#[doc = "      \"description\": \"<p>The publisher of the advisory.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"severity\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisorySeverity\","]
#[doc = "      \"description\": \"<p>The severity of the advisory.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisorySeverity\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryState\""]
#[doc = "    },"]
#[doc = "    \"submission\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisorySubmission\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisorySubmission\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisorySummary\","]
#[doc = "      \"description\": \"<p>A short summary of the advisory.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryUpdatedAt\","]
#[doc = "      \"description\": \"<p>The date and time of when the advisory was last updated, in ISO 8601 format.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryUrl\","]
#[doc = "      \"description\": \"<p>The API URL for the advisory.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"vulnerabilities\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilities\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilities\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"withdrawn_at\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryWithdrawnAt\","]
#[doc = "      \"description\": \"<p>The date and time of when the advisory was withdrawn, in ISO 8601 format.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisory {
    #[doc = "<p>The author of the advisory.</p>"]
    pub author: Option<DiscussionTransferredChangesNewRepositoryOrganization>,
    #[doc = "<p>The date and time of when the advisory was closed, in ISO 8601 format.</p>"]
    pub closed_at: Option<String>,
    #[doc = "<p>A list of teams that collaborate on the advisory.</p>"]
    pub collaborating_teams:
        Option<Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeams>>,
    #[doc = "<p>A list of users that collaborate on the advisory.</p>"]
    pub collaborating_users: Option<Vec<DiscussionTransferredChangesNewRepositoryOrganization>>,
    #[doc = "<p>The date and time of when the advisory was created, in ISO 8601 format.</p>"]
    pub created_at: Option<String>,
    #[doc = ""]
    pub credits: Option<Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryCredits>>,
    #[doc = ""]
    pub credits_detailed: Option<Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailed>>,
    #[doc = "<p>The Common Vulnerabilities and Exposures (CVE) ID.</p>"]
    pub cve_id: Option<String>,
    #[doc = ""]
    pub cvss: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCvss>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cvss_severities: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities>,
    #[doc = "<p>A list of only the CWE IDs.</p>"]
    pub cwe_ids: Option<Vec<String>>,
    #[doc = ""]
    pub cwes: Option<Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryCwes>>,
    #[doc = "<p>A detailed description of what the advisory entails.</p>"]
    pub description: Option<String>,
    #[doc = "<p>The GitHub Security Advisory ID.</p>"]
    pub ghsa_id: String,
    #[doc = "<p>The URL for the advisory.</p>"]
    pub html_url: String,
    #[doc = ""]
    pub identifiers: Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers>,
    #[doc = "<p>A temporary private fork of the advisory's repository for collaborating on a fix.</p>"]
    pub private_fork: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateFork>,
    #[doc = "<p>The date and time of when the advisory was published, in ISO 8601 format.</p>"]
    pub published_at: Option<String>,
    #[doc = "<p>The publisher of the advisory.</p>"]
    pub publisher: Option<DiscussionTransferredChangesNewRepositoryOrganization>,
    #[doc = "<p>The severity of the advisory.</p>"]
    pub severity: Option<RepositoryAdvisoryPublishedRepositoryAdvisorySeverity>,
    pub state: RepositoryAdvisoryPublishedRepositoryAdvisoryState,
    #[doc = ""]
    pub submission: Option<RepositoryAdvisoryPublishedRepositoryAdvisorySubmission>,
    #[doc = "<p>A short summary of the advisory.</p>"]
    pub summary: String,
    #[doc = "<p>The date and time of when the advisory was last updated, in ISO 8601 format.</p>"]
    pub updated_at: Option<String>,
    #[doc = "<p>The API URL for the advisory.</p>"]
    pub url: String,
    #[doc = ""]
    pub vulnerabilities: Option<Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilities>>,
    #[doc = "<p>The date and time of when the advisory was withdrawn, in ISO 8601 format.</p>"]
    pub withdrawn_at: Option<String>,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisory>
    for RepositoryAdvisoryPublishedRepositoryAdvisory
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisory) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeams"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"members_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"parent\","]
#[doc = "    \"permission\","]
#[doc = "    \"repositories_url\","]
#[doc = "    \"slug\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"members_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notification_setting\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsNotificationSetting\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parent\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsRequestedTeams\""]
#[doc = "    },"]
#[doc = "    \"permission\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermission\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissions\""]
#[doc = "    },"]
#[doc = "    \"privacy\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPrivacy\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repositories_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsRepositoriesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsSlug\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeams {
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub members_url: String,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification_setting: Option<String>,
    pub parent: DeploymentProtectionRuleRequestedPullRequestsRequestedTeams,
    #[doc = ""]
    pub permission: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions:
        Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissions>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privacy: Option<String>,
    #[doc = ""]
    pub repositories_url: String,
    #[doc = ""]
    pub slug: String,
    #[doc = ""]
    pub url: String,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeams>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeams
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeams) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"admin\","]
#[doc = "    \"maintain\","]
#[doc = "    \"pull\","]
#[doc = "    \"push\","]
#[doc = "    \"triage\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"admin\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissionsAdmin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"maintain\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissionsMaintain\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pull\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissionsPull\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"push\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissionsPush\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"triage\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissionsTriage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissions {
    #[doc = ""]
    pub admin: bool,
    #[doc = ""]
    pub maintain: bool,
    #[doc = ""]
    pub pull: bool,
    #[doc = ""]
    pub push: bool,
    #[doc = ""]
    pub triage: bool,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissions>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissions
{
    fn from(
        value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCollaboratingTeamsPermissions,
    ) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryCredits"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsLogin\","]
#[doc = "      \"description\": \"<p>The username of the user credited.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryCredits {
    #[doc = "<p>The username of the user credited.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType>,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCredits>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCredits
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCredits) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailed"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"state\","]
#[doc = "    \"type\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"state\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailed {
    pub state: RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState,
    #[serde(rename = "type")]
    pub type_: RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType,
    pub user: DiscussionTransferredChangesNewRepositoryOrganization,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailed>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailed
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailed) -> Self {
        value.clone()
    }
}
#[doc = "<p>The state of the user's acceptance of the credit.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState\","]
#[doc = "  \"description\": \"<p>The state of the user's acceptance of the credit.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"accepted\","]
#[doc = "    \"declined\","]
#[doc = "    \"pending\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState {
    #[serde(rename = "accepted")]
    Accepted,
    #[serde(rename = "declined")]
    Declined,
    #[serde(rename = "pending")]
    Pending,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Accepted => write!(f, "accepted"),
            Self::Declined => write!(f, "declined"),
            Self::Pending => write!(f, "pending"),
        }
    }
}
impl std::str::FromStr for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "accepted" => Ok(Self::Accepted),
            "declined" => Ok(Self::Declined),
            "pending" => Ok(Self::Pending),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsDetailedState
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The type of credit the user is receiving.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType\","]
#[doc = "  \"description\": \"<p>The type of credit the user is receiving.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"analyst\","]
#[doc = "    \"coordinator\","]
#[doc = "    \"finder\","]
#[doc = "    \"other\","]
#[doc = "    \"remediation_developer\","]
#[doc = "    \"remediation_reviewer\","]
#[doc = "    \"remediation_verifier\","]
#[doc = "    \"reporter\","]
#[doc = "    \"sponsor\","]
#[doc = "    \"tool\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType {
    #[serde(rename = "analyst")]
    Analyst,
    #[serde(rename = "coordinator")]
    Coordinator,
    #[serde(rename = "finder")]
    Finder,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "remediation_developer")]
    RemediationDeveloper,
    #[serde(rename = "remediation_reviewer")]
    RemediationReviewer,
    #[serde(rename = "remediation_verifier")]
    RemediationVerifier,
    #[serde(rename = "reporter")]
    Reporter,
    #[serde(rename = "sponsor")]
    Sponsor,
    #[serde(rename = "tool")]
    Tool,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Analyst => write!(f, "analyst"),
            Self::Coordinator => write!(f, "coordinator"),
            Self::Finder => write!(f, "finder"),
            Self::Other => write!(f, "other"),
            Self::RemediationDeveloper => write!(f, "remediation_developer"),
            Self::RemediationReviewer => write!(f, "remediation_reviewer"),
            Self::RemediationVerifier => write!(f, "remediation_verifier"),
            Self::Reporter => write!(f, "reporter"),
            Self::Sponsor => write!(f, "sponsor"),
            Self::Tool => write!(f, "tool"),
        }
    }
}
impl std::str::FromStr for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "analyst" => Ok(Self::Analyst),
            "coordinator" => Ok(Self::Coordinator),
            "finder" => Ok(Self::Finder),
            "other" => Ok(Self::Other),
            "remediation_developer" => Ok(Self::RemediationDeveloper),
            "remediation_reviewer" => Ok(Self::RemediationReviewer),
            "remediation_verifier" => Ok(Self::RemediationVerifier),
            "reporter" => Ok(Self::Reporter),
            "sponsor" => Ok(Self::Sponsor),
            "tool" => Ok(Self::Tool),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for RepositoryAdvisoryPublishedRepositoryAdvisoryCreditsType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryCvss"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"score\","]
#[doc = "    \"vector_string\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"score\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCvssScore\","]
#[doc = "      \"description\": \"<p>The CVSS score.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"vector_string\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCvssVectorString\","]
#[doc = "      \"description\": \"<p>The CVSS vector.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryCvss {
    #[doc = "<p>The CVSS score.</p>"]
    pub score: Option<f64>,
    #[doc = "<p>The CVSS vector.</p>"]
    pub vector_string: Option<String>,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCvss>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCvss
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCvss) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"cvss_v3\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeveritiesCvssV3\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCvss\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cvss_v4\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeveritiesCvssV4\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCvss\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cvss_v3: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCvss>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cvss_v4: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCvss>,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryCwes"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"cwe_id\","]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"cwe_id\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCwesCweId\","]
#[doc = "      \"description\": \"<p>The Common Weakness Enumeration (CWE) identifier.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryCwesName\","]
#[doc = "      \"description\": \"<p>The name of the CWE.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryCwes {
    #[doc = "<p>The Common Weakness Enumeration (CWE) identifier.</p>"]
    pub cwe_id: String,
    #[doc = "<p>The name of the CWE.</p>"]
    pub name: String,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryCwes>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryCwes
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryCwes) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\","]
#[doc = "    \"value\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"type\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersValue\","]
#[doc = "      \"description\": \"<p>The identifier value.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers {
    #[serde(rename = "type")]
    pub type_: RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType,
    #[doc = "<p>The identifier value.</p>"]
    pub value: String,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiers) -> Self {
        value.clone()
    }
}
#[doc = "<p>The type of identifier.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType\","]
#[doc = "  \"description\": \"<p>The type of identifier.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"CVE\","]
#[doc = "    \"GHSA\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType {
    #[serde(rename = "CVE")]
    Cve,
    #[serde(rename = "GHSA")]
    Ghsa,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Cve => write!(f, "CVE"),
            Self::Ghsa => write!(f, "GHSA"),
        }
    }
}
impl std::str::FromStr for RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "CVE" => Ok(Self::Cve),
            "GHSA" => Ok(Self::Ghsa),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryIdentifiersType
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateFork"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkArchiveUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to download the repository as an archive.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkAssigneesUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to list the available assignees for issues in the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkBlobsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to create or retrieve a raw Git blob in the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkBranchesUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about branches in the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkCollaboratorsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about collaborators of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkCommentsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about comments on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkCommitsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about commits on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkCompareUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to compare two commits or refs.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkContentsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get the contents of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkContributorsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to list the contributors to the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkDeploymentsUrl\","]
#[doc = "      \"description\": \"<p>The API URL to list the deployments of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkDescription\","]
#[doc = "      \"description\": \"<p>The repository description.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkDownloadsUrl\","]
#[doc = "      \"description\": \"<p>The API URL to list the downloads on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkEventsUrl\","]
#[doc = "      \"description\": \"<p>The API URL to list the events of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkFork\","]
#[doc = "      \"description\": \"<p>Whether the repository is a fork.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkForksUrl\","]
#[doc = "      \"description\": \"<p>The API URL to list the forks of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkFullName\","]
#[doc = "      \"description\": \"<p>The full, globally unique, name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkGitCommitsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about Git commits of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkGitRefsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about Git refs of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkGitTagsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about Git tags of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkHooksUrl\","]
#[doc = "      \"description\": \"<p>The API URL to list the hooks on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkHtmlUrl\","]
#[doc = "      \"description\": \"<p>The URL to view the repository on GitHub.com.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkId\","]
#[doc = "      \"description\": \"<p>A unique identifier of the repository.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkIssueCommentUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about issue comments on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkIssueEventsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about issue events on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkIssuesUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about issues on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkKeysUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about deploy keys on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkLabelsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about labels of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkLanguagesUrl\","]
#[doc = "      \"description\": \"<p>The API URL to get information about the languages of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkMergesUrl\","]
#[doc = "      \"description\": \"<p>The API URL to merge branches in the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkMilestonesUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about milestones of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkNodeId\","]
#[doc = "      \"description\": \"<p>The GraphQL identifier of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkNotificationsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about notifications on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkPullsUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about pull requests on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkReleasesUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about releases on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkStargazersUrl\","]
#[doc = "      \"description\": \"<p>The API URL to list the stargazers on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkStatusesUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to get information about statuses of a commit.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkSubscribersUrl\","]
#[doc = "      \"description\": \"<p>The API URL to list the subscribers on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkSubscriptionUrl\","]
#[doc = "      \"description\": \"<p>The API URL to subscribe to notifications for this repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkTagsUrl\","]
#[doc = "      \"description\": \"<p>The API URL to get information about tags on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkTeamsUrl\","]
#[doc = "      \"description\": \"<p>The API URL to list the teams on the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkTreesUrl\","]
#[doc = "      \"description\": \"<p>A template for the API URL to create or retrieve a raw Git tree of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateForkUrl\","]
#[doc = "      \"description\": \"<p>The URL to get more information about the repository from the GitHub API.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateFork {
    #[doc = "<p>A template for the API URL to download the repository as an archive.</p>"]
    pub archive_url: String,
    #[doc = "<p>A template for the API URL to list the available assignees for issues in the repository.</p>"]
    pub assignees_url: String,
    #[doc = "<p>A template for the API URL to create or retrieve a raw Git blob in the repository.</p>"]
    pub blobs_url: String,
    #[doc = "<p>A template for the API URL to get information about branches in the repository.</p>"]
    pub branches_url: String,
    #[doc = "<p>A template for the API URL to get information about collaborators of the repository.</p>"]
    pub collaborators_url: String,
    #[doc = "<p>A template for the API URL to get information about comments on the repository.</p>"]
    pub comments_url: String,
    #[doc = "<p>A template for the API URL to get information about commits on the repository.</p>"]
    pub commits_url: String,
    #[doc = "<p>A template for the API URL to compare two commits or refs.</p>"]
    pub compare_url: String,
    #[doc = "<p>A template for the API URL to get the contents of the repository.</p>"]
    pub contents_url: String,
    #[doc = "<p>A template for the API URL to list the contributors to the repository.</p>"]
    pub contributors_url: String,
    #[doc = "<p>The API URL to list the deployments of the repository.</p>"]
    pub deployments_url: String,
    #[doc = "<p>The repository description.</p>"]
    pub description: Option<String>,
    #[doc = "<p>The API URL to list the downloads on the repository.</p>"]
    pub downloads_url: String,
    #[doc = "<p>The API URL to list the events of the repository.</p>"]
    pub events_url: String,
    #[doc = "<p>Whether the repository is a fork.</p>"]
    pub fork: bool,
    #[doc = "<p>The API URL to list the forks of the repository.</p>"]
    pub forks_url: String,
    #[doc = "<p>The full, globally unique, name of the repository.</p>"]
    pub full_name: String,
    #[doc = "<p>A template for the API URL to get information about Git commits of the repository.</p>"]
    pub git_commits_url: String,
    #[doc = "<p>A template for the API URL to get information about Git refs of the repository.</p>"]
    pub git_refs_url: String,
    #[doc = "<p>A template for the API URL to get information about Git tags of the repository.</p>"]
    pub git_tags_url: String,
    #[doc = "<p>The API URL to list the hooks on the repository.</p>"]
    pub hooks_url: String,
    #[doc = "<p>The URL to view the repository on GitHub.com.</p>"]
    pub html_url: String,
    #[doc = "<p>A unique identifier of the repository.</p>"]
    pub id: i64,
    #[doc = "<p>A template for the API URL to get information about issue comments on the repository.</p>"]
    pub issue_comment_url: String,
    #[doc = "<p>A template for the API URL to get information about issue events on the repository.</p>"]
    pub issue_events_url: String,
    #[doc = "<p>A template for the API URL to get information about issues on the repository.</p>"]
    pub issues_url: String,
    #[doc = "<p>A template for the API URL to get information about deploy keys on the repository.</p>"]
    pub keys_url: String,
    #[doc = "<p>A template for the API URL to get information about labels of the repository.</p>"]
    pub labels_url: String,
    #[doc = "<p>The API URL to get information about the languages of the repository.</p>"]
    pub languages_url: String,
    #[doc = "<p>The API URL to merge branches in the repository.</p>"]
    pub merges_url: String,
    #[doc = "<p>A template for the API URL to get information about milestones of the repository.</p>"]
    pub milestones_url: String,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = "<p>The GraphQL identifier of the repository.</p>"]
    pub node_id: String,
    #[doc = "<p>A template for the API URL to get information about notifications on the repository.</p>"]
    pub notifications_url: String,
    pub owner: DiscussionTransferredChangesNewRepositoryOrganization,
    #[doc = "<p>Whether the repository is private.</p>"]
    pub private: bool,
    #[doc = "<p>A template for the API URL to get information about pull requests on the repository.</p>"]
    pub pulls_url: String,
    #[doc = "<p>A template for the API URL to get information about releases on the repository.</p>"]
    pub releases_url: String,
    #[doc = "<p>The API URL to list the stargazers on the repository.</p>"]
    pub stargazers_url: String,
    #[doc = "<p>A template for the API URL to get information about statuses of a commit.</p>"]
    pub statuses_url: String,
    #[doc = "<p>The API URL to list the subscribers on the repository.</p>"]
    pub subscribers_url: String,
    #[doc = "<p>The API URL to subscribe to notifications for this repository.</p>"]
    pub subscription_url: String,
    #[doc = "<p>The API URL to get information about tags on the repository.</p>"]
    pub tags_url: String,
    #[doc = "<p>The API URL to list the teams on the repository.</p>"]
    pub teams_url: String,
    #[doc = "<p>A template for the API URL to create or retrieve a raw Git tree of the repository.</p>"]
    pub trees_url: String,
    #[doc = "<p>The URL to get more information about the repository from the GitHub API.</p>"]
    pub url: String,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateFork>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateFork
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryPrivateFork) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisorySeverity"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"critical\","]
#[doc = "    \"high\","]
#[doc = "    \"low\","]
#[doc = "    \"medium\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryAdvisoryPublishedRepositoryAdvisorySeverity {
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "high")]
    High,
    #[serde(rename = "low")]
    Low,
    #[serde(rename = "medium")]
    Medium,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisorySeverity>
    for RepositoryAdvisoryPublishedRepositoryAdvisorySeverity
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisorySeverity) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryAdvisoryPublishedRepositoryAdvisorySeverity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Critical => write!(f, "critical"),
            Self::High => write!(f, "high"),
            Self::Low => write!(f, "low"),
            Self::Medium => write!(f, "medium"),
        }
    }
}
impl std::str::FromStr for RepositoryAdvisoryPublishedRepositoryAdvisorySeverity {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "critical" => Ok(Self::Critical),
            "high" => Ok(Self::High),
            "low" => Ok(Self::Low),
            "medium" => Ok(Self::Medium),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for RepositoryAdvisoryPublishedRepositoryAdvisorySeverity {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for RepositoryAdvisoryPublishedRepositoryAdvisorySeverity {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for RepositoryAdvisoryPublishedRepositoryAdvisorySeverity {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The state of the advisory.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryState\","]
#[doc = "  \"description\": \"<p>The state of the advisory.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"closed\","]
#[doc = "    \"draft\","]
#[doc = "    \"published\","]
#[doc = "    \"triage\","]
#[doc = "    \"withdrawn\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryAdvisoryPublishedRepositoryAdvisoryState {
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "published")]
    Published,
    #[serde(rename = "triage")]
    Triage,
    #[serde(rename = "withdrawn")]
    Withdrawn,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryState>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryState
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryAdvisoryPublishedRepositoryAdvisoryState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Closed => write!(f, "closed"),
            Self::Draft => write!(f, "draft"),
            Self::Published => write!(f, "published"),
            Self::Triage => write!(f, "triage"),
            Self::Withdrawn => write!(f, "withdrawn"),
        }
    }
}
impl std::str::FromStr for RepositoryAdvisoryPublishedRepositoryAdvisoryState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "closed" => Ok(Self::Closed),
            "draft" => Ok(Self::Draft),
            "published" => Ok(Self::Published),
            "triage" => Ok(Self::Triage),
            "withdrawn" => Ok(Self::Withdrawn),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for RepositoryAdvisoryPublishedRepositoryAdvisoryState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for RepositoryAdvisoryPublishedRepositoryAdvisoryState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for RepositoryAdvisoryPublishedRepositoryAdvisoryState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisorySubmission"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"accepted\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"accepted\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisorySubmissionAccepted\","]
#[doc = "      \"description\": \"<p>Whether a private vulnerability report was accepted by the repository's administrators.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisorySubmission {
    #[doc = "<p>Whether a private vulnerability report was accepted by the repository's administrators.</p>"]
    pub accepted: bool,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisorySubmission>
    for RepositoryAdvisoryPublishedRepositoryAdvisorySubmission
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisorySubmission) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilities"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"package\","]
#[doc = "    \"patched_versions\","]
#[doc = "    \"vulnerable_functions\","]
#[doc = "    \"vulnerable_version_range\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"package\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackage\","]
#[doc = "      \"description\": \"<p>The name of the package affected by the vulnerability.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackage\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"patched_versions\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPatchedVersions\","]
#[doc = "      \"description\": \"<p>The package version(s) that resolve the vulnerability.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"vulnerable_functions\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesVulnerableFunctions\","]
#[doc = "      \"description\": \"<p>The functions in the package that are affected.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"vulnerable_version_range\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesVulnerableVersionRange\","]
#[doc = "      \"description\": \"<p>The range of the package versions affected by the vulnerability.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilities {
    #[doc = "<p>The name of the package affected by the vulnerability.</p>"]
    pub package: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackage>,
    #[doc = "<p>The package version(s) that resolve the vulnerability.</p>"]
    pub patched_versions: Option<String>,
    #[doc = "<p>The functions in the package that are affected.</p>"]
    pub vulnerable_functions: Option<Vec<String>>,
    #[doc = "<p>The range of the package versions affected by the vulnerability.</p>"]
    pub vulnerable_version_range: Option<String>,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilities>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilities
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilities) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackage"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"ecosystem\","]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"ecosystem\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageName\","]
#[doc = "      \"description\": \"<p>The unique package name within its ecosystem.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackage {
    pub ecosystem: RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem,
    #[doc = "<p>The unique package name within its ecosystem.</p>"]
    pub name: Option<String>,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackage>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackage
{
    fn from(value: &RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackage) -> Self {
        value.clone()
    }
}
#[doc = "<p>The package's language or package management ecosystem.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem\","]
#[doc = "  \"description\": \"<p>The package's language or package management ecosystem.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"actions\","]
#[doc = "    \"composer\","]
#[doc = "    \"erlang\","]
#[doc = "    \"go\","]
#[doc = "    \"maven\","]
#[doc = "    \"npm\","]
#[doc = "    \"nuget\","]
#[doc = "    \"other\","]
#[doc = "    \"pip\","]
#[doc = "    \"pub\","]
#[doc = "    \"rubygems\","]
#[doc = "    \"rust\","]
#[doc = "    \"swift\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem {
    #[serde(rename = "actions")]
    Actions,
    #[serde(rename = "composer")]
    Composer,
    #[serde(rename = "erlang")]
    Erlang,
    #[serde(rename = "go")]
    Go,
    #[serde(rename = "maven")]
    Maven,
    #[serde(rename = "npm")]
    Npm,
    #[serde(rename = "nuget")]
    Nuget,
    #[serde(rename = "other")]
    Other,
    #[serde(rename = "pip")]
    Pip,
    #[serde(rename = "pub")]
    Pub,
    #[serde(rename = "rubygems")]
    Rubygems,
    #[serde(rename = "rust")]
    Rust,
    #[serde(rename = "swift")]
    Swift,
}
impl From<&RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem
{
    fn from(
        value: &RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Actions => write!(f, "actions"),
            Self::Composer => write!(f, "composer"),
            Self::Erlang => write!(f, "erlang"),
            Self::Go => write!(f, "go"),
            Self::Maven => write!(f, "maven"),
            Self::Npm => write!(f, "npm"),
            Self::Nuget => write!(f, "nuget"),
            Self::Other => write!(f, "other"),
            Self::Pip => write!(f, "pip"),
            Self::Pub => write!(f, "pub"),
            Self::Rubygems => write!(f, "rubygems"),
            Self::Rust => write!(f, "rust"),
            Self::Swift => write!(f, "swift"),
        }
    }
}
impl std::str::FromStr
    for RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "actions" => Ok(Self::Actions),
            "composer" => Ok(Self::Composer),
            "erlang" => Ok(Self::Erlang),
            "go" => Ok(Self::Go),
            "maven" => Ok(Self::Maven),
            "npm" => Ok(Self::Npm),
            "nuget" => Ok(Self::Nuget),
            "other" => Ok(Self::Other),
            "pip" => Ok(Self::Pip),
            "pub" => Ok(Self::Pub),
            "rubygems" => Ok(Self::Rubygems),
            "rust" => Ok(Self::Rust),
            "swift" => Ok(Self::Swift),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryAdvisoryPublishedRepositoryAdvisoryVulnerabilitiesPackageEcosystem
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryDispatchDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"action\","]
#[doc = "    \"branch\","]
#[doc = "    \"client_payload\","]
#[doc = "    \"installation\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"action\": {"]
#[doc = "      \"title\": \"RepositoryDispatchDefaultAction\","]
#[doc = "      \"description\": \"<p>The <code>event_type</code> that was specified in the <code>POST /repos/{owner}/{repo}/dispatches</code> request body.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branch\": {"]
#[doc = "      \"title\": \"RepositoryDispatchDefaultBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"client_payload\": {"]
#[doc = "      \"title\": \"RepositoryDispatchDefaultClientPayload\","]
#[doc = "      \"description\": \"<p>The <code>client_payload</code> that was specified in the <code>POST /repos/{owner}/{repo}/dispatches</code> request body.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryDispatch {
    #[doc = "<p>The <code>event_type</code> that was specified in the <code>POST /repos/{owner}/{repo}/dispatches</code> request body.</p>"]
    pub action: String,
    #[doc = ""]
    pub branch: String,
    #[doc = "<p>The <code>client_payload</code> that was specified in the <code>POST /repos/{owner}/{repo}/dispatches</code> request body.</p>"]
    pub client_payload: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    pub installation: SomethingWithAnId,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
}
impl From<&RepositoryDispatch> for RepositoryDispatch {
    fn from(value: &RepositoryDispatch) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryEditedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"default_branch\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryEditedChangesDescription\""]
#[doc = "    },"]
#[doc = "    \"homepage\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryEditedChangesDescription\""]
#[doc = "    },"]
#[doc = "    \"topics\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryEditedChangesTopics\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub default_branch: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<RepositoryEditedChangesDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub homepage: Option<RepositoryEditedChangesDescription>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topics: Option<RepositoryEditedChangesTopics>,
}
impl From<&RepositoryEditedChanges> for RepositoryEditedChanges {
    fn from(value: &RepositoryEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryEditedChangesDescription\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"from\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"title\": \"RepositoryEditedChangesDescriptionFrom\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryEditedChangesDescription {
    #[doc = ""]
    pub from: Option<String>,
}
impl From<&RepositoryEditedChangesDescription> for RepositoryEditedChangesDescription {
    fn from(value: &RepositoryEditedChangesDescription) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryEditedChangesTopics\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"title\": \"RepositoryEditedChangesTopicsFrom\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryEditedChangesTopics {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<Vec<String>>,
}
impl From<&RepositoryEditedChangesTopics> for RepositoryEditedChangesTopics {
    fn from(value: &RepositoryEditedChangesTopics) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRenamedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"repository\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRenamedChangesRepository\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRenamedChanges {
    pub repository: RepositoryRenamedChangesRepository,
}
impl From<&RepositoryRenamedChanges> for RepositoryRenamedChanges {
    fn from(value: &RepositoryRenamedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRenamedChangesRepository\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRenamedChangesRepository {
    pub name: DiscussionEditedChangesBody,
}
impl From<&RepositoryRenamedChangesRepository> for RepositoryRenamedChangesRepository {
    fn from(value: &RepositoryRenamedChangesRepository) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRuleset"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"repository_ruleset\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryRulesetCreated\","]
#[doc = "      \"description\": \"<p>A repository ruleset was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository_ruleset\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryRulesetCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"repository_ruleset\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRuleset\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryRulesetDeleted\","]
#[doc = "      \"description\": \"<p>A repository ruleset was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository_ruleset\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryRulesetDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"repository_ruleset\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRuleset\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"RepositoryRulesetEdited\","]
#[doc = "      \"description\": \"<p>A repository ruleset was edited.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository_ruleset\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"RepositoryRulesetEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryRulesetEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"repository_ruleset\": {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRuleset\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum RepositoryRuleset {
    #[doc = "RepositoryRulesetCreated\n\n<p>A repository ruleset was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        repository_ruleset: RepositoryRulesetCreatedRepositoryRuleset,
        sender: Untyped,
    },
    #[doc = "RepositoryRulesetDeleted\n\n<p>A repository ruleset was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        repository_ruleset: RepositoryRulesetCreatedRepositoryRuleset,
        sender: Untyped,
    },
    #[doc = "RepositoryRulesetEdited\n\n<p>A repository ruleset was edited.</p>"]
    #[serde(rename = "edited")]
    Edited {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        changes: Option<RepositoryRulesetEditedChanges>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        repository_ruleset: RepositoryRulesetCreatedRepositoryRuleset,
        sender: Untyped,
    },
}
impl From<&RepositoryRuleset> for RepositoryRuleset {
    fn from(value: &RepositoryRuleset) -> Self {
        value.clone()
    }
}
#[doc = "<p>A set of rules to apply when specified conditions are met.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRuleset\","]
#[doc = "  \"description\": \"<p>A set of rules to apply when specified conditions are met.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"enforcement\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"source\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_links\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinks\""]
#[doc = "    },"]
#[doc = "    \"bypass_actors\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetBypassActors\","]
#[doc = "      \"description\": \"<p>The actors that can bypass the rules in this ruleset</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetBypassActors\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"conditions\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetConditions\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"current_user_can_bypass\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass\""]
#[doc = "    },"]
#[doc = "    \"enforcement\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetEnforcement\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetId\","]
#[doc = "      \"description\": \"<p>The ID of the ruleset</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetName\","]
#[doc = "      \"description\": \"<p>The name of the ruleset</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"rules\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRules\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRules\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"source\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetSource\","]
#[doc = "      \"description\": \"<p>The name of the source</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"source_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetSourceType\""]
#[doc = "    },"]
#[doc = "    \"target\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetTarget\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRuleset {
    #[doc = "<p>The actors that can bypass the rules in this ruleset</p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub bypass_actors: Vec<RepositoryRulesetCreatedRepositoryRulesetBypassActors>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Untyped>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub current_user_can_bypass:
        Option<RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass>,
    pub enforcement: RepositoryRulesetCreatedRepositoryRulesetEnforcement,
    #[doc = "<p>The ID of the ruleset</p>"]
    pub id: i64,
    #[serde(rename = "_links", default, skip_serializing_if = "Option::is_none")]
    pub links: Option<RepositoryRulesetCreatedRepositoryRulesetLinks>,
    #[doc = "<p>The name of the ruleset</p>"]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub rules: Vec<RepositoryRulesetCreatedRepositoryRulesetRules>,
    #[doc = "<p>The name of the source</p>"]
    pub source: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source_type: Option<RepositoryRulesetCreatedRepositoryRulesetSourceType>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<RepositoryRulesetCreatedRepositoryRulesetTarget>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}
impl From<&RepositoryRulesetCreatedRepositoryRuleset>
    for RepositoryRulesetCreatedRepositoryRuleset
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRuleset) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRulesetCreatedRepositoryRulesetBypassActors"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor_type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor_id\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorId\","]
#[doc = "      \"description\": \"<p>The ID of the actor that can bypass a ruleset. If <code>actor_type</code> is <code>OrganizationAdmin</code>, this should be <code>1</code>. If <code>actor_type</code> is <code>DeployKey</code>, this should be null. <code>OrganizationAdmin</code> is not applicable for personal repositories.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"actor_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType\""]
#[doc = "    },"]
#[doc = "    \"bypass_mode\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetBypassActors {
    #[doc = "<p>The ID of the actor that can bypass a ruleset. If <code>actor_type</code> is <code>OrganizationAdmin</code>, this should be <code>1</code>. If <code>actor_type</code> is <code>DeployKey</code>, this should be null. <code>OrganizationAdmin</code> is not applicable for personal repositories.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actor_id: Option<i64>,
    pub actor_type: RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bypass_mode: Option<RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetBypassActors>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActors
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetBypassActors) -> Self {
        value.clone()
    }
}
#[doc = "<p>The type of actor that can bypass a ruleset.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType\","]
#[doc = "  \"description\": \"<p>The type of actor that can bypass a ruleset.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"DeployKey\","]
#[doc = "    \"Integration\","]
#[doc = "    \"OrganizationAdmin\","]
#[doc = "    \"RepositoryRole\","]
#[doc = "    \"Team\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType {
    DeployKey,
    Integration,
    OrganizationAdmin,
    RepositoryRole,
    Team,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::DeployKey => write!(f, "DeployKey"),
            Self::Integration => write!(f, "Integration"),
            Self::OrganizationAdmin => write!(f, "OrganizationAdmin"),
            Self::RepositoryRole => write!(f, "RepositoryRole"),
            Self::Team => write!(f, "Team"),
        }
    }
}
impl std::str::FromStr for RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "DeployKey" => Ok(Self::DeployKey),
            "Integration" => Ok(Self::Integration),
            "OrganizationAdmin" => Ok(Self::OrganizationAdmin),
            "RepositoryRole" => Ok(Self::RepositoryRole),
            "Team" => Ok(Self::Team),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActorsActorType
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>When the specified actor can bypass the ruleset. <code>pull_request</code> means that an actor can only bypass rules on pull requests. <code>pull_request</code> is not applicable for the <code>DeployKey</code> actor type. Also, <code>pull_request</code> is only applicable to branch rulesets.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode\","]
#[doc = "  \"description\": \"<p>When the specified actor can bypass the ruleset. <code>pull_request</code> means that an actor can only bypass rules on pull requests. <code>pull_request</code> is not applicable for the <code>DeployKey</code> actor type. Also, <code>pull_request</code> is only applicable to branch rulesets.</p>\","]
#[doc = "  \"default\": \"always\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"always\","]
#[doc = "    \"pull_request\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode {
    #[serde(rename = "always")]
    Always,
    #[serde(rename = "pull_request")]
    PullRequest,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Always => write!(f, "always"),
            Self::PullRequest => write!(f, "pull_request"),
        }
    }
}
impl std::str::FromStr for RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "always" => Ok(Self::Always),
            "pull_request" => Ok(Self::PullRequest),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl Default for RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode {
    fn default() -> Self {
        RepositoryRulesetCreatedRepositoryRulesetBypassActorsBypassMode::Always
    }
}
#[doc = "<p>The bypass type of the user making the API request for this ruleset. This field is only returned when\nquerying the repository-level endpoint.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass\","]
#[doc = "  \"description\": \"<p>The bypass type of the user making the API request for this ruleset. This field is only returned when\\nquerying the repository-level endpoint.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"always\","]
#[doc = "    \"never\","]
#[doc = "    \"pull_requests_only\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass {
    #[serde(rename = "always")]
    Always,
    #[serde(rename = "never")]
    Never,
    #[serde(rename = "pull_requests_only")]
    PullRequestsOnly,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass>
    for RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Always => write!(f, "always"),
            Self::Never => write!(f, "never"),
            Self::PullRequestsOnly => write!(f, "pull_requests_only"),
        }
    }
}
impl std::str::FromStr for RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "always" => Ok(Self::Always),
            "never" => Ok(Self::Never),
            "pull_requests_only" => Ok(Self::PullRequestsOnly),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryRulesetCreatedRepositoryRulesetCurrentUserCanBypass
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The enforcement level of the ruleset. <code>evaluate</code> allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (<code>evaluate</code> is only available with GitHub Enterprise).</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetEnforcement\","]
#[doc = "  \"description\": \"<p>The enforcement level of the ruleset. <code>evaluate</code> allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (<code>evaluate</code> is only available with GitHub Enterprise).</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"active\","]
#[doc = "    \"disabled\","]
#[doc = "    \"evaluate\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetEnforcement {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "evaluate")]
    Evaluate,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetEnforcement>
    for RepositoryRulesetCreatedRepositoryRulesetEnforcement
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetEnforcement) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryRulesetCreatedRepositoryRulesetEnforcement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Active => write!(f, "active"),
            Self::Disabled => write!(f, "disabled"),
            Self::Evaluate => write!(f, "evaluate"),
        }
    }
}
impl std::str::FromStr for RepositoryRulesetCreatedRepositoryRulesetEnforcement {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "active" => Ok(Self::Active),
            "disabled" => Ok(Self::Disabled),
            "evaluate" => Ok(Self::Evaluate),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for RepositoryRulesetCreatedRepositoryRulesetEnforcement {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for RepositoryRulesetCreatedRepositoryRulesetEnforcement {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for RepositoryRulesetCreatedRepositoryRulesetEnforcement {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetLinks\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"html\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetLinksHtml\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"self\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetLinksSelf\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetLinks {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html: Option<RepositoryRulesetCreatedRepositoryRulesetLinksSelf>,
    #[serde(rename = "self", default, skip_serializing_if = "Option::is_none")]
    pub self_: Option<RepositoryRulesetCreatedRepositoryRulesetLinksSelf>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetLinks>
    for RepositoryRulesetCreatedRepositoryRulesetLinks
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetLinks) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetLinksSelf\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"href\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetLinksSelfHref\","]
#[doc = "      \"description\": \"<p>The URL of the ruleset</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetLinksSelf {
    #[doc = "<p>The URL of the ruleset</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetLinksSelf>
    for RepositoryRulesetCreatedRepositoryRulesetLinksSelf
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetLinksSelf) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRulesetCreatedRepositoryRulesetRules"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"branch_name_pattern\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesBranchNamePattern\""]
#[doc = "    },"]
#[doc = "    \"code_scanning\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanning\""]
#[doc = "    },"]
#[doc = "    \"commit_author_email_pattern\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitAuthorEmailPattern\""]
#[doc = "    },"]
#[doc = "    \"commit_message_pattern\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePattern\""]
#[doc = "    },"]
#[doc = "    \"committer_email_pattern\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitterEmailPattern\""]
#[doc = "    },"]
#[doc = "    \"creation\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCreation\""]
#[doc = "    },"]
#[doc = "    \"deletion\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesDeletion\""]
#[doc = "    },"]
#[doc = "    \"file_extension_restriction\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestriction\""]
#[doc = "    },"]
#[doc = "    \"file_path_restriction\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestriction\""]
#[doc = "    },"]
#[doc = "    \"max_file_path_length\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLength\""]
#[doc = "    },"]
#[doc = "    \"max_file_size\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSize\""]
#[doc = "    },"]
#[doc = "    \"merge_queue\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueue\""]
#[doc = "    },"]
#[doc = "    \"non_fast_forward\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesNonFastForward\""]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesPullRequest\""]
#[doc = "    },"]
#[doc = "    \"required_deployments\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeployments\""]
#[doc = "    },"]
#[doc = "    \"required_linear_history\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesRequiredLinearHistory\""]
#[doc = "    },"]
#[doc = "    \"required_signatures\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesRequiredSignatures\""]
#[doc = "    },"]
#[doc = "    \"required_status_checks\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecks\""]
#[doc = "    },"]
#[doc = "    \"tag_name_pattern\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesTagNamePattern\""]
#[doc = "    },"]
#[doc = "    \"update\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesUpdate\""]
#[doc = "    },"]
#[doc = "    \"workflows\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesWorkflows\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRules {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branch_name_pattern:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesBranchNamePattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code_scanning: Option<RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanning>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commit_author_email_pattern:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesCommitAuthorEmailPattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commit_message_pattern:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub committer_email_pattern:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesCommitterEmailPattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub creation: Option<RepositoryRulesetCreatedRepositoryRulesetRulesCreation>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deletion: Option<RepositoryRulesetCreatedRepositoryRulesetRulesDeletion>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file_extension_restriction:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestriction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file_path_restriction:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestriction>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_file_path_length:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLength>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max_file_size: Option<RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSize>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merge_queue: Option<RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueue>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub non_fast_forward: Option<RepositoryRulesetCreatedRepositoryRulesetRulesNonFastForward>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<RepositoryRulesetCreatedRepositoryRulesetRulesPullRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required_deployments:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeployments>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required_linear_history:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesRequiredLinearHistory>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required_signatures:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesRequiredSignatures>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required_status_checks:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecks>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag_name_pattern: Option<RepositoryRulesetCreatedRepositoryRulesetRulesTagNamePattern>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub update: Option<RepositoryRulesetCreatedRepositoryRulesetRulesUpdate>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflows: Option<RepositoryRulesetCreatedRepositoryRulesetRulesWorkflows>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRules>
    for RepositoryRulesetCreatedRepositoryRulesetRules
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRules) -> Self {
        value.clone()
    }
}
#[doc = "<p>Parameters to be used for the branch_name_pattern rule</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesBranchNamePattern\","]
#[doc = "  \"description\": \"<p>Parameters to be used for the branch_name_pattern rule</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesBranchNamePatternType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"branch_name_pattern\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesBranchNamePattern {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesBranchNamePattern>
    for RepositoryRulesetCreatedRepositoryRulesetRulesBranchNamePattern
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesBranchNamePattern) -> Self {
        value.clone()
    }
}
#[doc = "<p>Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanning\","]
#[doc = "  \"description\": \"<p>Choose which tools must provide code scanning results before the reference is updated. When configured, code scanning must be enabled and have results for both the commit and the reference being updated.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"code_scanning\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanning {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanning>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanning
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanning) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"code_scanning_tools\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"code_scanning_tools\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningTools\","]
#[doc = "      \"description\": \"<p>Tools that must provide code scanning results for this rule to pass.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningTools\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParameters {
    #[doc = "<p>Tools that must provide code scanning results for this rule to pass.</p>"]
    pub code_scanning_tools:
        Vec<RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningTools>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParameters
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParameters) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningTools"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"alerts_threshold\","]
#[doc = "    \"security_alerts_threshold\","]
#[doc = "    \"tool\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"alerts_threshold\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold\""]
#[doc = "    },"]
#[doc = "    \"security_alerts_threshold\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold\""]
#[doc = "    },"]
#[doc = "    \"tool\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsTool\","]
#[doc = "      \"description\": \"<p>The name of a code scanning tool</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningTools { pub alerts_threshold : RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold , pub security_alerts_threshold : RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold , # [doc = "<p>The name of a code scanning tool</p>"] pub tool : String , }
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningTools>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningTools
{
    fn from(
        value : & RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningTools,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \"<a href=\"https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels\">About code scanning alerts</a>.\"</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold\","]
#[doc = "  \"description\": \"<p>The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \\\"<a href=\\\"https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels\\\">About code scanning alerts</a>.\\\"</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"all\","]
#[doc = "    \"errors\","]
#[doc = "    \"errors_and_warnings\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold
{
    #[serde(rename = "all")]
    All,
    #[serde(rename = "errors")]
    Errors,
    #[serde(rename = "errors_and_warnings")]
    ErrorsAndWarnings,
    #[serde(rename = "none")]
    None,
}
impl From < & RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold > for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold { fn from (value : & RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold) -> Self { value . clone () } }
impl :: std :: fmt :: Display for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: All => write ! (f , "all") , Self :: Errors => write ! (f , "errors") , Self :: ErrorsAndWarnings => write ! (f , "errors_and_warnings") , Self :: None => write ! (f , "none") , } } }
impl std :: str :: FromStr for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> Result < Self , self :: error :: ConversionError > { match value { "all" => Ok (Self :: All) , "errors" => Ok (Self :: Errors) , "errors_and_warnings" => Ok (Self :: ErrorsAndWarnings) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl std :: convert :: TryFrom < & str > for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> Result < Self , self :: error :: ConversionError > { value . parse () } }
impl std :: convert :: TryFrom < & String > for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold { type Error = self :: error :: ConversionError ; fn try_from (value : & String) -> Result < Self , self :: error :: ConversionError > { value . parse () } }
impl std :: convert :: TryFrom < String > for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsAlertsThreshold { type Error = self :: error :: ConversionError ; fn try_from (value : String) -> Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "<p>The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \"<a href=\"https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels\">About code scanning alerts</a>.\"</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold\","]
#[doc = "  \"description\": \"<p>The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \\\"<a href=\\\"https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels\\\">About code scanning alerts</a>.\\\"</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"all\","]
#[doc = "    \"critical\","]
#[doc = "    \"high_or_higher\","]
#[doc = "    \"medium_or_higher\","]
#[doc = "    \"none\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold
{
    #[serde(rename = "all")]
    All,
    #[serde(rename = "critical")]
    Critical,
    #[serde(rename = "high_or_higher")]
    HighOrHigher,
    #[serde(rename = "medium_or_higher")]
    MediumOrHigher,
    #[serde(rename = "none")]
    None,
}
impl From < & RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold > for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold { fn from (value : & RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold) -> Self { value . clone () } }
impl :: std :: fmt :: Display for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { match * self { Self :: All => write ! (f , "all") , Self :: Critical => write ! (f , "critical") , Self :: HighOrHigher => write ! (f , "high_or_higher") , Self :: MediumOrHigher => write ! (f , "medium_or_higher") , Self :: None => write ! (f , "none") , } } }
impl std :: str :: FromStr for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold { type Err = self :: error :: ConversionError ; fn from_str (value : & str) -> Result < Self , self :: error :: ConversionError > { match value { "all" => Ok (Self :: All) , "critical" => Ok (Self :: Critical) , "high_or_higher" => Ok (Self :: HighOrHigher) , "medium_or_higher" => Ok (Self :: MediumOrHigher) , "none" => Ok (Self :: None) , _ => Err ("invalid value" . into ()) , } } }
impl std :: convert :: TryFrom < & str > for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold { type Error = self :: error :: ConversionError ; fn try_from (value : & str) -> Result < Self , self :: error :: ConversionError > { value . parse () } }
impl std :: convert :: TryFrom < & String > for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold { type Error = self :: error :: ConversionError ; fn try_from (value : & String) -> Result < Self , self :: error :: ConversionError > { value . parse () } }
impl std :: convert :: TryFrom < String > for RepositoryRulesetCreatedRepositoryRulesetRulesCodeScanningParametersCodeScanningToolsSecurityAlertsThreshold { type Error = self :: error :: ConversionError ; fn try_from (value : String) -> Result < Self , self :: error :: ConversionError > { value . parse () } }
#[doc = "<p>Parameters to be used for the commit_author_email_pattern rule</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitAuthorEmailPattern\","]
#[doc = "  \"description\": \"<p>Parameters to be used for the commit_author_email_pattern rule</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitAuthorEmailPatternType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"commit_author_email_pattern\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesCommitAuthorEmailPattern {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCommitAuthorEmailPattern>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitAuthorEmailPattern
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesCommitAuthorEmailPattern,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>Parameters to be used for the commit_message_pattern rule</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePattern\","]
#[doc = "  \"description\": \"<p>Parameters to be used for the commit_message_pattern rule</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"commit_message_pattern\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePattern {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePattern>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePattern
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePattern) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"operator\","]
#[doc = "    \"pattern\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersName\","]
#[doc = "      \"description\": \"<p>How this rule will appear to users.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"negate\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersNegate\","]
#[doc = "      \"description\": \"<p>If true, the rule will fail if the pattern matches.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"operator\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator\""]
#[doc = "    },"]
#[doc = "    \"pattern\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersPattern\","]
#[doc = "      \"description\": \"<p>The pattern to match with.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters {
    #[doc = "<p>How this rule will appear to users.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[doc = "<p>If true, the rule will fail if the pattern matches.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub negate: Option<bool>,
    pub operator:
        RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator,
    #[doc = "<p>The pattern to match with.</p>"]
    pub pattern: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>The operator to use for matching.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator\","]
#[doc = "  \"description\": \"<p>The operator to use for matching.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"contains\","]
#[doc = "    \"ends_with\","]
#[doc = "    \"regex\","]
#[doc = "    \"starts_with\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator {
    #[serde(rename = "contains")]
    Contains,
    #[serde(rename = "ends_with")]
    EndsWith,
    #[serde(rename = "regex")]
    Regex,
    #[serde(rename = "starts_with")]
    StartsWith,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator
{
    fn from(
        value : & RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Contains => write!(f, "contains"),
            Self::EndsWith => write!(f, "ends_with"),
            Self::Regex => write!(f, "regex"),
            Self::StartsWith => write!(f, "starts_with"),
        }
    }
}
impl std::str::FromStr
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "contains" => Ok(Self::Contains),
            "ends_with" => Ok(Self::EndsWith),
            "regex" => Ok(Self::Regex),
            "starts_with" => Ok(Self::StartsWith),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParametersOperator
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>Parameters to be used for the committer_email_pattern rule</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitterEmailPattern\","]
#[doc = "  \"description\": \"<p>Parameters to be used for the committer_email_pattern rule</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCommitterEmailPatternType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"committer_email_pattern\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesCommitterEmailPattern {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCommitterEmailPattern>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCommitterEmailPattern
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesCommitterEmailPattern) -> Self {
        value.clone()
    }
}
#[doc = "<p>Only allow users with bypass permission to create matching refs.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCreation\","]
#[doc = "  \"description\": \"<p>Only allow users with bypass permission to create matching refs.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesCreationType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"creation\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesCreation {
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesCreation>
    for RepositoryRulesetCreatedRepositoryRulesetRulesCreation
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesCreation) -> Self {
        value.clone()
    }
}
#[doc = "<p>Only allow users with bypass permissions to delete matching refs.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesDeletion\","]
#[doc = "  \"description\": \"<p>Only allow users with bypass permissions to delete matching refs.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesDeletionType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"deletion\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesDeletion {
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesDeletion>
    for RepositoryRulesetCreatedRepositoryRulesetRulesDeletion
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesDeletion) -> Self {
        value.clone()
    }
}
#[doc = "<p>Prevent commits that include files with specified file extensions from being pushed to the commit graph.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestriction\","]
#[doc = "  \"description\": \"<p>Prevent commits that include files with specified file extensions from being pushed to the commit graph.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"file_extension_restriction\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestriction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestriction>
    for RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestriction
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestriction,
    ) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"restricted_file_extensions\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"restricted_file_extensions\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionParametersRestrictedFileExtensions\","]
#[doc = "      \"description\": \"<p>The file extensions that are restricted from being pushed to the commit graph.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionParameters {
    #[doc = "<p>The file extensions that are restricted from being pushed to the commit graph.</p>"]
    pub restricted_file_extensions: Vec<String>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionParameters
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesFileExtensionRestrictionParameters,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>Prevent commits that include changes in specified file paths from being pushed to the commit graph.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestriction\","]
#[doc = "  \"description\": \"<p>Prevent commits that include changes in specified file paths from being pushed to the commit graph.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"file_path_restriction\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestriction {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestriction>
    for RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestriction
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestriction) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"restricted_file_paths\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"restricted_file_paths\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionParametersRestrictedFilePaths\","]
#[doc = "      \"description\": \"<p>The file paths that are restricted from being pushed to the commit graph.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionParameters {
    #[doc = "<p>The file paths that are restricted from being pushed to the commit graph.</p>"]
    pub restricted_file_paths: Vec<String>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionParameters
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesFilePathRestrictionParameters,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLength\","]
#[doc = "  \"description\": \"<p>Prevent commits that include file paths that exceed a specified character limit from being pushed to the commit graph.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"max_file_path_length\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLength {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLength>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLength
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLength) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"max_file_path_length\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"max_file_path_length\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthParametersMaxFilePathLength\","]
#[doc = "      \"description\": \"<p>The maximum amount of characters allowed in file paths</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthParameters {
    #[doc = "<p>The maximum amount of characters allowed in file paths</p>"]
    pub max_file_path_length: i64,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthParameters
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesMaxFilePathLengthParameters,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>Prevent commits that exceed a specified file size limit from being pushed to the commit.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSize\","]
#[doc = "  \"description\": \"<p>Prevent commits that exceed a specified file size limit from being pushed to the commit.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"max_file_size\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSize {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSize>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSize
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSize) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"max_file_size\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"max_file_size\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeParametersMaxFileSize\","]
#[doc = "      \"description\": \"<p>The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeParameters {
    #[doc = "<p>The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS).</p>"]
    pub max_file_size: i64,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeParameters
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesMaxFileSizeParameters) -> Self {
        value.clone()
    }
}
#[doc = "<p>Merges must be performed via a merge queue.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueue\","]
#[doc = "  \"description\": \"<p>Merges must be performed via a merge queue.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"merge_queue\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueue {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueue>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueue
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueue) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"check_response_timeout_minutes\","]
#[doc = "    \"grouping_strategy\","]
#[doc = "    \"max_entries_to_build\","]
#[doc = "    \"max_entries_to_merge\","]
#[doc = "    \"merge_method\","]
#[doc = "    \"min_entries_to_merge\","]
#[doc = "    \"min_entries_to_merge_wait_minutes\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"check_response_timeout_minutes\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersCheckResponseTimeoutMinutes\","]
#[doc = "      \"description\": \"<p>Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"grouping_strategy\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy\""]
#[doc = "    },"]
#[doc = "    \"max_entries_to_build\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMaxEntriesToBuild\","]
#[doc = "      \"description\": \"<p>Limit the number of queued pull requests requesting checks and workflow runs at the same time.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"max_entries_to_merge\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMaxEntriesToMerge\","]
#[doc = "      \"description\": \"<p>The maximum number of PRs that will be merged together in a group.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"merge_method\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod\""]
#[doc = "    },"]
#[doc = "    \"min_entries_to_merge\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMinEntriesToMerge\","]
#[doc = "      \"description\": \"<p>The minimum number of PRs that will be merged together in a group.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"min_entries_to_merge_wait_minutes\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMinEntriesToMergeWaitMinutes\","]
#[doc = "      \"description\": \"<p>The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParameters {
    #[doc = "<p>Maximum time for a required status check to report a conclusion. After this much time has elapsed, checks that have not reported a conclusion will be assumed to have failed</p>"]
    pub check_response_timeout_minutes: i64,
    pub grouping_strategy:
        RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy,
    #[doc = "<p>Limit the number of queued pull requests requesting checks and workflow runs at the same time.</p>"]
    pub max_entries_to_build: i64,
    #[doc = "<p>The maximum number of PRs that will be merged together in a group.</p>"]
    pub max_entries_to_merge: i64,
    pub merge_method: RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod,
    #[doc = "<p>The minimum number of PRs that will be merged together in a group.</p>"]
    pub min_entries_to_merge: i64,
    #[doc = "<p>The time merge queue should wait after the first PR is added to the queue for the minimum group size to be met. After this time has elapsed, the minimum group size will be ignored and a smaller group will be merged.</p>"]
    pub min_entries_to_merge_wait_minutes: i64,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParameters
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParameters) -> Self {
        value.clone()
    }
}
#[doc = "<p>When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy\","]
#[doc = "  \"description\": \"<p>When set to ALLGREEN, the merge commit created by merge queue for each PR in the group must pass all required checks to merge. When set to HEADGREEN, only the commit at the head of the merge group, i.e. the commit containing changes from all of the PRs in the group, must pass its required checks to merge.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"ALLGREEN\","]
#[doc = "    \"HEADGREEN\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy {
    #[serde(rename = "ALLGREEN")]
    Allgreen,
    #[serde(rename = "HEADGREEN")]
    Headgreen,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Allgreen => write!(f, "ALLGREEN"),
            Self::Headgreen => write!(f, "HEADGREEN"),
        }
    }
}
impl std::str::FromStr
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "ALLGREEN" => Ok(Self::Allgreen),
            "HEADGREEN" => Ok(Self::Headgreen),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersGroupingStrategy
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>Method to use when merging changes from queued pull requests.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod\","]
#[doc = "  \"description\": \"<p>Method to use when merging changes from queued pull requests.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"MERGE\","]
#[doc = "    \"REBASE\","]
#[doc = "    \"SQUASH\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod {
    #[serde(rename = "MERGE")]
    Merge,
    #[serde(rename = "REBASE")]
    Rebase,
    #[serde(rename = "SQUASH")]
    Squash,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod,
    ) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Merge => write!(f, "MERGE"),
            Self::Rebase => write!(f, "REBASE"),
            Self::Squash => write!(f, "SQUASH"),
        }
    }
}
impl std::str::FromStr
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod
{
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "MERGE" => Ok(Self::Merge),
            "REBASE" => Ok(Self::Rebase),
            "SQUASH" => Ok(Self::Squash),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod
{
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod
{
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
    for RepositoryRulesetCreatedRepositoryRulesetRulesMergeQueueParametersMergeMethod
{
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>Prevent users with push access from force pushing to refs.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesNonFastForward\","]
#[doc = "  \"description\": \"<p>Prevent users with push access from force pushing to refs.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesNonFastForwardType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"non_fast_forward\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesNonFastForward {
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesNonFastForward>
    for RepositoryRulesetCreatedRepositoryRulesetRulesNonFastForward
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesNonFastForward) -> Self {
        value.clone()
    }
}
#[doc = "<p>Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesPullRequest\","]
#[doc = "  \"description\": \"<p>Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"pull_request\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesPullRequest {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesPullRequest>
    for RepositoryRulesetCreatedRepositoryRulesetRulesPullRequest
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesPullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"dismiss_stale_reviews_on_push\","]
#[doc = "    \"require_code_owner_review\","]
#[doc = "    \"require_last_push_approval\","]
#[doc = "    \"required_approving_review_count\","]
#[doc = "    \"required_review_thread_resolution\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"dismiss_stale_reviews_on_push\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParametersDismissStaleReviewsOnPush\","]
#[doc = "      \"description\": \"<p>New, reviewable commits pushed will dismiss previous pull request review approvals.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"require_code_owner_review\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParametersRequireCodeOwnerReview\","]
#[doc = "      \"description\": \"<p>Require an approving review in pull requests that modify files that have a designated code owner.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"require_last_push_approval\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParametersRequireLastPushApproval\","]
#[doc = "      \"description\": \"<p>Whether the most recent reviewable push must be approved by someone other than the person who pushed it.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"required_approving_review_count\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParametersRequiredApprovingReviewCount\","]
#[doc = "      \"description\": \"<p>The number of approving reviews that are required before a pull request can be merged.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"required_review_thread_resolution\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParametersRequiredReviewThreadResolution\","]
#[doc = "      \"description\": \"<p>All conversations on code must be resolved before a pull request can be merged.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParameters {
    #[doc = "<p>New, reviewable commits pushed will dismiss previous pull request review approvals.</p>"]
    pub dismiss_stale_reviews_on_push: bool,
    #[doc = "<p>Require an approving review in pull requests that modify files that have a designated code owner.</p>"]
    pub require_code_owner_review: bool,
    #[doc = "<p>Whether the most recent reviewable push must be approved by someone other than the person who pushed it.</p>"]
    pub require_last_push_approval: bool,
    #[doc = "<p>The number of approving reviews that are required before a pull request can be merged.</p>"]
    pub required_approving_review_count: i64,
    #[doc = "<p>All conversations on code must be resolved before a pull request can be merged.</p>"]
    pub required_review_thread_resolution: bool,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParameters
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesPullRequestParameters) -> Self {
        value.clone()
    }
}
#[doc = "<p>Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeployments\","]
#[doc = "  \"description\": \"<p>Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"required_deployments\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeployments {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeployments>
    for RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeployments
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeployments) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"required_deployment_environments\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"required_deployment_environments\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsParametersRequiredDeploymentEnvironments\","]
#[doc = "      \"description\": \"<p>The environments that must be successfully deployed to before branches can be merged.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsParameters {
    #[doc = "<p>The environments that must be successfully deployed to before branches can be merged.</p>"]
    pub required_deployment_environments: Vec<String>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsParameters
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesRequiredDeploymentsParameters,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>Prevent merge commits from being pushed to matching refs.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredLinearHistory\","]
#[doc = "  \"description\": \"<p>Prevent merge commits from being pushed to matching refs.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredLinearHistoryType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"required_linear_history\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesRequiredLinearHistory {
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesRequiredLinearHistory>
    for RepositoryRulesetCreatedRepositoryRulesetRulesRequiredLinearHistory
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesRequiredLinearHistory) -> Self {
        value.clone()
    }
}
#[doc = "<p>Commits pushed to matching refs must have verified signatures.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredSignatures\","]
#[doc = "  \"description\": \"<p>Commits pushed to matching refs must have verified signatures.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredSignaturesType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"required_signatures\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesRequiredSignatures {
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesRequiredSignatures>
    for RepositoryRulesetCreatedRepositoryRulesetRulesRequiredSignatures
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesRequiredSignatures) -> Self {
        value.clone()
    }
}
#[doc = "<p>Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecks\","]
#[doc = "  \"description\": \"<p>Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"required_status_checks\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecks {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecks>
    for RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecks
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecks) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"required_status_checks\","]
#[doc = "    \"strict_required_status_checks_policy\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"do_not_enforce_on_create\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersDoNotEnforceOnCreate\","]
#[doc = "      \"description\": \"<p>Allow repositories and branches to be created if a check would otherwise prohibit it.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"required_status_checks\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecks\","]
#[doc = "      \"description\": \"<p>Status checks that are required.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecks\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"strict_required_status_checks_policy\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersStrictRequiredStatusChecksPolicy\","]
#[doc = "      \"description\": \"<p>Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParameters { # [doc = "<p>Allow repositories and branches to be created if a check would otherwise prohibit it.</p>"] # [serde (default , skip_serializing_if = "Option::is_none")] pub do_not_enforce_on_create : Option < bool > , # [doc = "<p>Status checks that are required.</p>"] pub required_status_checks : Vec < RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecks > , # [doc = "<p>Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.</p>"] pub strict_required_status_checks_policy : bool , }
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParameters
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParameters,
    ) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecks"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"context\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"context\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecksContext\","]
#[doc = "      \"description\": \"<p>The status check context name that must be present on the commit.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"integration_id\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecksIntegrationId\","]
#[doc = "      \"description\": \"<p>The optional integration ID that this status check must originate from.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecks
{
    #[doc = "<p>The status check context name that must be present on the commit.</p>"]
    pub context: String,
    #[doc = "<p>The optional integration ID that this status check must originate from.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub integration_id: Option<i64>,
}
impl From < & RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecks > for RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecks { fn from (value : & RepositoryRulesetCreatedRepositoryRulesetRulesRequiredStatusChecksParametersRequiredStatusChecks) -> Self { value . clone () } }
#[doc = "<p>Parameters to be used for the tag_name_pattern rule</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesTagNamePattern\","]
#[doc = "  \"description\": \"<p>Parameters to be used for the tag_name_pattern rule</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesTagNamePatternType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"tag_name_pattern\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesTagNamePattern {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters:
        Option<RepositoryRulesetCreatedRepositoryRulesetRulesCommitMessagePatternParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesTagNamePattern>
    for RepositoryRulesetCreatedRepositoryRulesetRulesTagNamePattern
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesTagNamePattern) -> Self {
        value.clone()
    }
}
#[doc = "<p>Only allow users with bypass permission to update matching refs.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesUpdate\","]
#[doc = "  \"description\": \"<p>Only allow users with bypass permission to update matching refs.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesUpdateParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesUpdateType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"update\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesUpdate {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RepositoryRulesetCreatedRepositoryRulesetRulesUpdateParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesUpdate>
    for RepositoryRulesetCreatedRepositoryRulesetRulesUpdate
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesUpdate) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesUpdateParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"update_allows_fetch_and_merge\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"update_allows_fetch_and_merge\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesUpdateParametersUpdateAllowsFetchAndMerge\","]
#[doc = "      \"description\": \"<p>Branch can pull changes from its upstream repository</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesUpdateParameters {
    #[doc = "<p>Branch can pull changes from its upstream repository</p>"]
    pub update_allows_fetch_and_merge: bool,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesUpdateParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesUpdateParameters
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesUpdateParameters) -> Self {
        value.clone()
    }
}
#[doc = "<p>Require all changes made to a targeted branch to pass the specified workflows before they can be merged.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflows\","]
#[doc = "  \"description\": \"<p>Require all changes made to a targeted branch to pass the specified workflows before they can be merged.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"parameters\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParameters\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"workflows\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesWorkflows {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParameters>,
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesWorkflows>
    for RepositoryRulesetCreatedRepositoryRulesetRulesWorkflows
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesWorkflows) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParameters\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"workflows\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"do_not_enforce_on_create\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersDoNotEnforceOnCreate\","]
#[doc = "      \"description\": \"<p>Allow repositories and branches to be created if a check would otherwise prohibit it.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"workflows\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflows\","]
#[doc = "      \"description\": \"<p>Workflows that must pass for this rule to pass.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflows\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParameters {
    #[doc = "<p>Allow repositories and branches to be created if a check would otherwise prohibit it.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub do_not_enforce_on_create: Option<bool>,
    #[doc = "<p>Workflows that must pass for this rule to pass.</p>"]
    pub workflows: Vec<RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflows>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParameters>
    for RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParameters
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParameters) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflows"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"path\","]
#[doc = "    \"repository_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflowsPath\","]
#[doc = "      \"description\": \"<p>The path to the workflow file</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflowsRef\","]
#[doc = "      \"description\": \"<p>The ref (branch or tag) of the workflow file to use</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repository_id\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflowsRepositoryId\","]
#[doc = "      \"description\": \"<p>The ID of the repository where the workflow is defined</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflowsSha\","]
#[doc = "      \"description\": \"<p>The commit SHA of the workflow file to use</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflows {
    #[doc = "<p>The path to the workflow file</p>"]
    pub path: String,
    #[doc = "<p>The ref (branch or tag) of the workflow file to use</p>"]
    #[serde(rename = "ref", default, skip_serializing_if = "Option::is_none")]
    pub ref_: Option<String>,
    #[doc = "<p>The ID of the repository where the workflow is defined</p>"]
    pub repository_id: i64,
    #[doc = "<p>The commit SHA of the workflow file to use</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha: Option<String>,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflows>
    for RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflows
{
    fn from(
        value: &RepositoryRulesetCreatedRepositoryRulesetRulesWorkflowsParametersWorkflows,
    ) -> Self {
        value.clone()
    }
}
#[doc = "<p>The type of the source of the ruleset</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetSourceType\","]
#[doc = "  \"description\": \"<p>The type of the source of the ruleset</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Organization\","]
#[doc = "    \"Repository\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetSourceType {
    Organization,
    Repository,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetSourceType>
    for RepositoryRulesetCreatedRepositoryRulesetSourceType
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetSourceType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryRulesetCreatedRepositoryRulesetSourceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Organization => write!(f, "Organization"),
            Self::Repository => write!(f, "Repository"),
        }
    }
}
impl std::str::FromStr for RepositoryRulesetCreatedRepositoryRulesetSourceType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "Organization" => Ok(Self::Organization),
            "Repository" => Ok(Self::Repository),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for RepositoryRulesetCreatedRepositoryRulesetSourceType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for RepositoryRulesetCreatedRepositoryRulesetSourceType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for RepositoryRulesetCreatedRepositoryRulesetSourceType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The target of the ruleset</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetCreatedRepositoryRulesetTarget\","]
#[doc = "  \"description\": \"<p>The target of the ruleset</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"branch\","]
#[doc = "    \"push\","]
#[doc = "    \"tag\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RepositoryRulesetCreatedRepositoryRulesetTarget {
    #[serde(rename = "branch")]
    Branch,
    #[serde(rename = "push")]
    Push,
    #[serde(rename = "tag")]
    Tag,
}
impl From<&RepositoryRulesetCreatedRepositoryRulesetTarget>
    for RepositoryRulesetCreatedRepositoryRulesetTarget
{
    fn from(value: &RepositoryRulesetCreatedRepositoryRulesetTarget) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RepositoryRulesetCreatedRepositoryRulesetTarget {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Branch => write!(f, "branch"),
            Self::Push => write!(f, "push"),
            Self::Tag => write!(f, "tag"),
        }
    }
}
impl std::str::FromStr for RepositoryRulesetCreatedRepositoryRulesetTarget {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "branch" => Ok(Self::Branch),
            "push" => Ok(Self::Push),
            "tag" => Ok(Self::Tag),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for RepositoryRulesetCreatedRepositoryRulesetTarget {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for RepositoryRulesetCreatedRepositoryRulesetTarget {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for RepositoryRulesetCreatedRepositoryRulesetTarget {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetEditedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"conditions\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditions\""]
#[doc = "    },"]
#[doc = "    \"enforcement\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"rules\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesRules\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<RepositoryRulesetEditedChangesConditions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforcement: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<RepositoryRulesetEditedChangesRules>,
}
impl From<&RepositoryRulesetEditedChanges> for RepositoryRulesetEditedChanges {
    fn from(value: &RepositoryRulesetEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetEditedChangesConditions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"added\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesConditionsAdded\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsAdded\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesConditionsDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsAdded\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"updated\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesConditionsUpdated\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsUpdated\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesConditions {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub added: Vec<RepositoryRulesetEditedChangesConditionsAdded>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub deleted: Vec<RepositoryRulesetEditedChangesConditionsAdded>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub updated: Vec<RepositoryRulesetEditedChangesConditionsUpdated>,
}
impl From<&RepositoryRulesetEditedChangesConditions> for RepositoryRulesetEditedChangesConditions {
    fn from(value: &RepositoryRulesetEditedChangesConditions) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRulesetEditedChangesConditionsAdded"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"ref_name\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsAddedRefName\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesConditionsAdded {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ref_name: Option<RepositoryRulesetEditedChangesConditionsAddedRefName>,
}
impl From<&RepositoryRulesetEditedChangesConditionsAdded>
    for RepositoryRulesetEditedChangesConditionsAdded
{
    fn from(value: &RepositoryRulesetEditedChangesConditionsAdded) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetEditedChangesConditionsAddedRefName\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"exclude\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesConditionsAddedRefNameExclude\","]
#[doc = "      \"description\": \"<p>Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"include\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesConditionsAddedRefNameInclude\","]
#[doc = "      \"description\": \"<p>Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts <code>~DEFAULT_BRANCH</code> to include the default branch or <code>~ALL</code> to include all branches.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesConditionsAddedRefName {
    #[doc = "<p>Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.</p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub exclude: Vec<String>,
    #[doc = "<p>Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts <code>~DEFAULT_BRANCH</code> to include the default branch or <code>~ALL</code> to include all branches.</p>"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub include: Vec<String>,
}
impl From<&RepositoryRulesetEditedChangesConditionsAddedRefName>
    for RepositoryRulesetEditedChangesConditionsAddedRefName
{
    fn from(value: &RepositoryRulesetEditedChangesConditionsAddedRefName) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRulesetEditedChangesConditionsUpdated"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"changes\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsUpdatedChanges\""]
#[doc = "    },"]
#[doc = "    \"condition\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsAdded\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesConditionsUpdated {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changes: Option<RepositoryRulesetEditedChangesConditionsUpdatedChanges>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<RepositoryRulesetEditedChangesConditionsAdded>,
}
impl From<&RepositoryRulesetEditedChangesConditionsUpdated>
    for RepositoryRulesetEditedChangesConditionsUpdated
{
    fn from(value: &RepositoryRulesetEditedChangesConditionsUpdated) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetEditedChangesConditionsUpdatedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"condition_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"exclude\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude\""]
#[doc = "    },"]
#[doc = "    \"include\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude\""]
#[doc = "    },"]
#[doc = "    \"target\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesConditionsUpdatedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition_type: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub include: Option<RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<DiscussionEditedChangesBody>,
}
impl From<&RepositoryRulesetEditedChangesConditionsUpdatedChanges>
    for RepositoryRulesetEditedChangesConditionsUpdatedChanges
{
    fn from(value: &RepositoryRulesetEditedChangesConditionsUpdatedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesConditionsUpdatedChangesIncludeFrom\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub from: Vec<String>,
}
impl From<&RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude>
    for RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude
{
    fn from(value: &RepositoryRulesetEditedChangesConditionsUpdatedChangesInclude) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetEditedChangesRules\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"added\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesRulesAdded\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRules\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesRulesDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRules\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"updated\": {"]
#[doc = "      \"title\": \"RepositoryRulesetEditedChangesRulesUpdated\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesRulesUpdated\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesRules {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub added: Vec<RepositoryRulesetCreatedRepositoryRulesetRules>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub deleted: Vec<RepositoryRulesetCreatedRepositoryRulesetRules>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub updated: Vec<RepositoryRulesetEditedChangesRulesUpdated>,
}
impl From<&RepositoryRulesetEditedChangesRules> for RepositoryRulesetEditedChangesRules {
    fn from(value: &RepositoryRulesetEditedChangesRules) -> Self {
        value.clone()
    }
}
#[doc = "RepositoryRulesetEditedChangesRulesUpdated"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"changes\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetEditedChangesRulesUpdatedChanges\""]
#[doc = "    },"]
#[doc = "    \"rule\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryRulesetCreatedRepositoryRulesetRules\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesRulesUpdated {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changes: Option<RepositoryRulesetEditedChangesRulesUpdatedChanges>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule: Option<RepositoryRulesetCreatedRepositoryRulesetRules>,
}
impl From<&RepositoryRulesetEditedChangesRulesUpdated>
    for RepositoryRulesetEditedChangesRulesUpdated
{
    fn from(value: &RepositoryRulesetEditedChangesRulesUpdated) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryRulesetEditedChangesRulesUpdatedChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"configuration\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"pattern\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"rule_type\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryRulesetEditedChangesRulesUpdatedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pattern: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rule_type: Option<DiscussionEditedChangesBody>,
}
impl From<&RepositoryRulesetEditedChangesRulesUpdatedChanges>
    for RepositoryRulesetEditedChangesRulesUpdatedChanges
{
    fn from(value: &RepositoryRulesetEditedChangesRulesUpdatedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryTransferredChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"owner\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"owner\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryTransferredChangesOwner\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryTransferredChanges {
    pub owner: RepositoryTransferredChangesOwner,
}
impl From<&RepositoryTransferredChanges> for RepositoryTransferredChanges {
    fn from(value: &RepositoryTransferredChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryTransferredChangesOwner\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"from\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryTransferredChangesOwnerFrom\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryTransferredChangesOwner {
    pub from: RepositoryTransferredChangesOwnerFrom,
}
impl From<&RepositoryTransferredChangesOwner> for RepositoryTransferredChangesOwner {
    fn from(value: &RepositoryTransferredChangesOwner) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryTransferredChangesOwnerFrom\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/RepositoryTransferredChangesOwnerFromOrganization\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromUser\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryTransferredChangesOwnerFrom {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<RepositoryTransferredChangesOwnerFromOrganization>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<DeploymentStatusCreatedDeploymentCreator>,
}
impl From<&RepositoryTransferredChangesOwnerFrom> for RepositoryTransferredChangesOwnerFrom {
    fn from(value: &RepositoryTransferredChangesOwnerFrom) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"RepositoryTransferredChangesOwnerFromOrganization\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"avatar_url\","]
#[doc = "    \"description\","]
#[doc = "    \"events_url\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"login\","]
#[doc = "    \"members_url\","]
#[doc = "    \"node_id\","]
#[doc = "    \"public_members_url\","]
#[doc = "    \"repos_url\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"login\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationLogin\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"members_url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"public_members_url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationPublicMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repos_url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationReposUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"RepositoryTransferredChangesOwnerFromOrganizationUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct RepositoryTransferredChangesOwnerFromOrganization {
    #[doc = ""]
    pub avatar_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub login: String,
    #[doc = ""]
    pub members_url: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub public_members_url: String,
    #[doc = ""]
    pub repos_url: String,
    #[doc = ""]
    pub url: String,
}
impl From<&RepositoryTransferredChangesOwnerFromOrganization>
    for RepositoryTransferredChangesOwnerFromOrganization
{
    fn from(value: &RepositoryTransferredChangesOwnerFromOrganization) -> Self {
        value.clone()
    }
}
#[doc = "SecretScanningAlert"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"secret_scanning_alert\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"SecretScanningAlertCreated\","]
#[doc = "      \"description\": \"<p>A secret scanning alert was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SecretScanningAlertCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SecretScanningAlertPubliclyLeaked\","]
#[doc = "      \"description\": \"<p>A secret scanning alert was detected in a public repo.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SecretScanningAlertPubliclyLeakedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"publicly_leaked\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SecretScanningAlertReopened\","]
#[doc = "      \"description\": \"<p>A previously closed secret scanning alert was reopened.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SecretScanningAlertReopenedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"reopened\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SecretScanningAlertResolved\","]
#[doc = "      \"description\": \"<p>A secret scanning alert was closed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SecretScanningAlertResolvedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"resolved\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SecretScanningAlertValidated\","]
#[doc = "      \"description\": \"<p>A secret scanning alert was validated.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"alert\","]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SecretScanningAlertValidatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"validated\""]
#[doc = "        },"]
#[doc = "        \"alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedAlert\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum SecretScanningAlert {
    #[doc = "SecretScanningAlertCreated\n\n<p>A secret scanning alert was created.</p>"]
    #[serde(rename = "created")]
    Created {
        alert: SecretScanningAlertLocationCreatedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "SecretScanningAlertPubliclyLeaked\n\n<p>A secret scanning alert was detected in a public repo.</p>"]
    #[serde(rename = "publicly_leaked")]
    PubliclyLeaked {
        alert: SecretScanningAlertLocationCreatedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "SecretScanningAlertReopened\n\n<p>A previously closed secret scanning alert was reopened.</p>"]
    #[serde(rename = "reopened")]
    Reopened {
        alert: SecretScanningAlertLocationCreatedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "SecretScanningAlertResolved\n\n<p>A secret scanning alert was closed.</p>"]
    #[serde(rename = "resolved")]
    Resolved {
        alert: SecretScanningAlertLocationCreatedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "SecretScanningAlertValidated\n\n<p>A secret scanning alert was validated.</p>"]
    #[serde(rename = "validated")]
    Validated {
        alert: SecretScanningAlertLocationCreatedAlert,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
}
impl From<&SecretScanningAlert> for SecretScanningAlert {
    fn from(value: &SecretScanningAlert) -> Self {
        value.clone()
    }
}
#[doc = "<p>A new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecretScanningAlertLocationCreated\","]
#[doc = "  \"description\": \"<p>A new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"alert\","]
#[doc = "    \"location\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"action\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAction\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"const\": \"created\""]
#[doc = "    },"]
#[doc = "    \"alert\": {"]
#[doc = "      \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedAlert\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"location\": {"]
#[doc = "      \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedLocation\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecretScanningAlertLocation {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    pub alert: SecretScanningAlertLocationCreatedAlert,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    pub location: SecretScanningAlertLocationCreatedLocation,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
}
impl From<&SecretScanningAlertLocation> for SecretScanningAlertLocation {
    fn from(value: &SecretScanningAlertLocation) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecretScanningAlertLocationCreatedAlert\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertHtmlUrl\","]
#[doc = "      \"description\": \"<p>The GitHub URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locations_url\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertLocationsUrl\","]
#[doc = "      \"description\": \"<p>The REST API URL of the code locations for this alert.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"multi_repo\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertMultiRepo\","]
#[doc = "      \"description\": \"<p>Whether the detected secret was found in multiple repositories in the same organization or business.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertNumber\","]
#[doc = "      \"description\": \"<p>The security alert number.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"publicly_leaked\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertPubliclyLeaked\","]
#[doc = "      \"description\": \"<p>Whether the detected secret was publicly leaked.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"push_protection_bypassed\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertPushProtectionBypassed\","]
#[doc = "      \"description\": \"<p>Whether push protection was bypassed for the detected secret.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"push_protection_bypassed_at\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertPushProtectionBypassedAt\","]
#[doc = "      \"description\": \"<p>The time that push protection was bypassed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"push_protection_bypassed_by\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"resolution\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertResolution\","]
#[doc = "      \"description\": \"<p>The reason for resolving the alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedAlertResolution\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"resolution_comment\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertResolutionComment\","]
#[doc = "      \"description\": \"<p>An optional comment to resolve an alert.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"resolved_at\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertResolvedAt\","]
#[doc = "      \"description\": \"<p>The time that the alert was resolved in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"resolved_by\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"secret_type\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertSecretType\","]
#[doc = "      \"description\": \"<p>The type of secret that secret scanning detected.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"secret_type_display_name\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertSecretTypeDisplayName\","]
#[doc = "      \"description\": \"<p>User-friendly name for the detected secret, matching the <code>secret_type</code>.\\nFor a list of built-in patterns, see \\\"<a href=\\\"https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets\\\">Supported secret scanning patterns</a>.\\\"</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedAlertUrl\","]
#[doc = "      \"description\": \"<p>The REST API URL of the alert resource.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"validity\": {"]
#[doc = "      \"$ref\": \"#/$defs/SecretScanningAlertLocationCreatedAlertValidity\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecretScanningAlertLocationCreatedAlert {
    #[doc = "<p>The time that the alert was created in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[doc = "<p>The GitHub URL of the alert resource.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = "<p>The REST API URL of the code locations for this alert.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub locations_url: Option<String>,
    #[doc = "<p>Whether the detected secret was found in multiple repositories in the same organization or business.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub multi_repo: Option<bool>,
    #[doc = "<p>The security alert number.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub number: Option<i64>,
    #[doc = "<p>Whether the detected secret was publicly leaked.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publicly_leaked: Option<bool>,
    #[doc = "<p>Whether push protection was bypassed for the detected secret.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push_protection_bypassed: Option<bool>,
    #[doc = "<p>The time that push protection was bypassed in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push_protection_bypassed_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push_protection_bypassed_by: Option<DiscussionTransferredChangesNewRepositoryOrganization>,
    #[doc = "<p>The reason for resolving the alert.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SecretScanningAlertLocationCreatedAlertResolution>,
    #[doc = "<p>An optional comment to resolve an alert.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution_comment: Option<String>,
    #[doc = "<p>The time that the alert was resolved in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolved_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolved_by: Option<DiscussionTransferredChangesNewRepositoryOrganization>,
    #[doc = "<p>The type of secret that secret scanning detected.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_type: Option<String>,
    #[doc = "<p>User-friendly name for the detected secret, matching the <code>secret_type</code>.\nFor a list of built-in patterns, see \"<a href=\"https://docs.github.com/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets\">Supported secret scanning patterns</a>.\"</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret_type_display_name: Option<String>,
    #[doc = ""]
    #[serde(default)]
    pub updated_at: (),
    #[doc = "<p>The REST API URL of the alert resource.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validity: Option<SecretScanningAlertLocationCreatedAlertValidity>,
}
impl From<&SecretScanningAlertLocationCreatedAlert> for SecretScanningAlertLocationCreatedAlert {
    fn from(value: &SecretScanningAlertLocationCreatedAlert) -> Self {
        value.clone()
    }
}
#[doc = "SecretScanningAlertLocationCreatedAlertResolution"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"false_positive\","]
#[doc = "    \"pattern_deleted\","]
#[doc = "    \"pattern_edited\","]
#[doc = "    \"revoked\","]
#[doc = "    \"used_in_tests\","]
#[doc = "    \"wont_fix\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum SecretScanningAlertLocationCreatedAlertResolution {
    #[serde(rename = "false_positive")]
    FalsePositive,
    #[serde(rename = "pattern_deleted")]
    PatternDeleted,
    #[serde(rename = "pattern_edited")]
    PatternEdited,
    #[serde(rename = "revoked")]
    Revoked,
    #[serde(rename = "used_in_tests")]
    UsedInTests,
    #[serde(rename = "wont_fix")]
    WontFix,
}
impl From<&SecretScanningAlertLocationCreatedAlertResolution>
    for SecretScanningAlertLocationCreatedAlertResolution
{
    fn from(value: &SecretScanningAlertLocationCreatedAlertResolution) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for SecretScanningAlertLocationCreatedAlertResolution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::FalsePositive => write!(f, "false_positive"),
            Self::PatternDeleted => write!(f, "pattern_deleted"),
            Self::PatternEdited => write!(f, "pattern_edited"),
            Self::Revoked => write!(f, "revoked"),
            Self::UsedInTests => write!(f, "used_in_tests"),
            Self::WontFix => write!(f, "wont_fix"),
        }
    }
}
impl std::str::FromStr for SecretScanningAlertLocationCreatedAlertResolution {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "false_positive" => Ok(Self::FalsePositive),
            "pattern_deleted" => Ok(Self::PatternDeleted),
            "pattern_edited" => Ok(Self::PatternEdited),
            "revoked" => Ok(Self::Revoked),
            "used_in_tests" => Ok(Self::UsedInTests),
            "wont_fix" => Ok(Self::WontFix),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for SecretScanningAlertLocationCreatedAlertResolution {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for SecretScanningAlertLocationCreatedAlertResolution {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for SecretScanningAlertLocationCreatedAlertResolution {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The token status as of the latest validity check.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecretScanningAlertLocationCreatedAlertValidity\","]
#[doc = "  \"description\": \"<p>The token status as of the latest validity check.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"active\","]
#[doc = "    \"inactive\","]
#[doc = "    \"unknown\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum SecretScanningAlertLocationCreatedAlertValidity {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "unknown")]
    Unknown,
}
impl From<&SecretScanningAlertLocationCreatedAlertValidity>
    for SecretScanningAlertLocationCreatedAlertValidity
{
    fn from(value: &SecretScanningAlertLocationCreatedAlertValidity) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for SecretScanningAlertLocationCreatedAlertValidity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Active => write!(f, "active"),
            Self::Inactive => write!(f, "inactive"),
            Self::Unknown => write!(f, "unknown"),
        }
    }
}
impl std::str::FromStr for SecretScanningAlertLocationCreatedAlertValidity {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "active" => Ok(Self::Active),
            "inactive" => Ok(Self::Inactive),
            "unknown" => Ok(Self::Unknown),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for SecretScanningAlertLocationCreatedAlertValidity {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for SecretScanningAlertLocationCreatedAlertValidity {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for SecretScanningAlertLocationCreatedAlertValidity {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecretScanningAlertLocationCreatedLocation\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"details\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"SecretScanningAlertLocationCreatedLocationType\","]
#[doc = "      \"description\": \"<p>The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.</p>\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"commit\","]
#[doc = "        \"discussion_body\","]
#[doc = "        \"discussion_comment\","]
#[doc = "        \"discussion_title\","]
#[doc = "        \"issue_body\","]
#[doc = "        \"issue_comment\","]
#[doc = "        \"issue_title\","]
#[doc = "        \"pull_request_body\","]
#[doc = "        \"pull_request_comment\","]
#[doc = "        \"pull_request_review\","]
#[doc = "        \"pull_request_review_comment\","]
#[doc = "        \"pull_request_title\","]
#[doc = "        \"wiki_commit\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecretScanningAlertLocationCreatedLocation {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub details: Option<Untyped>,
    #[doc = "<p>The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.</p>"]
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub type_: Option<SecretScanningAlertLocationCreatedLocationType>,
}
impl From<&SecretScanningAlertLocationCreatedLocation>
    for SecretScanningAlertLocationCreatedLocation
{
    fn from(value: &SecretScanningAlertLocationCreatedLocation) -> Self {
        value.clone()
    }
}
#[doc = "<p>The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecretScanningAlertLocationCreatedLocationType\","]
#[doc = "  \"description\": \"<p>The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"commit\","]
#[doc = "    \"discussion_body\","]
#[doc = "    \"discussion_comment\","]
#[doc = "    \"discussion_title\","]
#[doc = "    \"issue_body\","]
#[doc = "    \"issue_comment\","]
#[doc = "    \"issue_title\","]
#[doc = "    \"pull_request_body\","]
#[doc = "    \"pull_request_comment\","]
#[doc = "    \"pull_request_review\","]
#[doc = "    \"pull_request_review_comment\","]
#[doc = "    \"pull_request_title\","]
#[doc = "    \"wiki_commit\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum SecretScanningAlertLocationCreatedLocationType {
    #[serde(rename = "commit")]
    Commit,
    #[serde(rename = "discussion_body")]
    DiscussionBody,
    #[serde(rename = "discussion_comment")]
    DiscussionComment,
    #[serde(rename = "discussion_title")]
    DiscussionTitle,
    #[serde(rename = "issue_body")]
    IssueBody,
    #[serde(rename = "issue_comment")]
    IssueComment,
    #[serde(rename = "issue_title")]
    IssueTitle,
    #[serde(rename = "pull_request_body")]
    PullRequestBody,
    #[serde(rename = "pull_request_comment")]
    PullRequestComment,
    #[serde(rename = "pull_request_review")]
    PullRequestReview,
    #[serde(rename = "pull_request_review_comment")]
    PullRequestReviewComment,
    #[serde(rename = "pull_request_title")]
    PullRequestTitle,
    #[serde(rename = "wiki_commit")]
    WikiCommit,
}
impl From<&SecretScanningAlertLocationCreatedLocationType>
    for SecretScanningAlertLocationCreatedLocationType
{
    fn from(value: &SecretScanningAlertLocationCreatedLocationType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for SecretScanningAlertLocationCreatedLocationType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Commit => write!(f, "commit"),
            Self::DiscussionBody => write!(f, "discussion_body"),
            Self::DiscussionComment => write!(f, "discussion_comment"),
            Self::DiscussionTitle => write!(f, "discussion_title"),
            Self::IssueBody => write!(f, "issue_body"),
            Self::IssueComment => write!(f, "issue_comment"),
            Self::IssueTitle => write!(f, "issue_title"),
            Self::PullRequestBody => write!(f, "pull_request_body"),
            Self::PullRequestComment => write!(f, "pull_request_comment"),
            Self::PullRequestReview => write!(f, "pull_request_review"),
            Self::PullRequestReviewComment => write!(f, "pull_request_review_comment"),
            Self::PullRequestTitle => write!(f, "pull_request_title"),
            Self::WikiCommit => write!(f, "wiki_commit"),
        }
    }
}
impl std::str::FromStr for SecretScanningAlertLocationCreatedLocationType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "commit" => Ok(Self::Commit),
            "discussion_body" => Ok(Self::DiscussionBody),
            "discussion_comment" => Ok(Self::DiscussionComment),
            "discussion_title" => Ok(Self::DiscussionTitle),
            "issue_body" => Ok(Self::IssueBody),
            "issue_comment" => Ok(Self::IssueComment),
            "issue_title" => Ok(Self::IssueTitle),
            "pull_request_body" => Ok(Self::PullRequestBody),
            "pull_request_comment" => Ok(Self::PullRequestComment),
            "pull_request_review" => Ok(Self::PullRequestReview),
            "pull_request_review_comment" => Ok(Self::PullRequestReviewComment),
            "pull_request_title" => Ok(Self::PullRequestTitle),
            "wiki_commit" => Ok(Self::WikiCommit),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for SecretScanningAlertLocationCreatedLocationType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for SecretScanningAlertLocationCreatedLocationType {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for SecretScanningAlertLocationCreatedLocationType {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "SecurityAdvisory"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"security_advisory\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublished\","]
#[doc = "      \"description\": \"<p>A security advisory was published to the GitHub community.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"security_advisory\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SecurityAdvisoryPublishedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"published\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"security_advisory\": {"]
#[doc = "          \"$ref\": \"#/$defs/SecurityAdvisoryPublishedSecurityAdvisory\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SecurityAdvisoryUpdated\","]
#[doc = "      \"description\": \"<p>The metadata or description of a security advisory was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"security_advisory\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SecurityAdvisoryUpdatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"updated\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"security_advisory\": {"]
#[doc = "          \"$ref\": \"#/$defs/SecurityAdvisoryPublishedSecurityAdvisory\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawn\","]
#[doc = "      \"description\": \"<p>A previously published security advisory was withdrawn.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"security_advisory\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SecurityAdvisoryWithdrawnAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"withdrawn\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"security_advisory\": {"]
#[doc = "          \"$ref\": \"#/$defs/SecurityAdvisoryWithdrawnSecurityAdvisory\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum SecurityAdvisory {
    #[doc = "SecurityAdvisoryPublished\n\n<p>A security advisory was published to the GitHub community.</p>"]
    #[serde(rename = "published")]
    Published {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        security_advisory: SecurityAdvisoryPublishedSecurityAdvisory,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "SecurityAdvisoryUpdated\n\n<p>The metadata or description of a security advisory was changed.</p>"]
    #[serde(rename = "updated")]
    Updated {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        security_advisory: SecurityAdvisoryPublishedSecurityAdvisory,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
    #[doc = "SecurityAdvisoryWithdrawn\n\n<p>A previously published security advisory was withdrawn.</p>"]
    #[serde(rename = "withdrawn")]
    Withdrawn {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        security_advisory: SecurityAdvisoryWithdrawnSecurityAdvisory,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
    },
}
impl From<&SecurityAdvisory> for SecurityAdvisory {
    fn from(value: &SecurityAdvisory) -> Self {
        value.clone()
    }
}
#[doc = "<p>The details of the security advisory, including summary, description, and severity.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecurityAdvisoryPublishedSecurityAdvisory\","]
#[doc = "  \"description\": \"<p>The details of the security advisory, including summary, description, and severity.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"cvss\","]
#[doc = "    \"cwes\","]
#[doc = "    \"description\","]
#[doc = "    \"ghsa_id\","]
#[doc = "    \"identifiers\","]
#[doc = "    \"published_at\","]
#[doc = "    \"references\","]
#[doc = "    \"severity\","]
#[doc = "    \"summary\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"vulnerabilities\","]
#[doc = "    \"withdrawn_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"cvss\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss\""]
#[doc = "    },"]
#[doc = "    \"cvss_severities\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryCvssSeverities\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cwes\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryCwes\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCwes\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ghsa_id\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryGhsaId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"identifiers\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryPublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"references\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryReferences\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"severity\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisorySeverity\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisorySummary\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"vulnerabilities\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"withdrawn_at\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryWithdrawnAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecurityAdvisoryPublishedSecurityAdvisory {
    pub cvss: DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cvss_severities: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities>,
    #[doc = ""]
    pub cwes: Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryCwes>,
    #[doc = ""]
    pub description: String,
    #[doc = ""]
    pub ghsa_id: String,
    #[doc = ""]
    pub identifiers: Vec<SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers>,
    #[doc = ""]
    pub published_at: String,
    #[doc = ""]
    pub references: Vec<DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences>,
    #[doc = ""]
    pub severity: String,
    #[doc = ""]
    pub summary: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub vulnerabilities: Vec<SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities>,
    #[doc = ""]
    pub withdrawn_at: Option<String>,
}
impl From<&SecurityAdvisoryPublishedSecurityAdvisory>
    for SecurityAdvisoryPublishedSecurityAdvisory
{
    fn from(value: &SecurityAdvisoryPublishedSecurityAdvisory) -> Self {
        value.clone()
    }
}
#[doc = "SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"type\","]
#[doc = "    \"value\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"type\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryIdentifiersType\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"value\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryIdentifiersValue\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers {
    #[doc = ""]
    #[serde(rename = "type")]
    pub type_: String,
    #[doc = ""]
    pub value: String,
}
impl From<&SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers>
    for SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers
{
    fn from(value: &SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers) -> Self {
        value.clone()
    }
}
#[doc = "SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"first_patched_version\","]
#[doc = "    \"package\","]
#[doc = "    \"severity\","]
#[doc = "    \"vulnerable_version_range\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"first_patched_version\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunRequestedActionRequestedAction\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"package\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertDependencyPackage\""]
#[doc = "    },"]
#[doc = "    \"severity\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesSeverity\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"vulnerable_version_range\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesVulnerableVersionRange\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities {
    #[doc = ""]
    pub first_patched_version: Option<CheckRunRequestedActionRequestedAction>,
    pub package: DependabotAlertAutoDismissedAlertDependencyPackage,
    #[doc = ""]
    pub severity: String,
    #[doc = ""]
    pub vulnerable_version_range: String,
}
impl From<&SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities>
    for SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities
{
    fn from(value: &SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities) -> Self {
        value.clone()
    }
}
#[doc = "<p>The details of the security advisory, including summary, description, and severity.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisory\","]
#[doc = "  \"description\": \"<p>The details of the security advisory, including summary, description, and severity.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"cvss\","]
#[doc = "    \"cwes\","]
#[doc = "    \"description\","]
#[doc = "    \"ghsa_id\","]
#[doc = "    \"identifiers\","]
#[doc = "    \"published_at\","]
#[doc = "    \"references\","]
#[doc = "    \"severity\","]
#[doc = "    \"summary\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"vulnerabilities\","]
#[doc = "    \"withdrawn_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"cvss\": {"]
#[doc = "      \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss\""]
#[doc = "    },"]
#[doc = "    \"cvss_severities\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryCvssSeverities\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"cwes\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryCwes\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/RepositoryAdvisoryPublishedRepositoryAdvisoryCwes\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"ghsa_id\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryGhsaId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"identifiers\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiers\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"published_at\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryPublishedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"references\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryReferences\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"severity\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisorySeverity\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"summary\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisorySummary\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"vulnerabilities\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilities\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"withdrawn_at\": {"]
#[doc = "      \"title\": \"SecurityAdvisoryWithdrawnSecurityAdvisoryWithdrawnAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecurityAdvisoryWithdrawnSecurityAdvisory {
    pub cvss: DependabotAlertAutoDismissedAlertSecurityAdvisoryCvss,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cvss_severities: Option<RepositoryAdvisoryPublishedRepositoryAdvisoryCvssSeverities>,
    #[doc = ""]
    pub cwes: Vec<RepositoryAdvisoryPublishedRepositoryAdvisoryCwes>,
    #[doc = ""]
    pub description: String,
    #[doc = ""]
    pub ghsa_id: String,
    #[doc = ""]
    pub identifiers: Vec<SecurityAdvisoryPublishedSecurityAdvisoryIdentifiers>,
    #[doc = ""]
    pub published_at: String,
    #[doc = ""]
    pub references: Vec<DependabotAlertAutoDismissedAlertSecurityAdvisoryReferences>,
    #[doc = ""]
    pub severity: String,
    #[doc = ""]
    pub summary: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub vulnerabilities: Vec<SecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities>,
    #[doc = ""]
    pub withdrawn_at: String,
}
impl From<&SecurityAdvisoryWithdrawnSecurityAdvisory>
    for SecurityAdvisoryWithdrawnSecurityAdvisory
{
    fn from(value: &SecurityAdvisoryWithdrawnSecurityAdvisory) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecurityAndAnalysisDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"changes\","]
#[doc = "    \"repository\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"changes\": {"]
#[doc = "      \"$ref\": \"#/$defs/SecurityAndAnalysisDefaultChanges\""]
#[doc = "    },"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecurityAndAnalysis {
    pub changes: SecurityAndAnalysisDefaultChanges,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub repository: SomethingWithAnId,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<Untyped>,
}
impl From<&SecurityAndAnalysis> for SecurityAndAnalysis {
    fn from(value: &SecurityAndAnalysis) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecurityAndAnalysisDefaultChanges\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"$ref\": \"#/$defs/SecurityAndAnalysisDefaultChangesFrom\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecurityAndAnalysisDefaultChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<SecurityAndAnalysisDefaultChangesFrom>,
}
impl From<&SecurityAndAnalysisDefaultChanges> for SecurityAndAnalysisDefaultChanges {
    fn from(value: &SecurityAndAnalysisDefaultChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SecurityAndAnalysisDefaultChangesFrom\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"security_and_analysis\": {"]
#[doc = "      \"title\": \"SecurityAndAnalysisDefaultChangesFromSecurityAndAnalysis\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SecurityAndAnalysisDefaultChangesFrom {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub security_and_analysis:
        Option<CheckRunCompletedCheckRunCheckSuiteRepositorySecurityAndAnalysis>,
}
impl From<&SecurityAndAnalysisDefaultChangesFrom> for SecurityAndAnalysisDefaultChangesFrom {
    fn from(value: &SecurityAndAnalysisDefaultChangesFrom) -> Self {
        value.clone()
    }
}
#[doc = "<p>The GitHub App installation. Webhook payloads contain the <code>installation</code> property when the event is configured\nfor and sent to a GitHub App. For more information,\nsee \"<a href=\"https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps\">Using webhooks with GitHub Apps</a>.\"</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamAddDefaultInstallation\","]
#[doc = "  \"description\": \"<p>The GitHub App installation. Webhook payloads contain the <code>installation</code> property when the event is configured\\nfor and sent to a GitHub App. For more information,\\nsee \\\"<a href=\\\"https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps\\\">Using webhooks with GitHub Apps</a>.\\\"</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"id\": {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug, Default)]
pub struct SomethingWithAnId {
    pub id: i64,
}
impl From<&SomethingWithAnId> for SomethingWithAnId {
    fn from(value: &SomethingWithAnId) -> Self {
        value.clone()
    }
}
#[doc = "Star"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"star\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"StarCreated\","]
#[doc = "      \"description\": \"<p>Someone starred a repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"starred_at\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"StarCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"starred_at\": {"]
#[doc = "          \"title\": \"StarCreatedStarredAt\","]
#[doc = "          \"description\": \"<p>The time the star was created. This is a timestamp in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>. Will be <code>null</code> for the <code>deleted</code> action.</p>\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"StarDeleted\","]
#[doc = "      \"description\": \"<p>Someone unstarred the repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"starred_at\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"StarDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"starred_at\": {"]
#[doc = "          \"title\": \"StarDeletedStarredAt\","]
#[doc = "          \"description\": \"<p>The time the star was created. This is a timestamp in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>. Will be <code>null</code> for the <code>deleted</code> action.</p>\","]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Star {
    #[doc = "StarCreated\n\n<p>Someone starred a repository.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        #[doc = "<p>The time the star was created. This is a timestamp in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>. Will be <code>null</code> for the <code>deleted</code> action.</p>"]
        starred_at: Option<String>,
    },
    #[doc = "StarDeleted\n\n<p>Someone unstarred the repository.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        #[doc = "<p>The time the star was created. This is a timestamp in ISO 8601 format: <code>YYYY-MM-DDTHH:MM:SSZ</code>. Will be <code>null</code> for the <code>deleted</code> action.</p>"]
        starred_at: (),
    },
}
impl From<&Star> for Star {
    fn from(value: &Star) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"StatusDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"branches\","]
#[doc = "    \"commit\","]
#[doc = "    \"context\","]
#[doc = "    \"created_at\","]
#[doc = "    \"description\","]
#[doc = "    \"id\","]
#[doc = "    \"name\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\","]
#[doc = "    \"sha\","]
#[doc = "    \"state\","]
#[doc = "    \"target_url\","]
#[doc = "    \"updated_at\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"avatar_url\": {"]
#[doc = "      \"title\": \"StatusDefaultAvatarUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"branches\": {"]
#[doc = "      \"title\": \"StatusDefaultBranches\","]
#[doc = "      \"description\": \"<p>An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/StatusDefaultBranches\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/StatusDefaultCommit\""]
#[doc = "    },"]
#[doc = "    \"context\": {"]
#[doc = "      \"title\": \"StatusDefaultContext\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"StatusDefaultCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"StatusDefaultDescription\","]
#[doc = "      \"description\": \"<p>The optional human-readable description added to the status.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"StatusDefaultId\","]
#[doc = "      \"description\": \"<p>The unique identifier of the status.</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"StatusDefaultName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"StatusDefaultSha\","]
#[doc = "      \"description\": \"<p>The Commit SHA.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"StatusDefaultState\","]
#[doc = "      \"description\": \"<p>The new state. Can be <code>pending</code>, <code>success</code>, <code>failure</code>, or <code>error</code>.</p>\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"error\","]
#[doc = "        \"failure\","]
#[doc = "        \"pending\","]
#[doc = "        \"success\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"target_url\": {"]
#[doc = "      \"title\": \"StatusDefaultTargetUrl\","]
#[doc = "      \"description\": \"<p>The optional link added to the status.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"StatusDefaultUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct Status {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    #[doc = "<p>An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.</p>"]
    pub branches: Vec<StatusDefaultBranches>,
    pub commit: StatusDefaultCommit,
    #[doc = ""]
    pub context: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The optional human-readable description added to the status.</p>"]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[doc = "<p>The unique identifier of the status.</p>"]
    pub id: i64,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[doc = ""]
    pub name: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
    #[doc = "<p>The Commit SHA.</p>"]
    pub sha: String,
    #[doc = "<p>The new state. Can be <code>pending</code>, <code>success</code>, <code>failure</code>, or <code>error</code>.</p>"]
    pub state: StatusDefaultState,
    #[doc = "<p>The optional link added to the status.</p>"]
    pub target_url: Option<String>,
    #[doc = ""]
    pub updated_at: String,
}
impl From<&Status> for Status {
    fn from(value: &Status) -> Self {
        value.clone()
    }
}
#[doc = "StatusDefaultBranches"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"commit\","]
#[doc = "    \"name\","]
#[doc = "    \"protected\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/StatusDefaultBranchesCommit\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"StatusDefaultBranchesName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"protected\": {"]
#[doc = "      \"title\": \"StatusDefaultBranchesProtected\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct StatusDefaultBranches {
    pub commit: StatusDefaultBranchesCommit,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub protected: bool,
}
impl From<&StatusDefaultBranches> for StatusDefaultBranches {
    fn from(value: &StatusDefaultBranches) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"StatusDefaultBranchesCommit\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"sha\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"StatusDefaultBranchesCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"StatusDefaultBranchesCommitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct StatusDefaultBranchesCommit {
    #[doc = ""]
    pub sha: Option<String>,
    #[doc = ""]
    pub url: Option<String>,
}
impl From<&StatusDefaultBranchesCommit> for StatusDefaultBranchesCommit {
    fn from(value: &StatusDefaultBranchesCommit) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"StatusDefaultCommit\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commit\","]
#[doc = "    \"committer\","]
#[doc = "    \"html_url\","]
#[doc = "    \"node_id\","]
#[doc = "    \"parents\","]
#[doc = "    \"sha\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitAuthor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/StatusDefaultCommitCommit\""]
#[doc = "    },"]
#[doc = "    \"committer\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitter\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"parents\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitParents\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/StatusDefaultCommitParents\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct StatusDefaultCommit {
    #[doc = ""]
    pub author: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = ""]
    pub comments_url: String,
    pub commit: StatusDefaultCommitCommit,
    #[doc = ""]
    pub committer: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub parents: Vec<StatusDefaultCommitParents>,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub url: String,
}
impl From<&StatusDefaultCommit> for StatusDefaultCommit {
    fn from(value: &StatusDefaultCommit) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"StatusDefaultCommitCommit\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"comment_count\","]
#[doc = "    \"committer\","]
#[doc = "    \"message\","]
#[doc = "    \"tree\","]
#[doc = "    \"url\","]
#[doc = "    \"verification\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"$ref\": \"#/$defs/PushDefaultCommitsAuthor\""]
#[doc = "    },"]
#[doc = "    \"comment_count\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitCommentCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"committer\": {"]
#[doc = "      \"$ref\": \"#/$defs/PushDefaultCommitsAuthor\""]
#[doc = "    },"]
#[doc = "    \"message\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitMessage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tree\": {"]
#[doc = "      \"$ref\": \"#/$defs/StatusDefaultCommitCommitTree\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"verification\": {"]
#[doc = "      \"$ref\": \"#/$defs/StatusDefaultCommitCommitVerification\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct StatusDefaultCommitCommit {
    pub author: PushDefaultCommitsAuthor,
    #[doc = ""]
    pub comment_count: i64,
    pub committer: PushDefaultCommitsAuthor,
    #[doc = ""]
    pub message: String,
    pub tree: StatusDefaultCommitCommitTree,
    #[doc = ""]
    pub url: String,
    pub verification: StatusDefaultCommitCommitVerification,
}
impl From<&StatusDefaultCommitCommit> for StatusDefaultCommitCommit {
    fn from(value: &StatusDefaultCommitCommit) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"StatusDefaultCommitCommitTree\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"sha\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitTreeSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitTreeUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct StatusDefaultCommitCommitTree {
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub url: String,
}
impl From<&StatusDefaultCommitCommitTree> for StatusDefaultCommitCommitTree {
    fn from(value: &StatusDefaultCommitCommitTree) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"StatusDefaultCommitCommitVerification\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"payload\","]
#[doc = "    \"reason\","]
#[doc = "    \"signature\","]
#[doc = "    \"verified\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"payload\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitVerificationPayload\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"reason\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitVerificationReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"bad_cert\","]
#[doc = "        \"bad_email\","]
#[doc = "        \"expired_key\","]
#[doc = "        \"gpgverify_error\","]
#[doc = "        \"gpgverify_unavailable\","]
#[doc = "        \"invalid\","]
#[doc = "        \"malformed_signature\","]
#[doc = "        \"no_user\","]
#[doc = "        \"not_signing_key\","]
#[doc = "        \"ocsp_pending\","]
#[doc = "        \"unknown_key\","]
#[doc = "        \"unknown_signature_type\","]
#[doc = "        \"unsigned\","]
#[doc = "        \"unverified_email\","]
#[doc = "        \"valid\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"signature\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitVerificationSignature\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"verified\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitCommitVerificationVerified\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct StatusDefaultCommitCommitVerification {
    #[doc = ""]
    pub payload: Option<String>,
    #[doc = ""]
    pub reason: StatusDefaultCommitCommitVerificationReason,
    #[doc = ""]
    pub signature: Option<String>,
    #[doc = ""]
    pub verified: bool,
}
impl From<&StatusDefaultCommitCommitVerification> for StatusDefaultCommitCommitVerification {
    fn from(value: &StatusDefaultCommitCommitVerification) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"StatusDefaultCommitCommitVerificationReason\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"bad_cert\","]
#[doc = "    \"bad_email\","]
#[doc = "    \"expired_key\","]
#[doc = "    \"gpgverify_error\","]
#[doc = "    \"gpgverify_unavailable\","]
#[doc = "    \"invalid\","]
#[doc = "    \"malformed_signature\","]
#[doc = "    \"no_user\","]
#[doc = "    \"not_signing_key\","]
#[doc = "    \"ocsp_pending\","]
#[doc = "    \"unknown_key\","]
#[doc = "    \"unknown_signature_type\","]
#[doc = "    \"unsigned\","]
#[doc = "    \"unverified_email\","]
#[doc = "    \"valid\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum StatusDefaultCommitCommitVerificationReason {
    #[serde(rename = "bad_cert")]
    BadCert,
    #[serde(rename = "bad_email")]
    BadEmail,
    #[serde(rename = "expired_key")]
    ExpiredKey,
    #[serde(rename = "gpgverify_error")]
    GpgverifyError,
    #[serde(rename = "gpgverify_unavailable")]
    GpgverifyUnavailable,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "malformed_signature")]
    MalformedSignature,
    #[serde(rename = "no_user")]
    NoUser,
    #[serde(rename = "not_signing_key")]
    NotSigningKey,
    #[serde(rename = "ocsp_pending")]
    OcspPending,
    #[serde(rename = "unknown_key")]
    UnknownKey,
    #[serde(rename = "unknown_signature_type")]
    UnknownSignatureType,
    #[serde(rename = "unsigned")]
    Unsigned,
    #[serde(rename = "unverified_email")]
    UnverifiedEmail,
    #[serde(rename = "valid")]
    Valid,
}
impl From<&StatusDefaultCommitCommitVerificationReason>
    for StatusDefaultCommitCommitVerificationReason
{
    fn from(value: &StatusDefaultCommitCommitVerificationReason) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for StatusDefaultCommitCommitVerificationReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::BadCert => write!(f, "bad_cert"),
            Self::BadEmail => write!(f, "bad_email"),
            Self::ExpiredKey => write!(f, "expired_key"),
            Self::GpgverifyError => write!(f, "gpgverify_error"),
            Self::GpgverifyUnavailable => write!(f, "gpgverify_unavailable"),
            Self::Invalid => write!(f, "invalid"),
            Self::MalformedSignature => write!(f, "malformed_signature"),
            Self::NoUser => write!(f, "no_user"),
            Self::NotSigningKey => write!(f, "not_signing_key"),
            Self::OcspPending => write!(f, "ocsp_pending"),
            Self::UnknownKey => write!(f, "unknown_key"),
            Self::UnknownSignatureType => write!(f, "unknown_signature_type"),
            Self::Unsigned => write!(f, "unsigned"),
            Self::UnverifiedEmail => write!(f, "unverified_email"),
            Self::Valid => write!(f, "valid"),
        }
    }
}
impl std::str::FromStr for StatusDefaultCommitCommitVerificationReason {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "bad_cert" => Ok(Self::BadCert),
            "bad_email" => Ok(Self::BadEmail),
            "expired_key" => Ok(Self::ExpiredKey),
            "gpgverify_error" => Ok(Self::GpgverifyError),
            "gpgverify_unavailable" => Ok(Self::GpgverifyUnavailable),
            "invalid" => Ok(Self::Invalid),
            "malformed_signature" => Ok(Self::MalformedSignature),
            "no_user" => Ok(Self::NoUser),
            "not_signing_key" => Ok(Self::NotSigningKey),
            "ocsp_pending" => Ok(Self::OcspPending),
            "unknown_key" => Ok(Self::UnknownKey),
            "unknown_signature_type" => Ok(Self::UnknownSignatureType),
            "unsigned" => Ok(Self::Unsigned),
            "unverified_email" => Ok(Self::UnverifiedEmail),
            "valid" => Ok(Self::Valid),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for StatusDefaultCommitCommitVerificationReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for StatusDefaultCommitCommitVerificationReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for StatusDefaultCommitCommitVerificationReason {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "StatusDefaultCommitParents"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"html_url\","]
#[doc = "    \"sha\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitParentsHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"sha\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitParentsSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"StatusDefaultCommitParentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct StatusDefaultCommitParents {
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub sha: String,
    #[doc = ""]
    pub url: String,
}
impl From<&StatusDefaultCommitParents> for StatusDefaultCommitParents {
    fn from(value: &StatusDefaultCommitParents) -> Self {
        value.clone()
    }
}
#[doc = "<p>The new state. Can be <code>pending</code>, <code>success</code>, <code>failure</code>, or <code>error</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"StatusDefaultState\","]
#[doc = "  \"description\": \"<p>The new state. Can be <code>pending</code>, <code>success</code>, <code>failure</code>, or <code>error</code>.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"error\","]
#[doc = "    \"failure\","]
#[doc = "    \"pending\","]
#[doc = "    \"success\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum StatusDefaultState {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "success")]
    Success,
}
impl From<&StatusDefaultState> for StatusDefaultState {
    fn from(value: &StatusDefaultState) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for StatusDefaultState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Error => write!(f, "error"),
            Self::Failure => write!(f, "failure"),
            Self::Pending => write!(f, "pending"),
            Self::Success => write!(f, "success"),
        }
    }
}
impl std::str::FromStr for StatusDefaultState {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "error" => Ok(Self::Error),
            "failure" => Ok(Self::Failure),
            "pending" => Ok(Self::Pending),
            "success" => Ok(Self::Success),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for StatusDefaultState {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for StatusDefaultState {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for StatusDefaultState {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "SubIssues"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"sub_issues\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAdded\","]
#[doc = "      \"description\": \"<p>A parent issue was added to an issue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"parent_issue\","]
#[doc = "        \"parent_issue_id\","]
#[doc = "        \"parent_issue_repo\","]
#[doc = "        \"sub_issue\","]
#[doc = "        \"sub_issue_id\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SubIssuesParentIssueAddedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"parent_issue_added\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"parent_issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssue\""]
#[doc = "        },"]
#[doc = "        \"parent_issue_id\": {"]
#[doc = "          \"title\": \"SubIssuesParentIssueAddedParentIssueId\","]
#[doc = "          \"description\": \"<p>The ID of the parent issue.</p>\","]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"parent_issue_repo\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHeadRepo\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"sub_issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssue\""]
#[doc = "        },"]
#[doc = "        \"sub_issue_id\": {"]
#[doc = "          \"title\": \"SubIssuesParentIssueAddedSubIssueId\","]
#[doc = "          \"description\": \"<p>The ID of the sub-issue.</p>\","]
#[doc = "          \"type\": \"number\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SubIssuesParentIssueRemoved\","]
#[doc = "      \"description\": \"<p>A parent issue was removed from an issue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"parent_issue\","]
#[doc = "        \"parent_issue_id\","]
#[doc = "        \"parent_issue_repo\","]
#[doc = "        \"sub_issue\","]
#[doc = "        \"sub_issue_id\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SubIssuesParentIssueRemovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"parent_issue_removed\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"parent_issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssue\""]
#[doc = "        },"]
#[doc = "        \"parent_issue_id\": {"]
#[doc = "          \"title\": \"SubIssuesParentIssueRemovedParentIssueId\","]
#[doc = "          \"description\": \"<p>The ID of the parent issue.</p>\","]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"parent_issue_repo\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHeadRepo\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"sub_issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssue\""]
#[doc = "        },"]
#[doc = "        \"sub_issue_id\": {"]
#[doc = "          \"title\": \"SubIssuesParentIssueRemovedSubIssueId\","]
#[doc = "          \"description\": \"<p>The ID of the sub-issue.</p>\","]
#[doc = "          \"type\": \"number\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SubIssuesSubIssueAdded\","]
#[doc = "      \"description\": \"<p>A sub-issue was added to an issue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"parent_issue\","]
#[doc = "        \"parent_issue_id\","]
#[doc = "        \"sub_issue\","]
#[doc = "        \"sub_issue_id\","]
#[doc = "        \"sub_issue_repo\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SubIssuesSubIssueAddedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"sub_issue_added\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"parent_issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssue\""]
#[doc = "        },"]
#[doc = "        \"parent_issue_id\": {"]
#[doc = "          \"title\": \"SubIssuesSubIssueAddedParentIssueId\","]
#[doc = "          \"description\": \"<p>The ID of the parent issue.</p>\","]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"sub_issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssue\""]
#[doc = "        },"]
#[doc = "        \"sub_issue_id\": {"]
#[doc = "          \"title\": \"SubIssuesSubIssueAddedSubIssueId\","]
#[doc = "          \"description\": \"<p>The ID of the sub-issue.</p>\","]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"sub_issue_repo\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHeadRepo\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"SubIssuesSubIssueRemoved\","]
#[doc = "      \"description\": \"<p>A sub-issue was removed from an issue.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"parent_issue\","]
#[doc = "        \"parent_issue_id\","]
#[doc = "        \"sub_issue\","]
#[doc = "        \"sub_issue_id\","]
#[doc = "        \"sub_issue_repo\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"SubIssuesSubIssueRemovedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"sub_issue_removed\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"parent_issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssue\""]
#[doc = "        },"]
#[doc = "        \"parent_issue_id\": {"]
#[doc = "          \"title\": \"SubIssuesSubIssueRemovedParentIssueId\","]
#[doc = "          \"description\": \"<p>The ID of the parent issue.</p>\","]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"sub_issue\": {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssue\""]
#[doc = "        },"]
#[doc = "        \"sub_issue_id\": {"]
#[doc = "          \"title\": \"SubIssuesSubIssueRemovedSubIssueId\","]
#[doc = "          \"description\": \"<p>The ID of the sub-issue.</p>\","]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"sub_issue_repo\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHeadRepo\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum SubIssues {
    #[doc = "SubIssuesParentIssueAdded\n\n<p>A parent issue was added to an issue.</p>"]
    #[serde(rename = "parent_issue_added")]
    ParentIssueAdded {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        parent_issue: SubIssuesParentIssueAddedParentIssue,
        parent_issue_id: f64,
        parent_issue_repo: DeploymentProtectionRuleRequestedPullRequestsHeadRepo,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        sub_issue: SubIssuesParentIssueAddedParentIssue,
        sub_issue_id: f64,
    },
    #[doc = "SubIssuesParentIssueRemoved\n\n<p>A parent issue was removed from an issue.</p>"]
    #[serde(rename = "parent_issue_removed")]
    ParentIssueRemoved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        parent_issue: SubIssuesParentIssueAddedParentIssue,
        parent_issue_id: f64,
        parent_issue_repo: DeploymentProtectionRuleRequestedPullRequestsHeadRepo,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        sub_issue: SubIssuesParentIssueAddedParentIssue,
        sub_issue_id: f64,
    },
    #[doc = "SubIssuesSubIssueAdded\n\n<p>A sub-issue was added to an issue.</p>"]
    #[serde(rename = "sub_issue_added")]
    SubIssueAdded {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        parent_issue: SubIssuesParentIssueAddedParentIssue,
        parent_issue_id: f64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        sub_issue: SubIssuesParentIssueAddedParentIssue,
        sub_issue_id: f64,
        sub_issue_repo: DeploymentProtectionRuleRequestedPullRequestsHeadRepo,
    },
    #[doc = "SubIssuesSubIssueRemoved\n\n<p>A sub-issue was removed from an issue.</p>"]
    #[serde(rename = "sub_issue_removed")]
    SubIssueRemoved {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        parent_issue: SubIssuesParentIssueAddedParentIssue,
        parent_issue_id: f64,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        sub_issue: SubIssuesParentIssueAddedParentIssue,
        sub_issue_id: f64,
        sub_issue_repo: DeploymentProtectionRuleRequestedPullRequestsHeadRepo,
    },
}
impl From<&SubIssues> for SubIssues {
    fn from(value: &SubIssues) -> Self {
        value.clone()
    }
}
#[doc = "<p>Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SubIssuesParentIssueAddedParentIssue\","]
#[doc = "  \"description\": \"<p>Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"assignee\","]
#[doc = "    \"author_association\","]
#[doc = "    \"closed_at\","]
#[doc = "    \"comments\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"created_at\","]
#[doc = "    \"events_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"locked\","]
#[doc = "    \"milestone\","]
#[doc = "    \"node_id\","]
#[doc = "    \"number\","]
#[doc = "    \"repository_url\","]
#[doc = "    \"state\","]
#[doc = "    \"title\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"user\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"active_lock_reason\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueActiveLockReason\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"assignee\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"assignees\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueAssignees\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"author_association\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionAnsweredAnswerAuthorAssociation\""]
#[doc = "    },"]
#[doc = "    \"body\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueBody\","]
#[doc = "      \"description\": \"<p>Contents of the issue</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"body_html\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueBodyHtml\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"body_text\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueBodyText\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"closed_at\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueClosedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"closed_by\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    },"]
#[doc = "    \"comments\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueComments\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"draft\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueDraft\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueLabels\","]
#[doc = "      \"description\": \"<p>Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {}"]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"locked\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueLocked\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"milestone\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsMilestone\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueNumber\","]
#[doc = "      \"description\": \"<p>Number uniquely identifying the issue within its repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"performed_via_github_app\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssuePerformedViaGithubApp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"null\""]
#[doc = "    },"]
#[doc = "    \"pull_request\": {"]
#[doc = "      \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssuePullRequest\""]
#[doc = "    },"]
#[doc = "    \"reactions\": {"]
#[doc = "      \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssueReactions\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedPullRequestsHeadRepo\""]
#[doc = "    },"]
#[doc = "    \"repository_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueState\","]
#[doc = "      \"description\": \"<p>State of the issue; either 'open' or 'closed'</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"state_reason\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueStateReason\","]
#[doc = "      \"description\": \"<p>The reason for the current state</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/SubIssuesParentIssueAddedParentIssueStateReason\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"timeline_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueTimelineUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueTitle\","]
#[doc = "      \"description\": \"<p>Title of the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueUrl\","]
#[doc = "      \"description\": \"<p>URL for the issue</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionTransferredChangesNewRepositoryOrganization\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SubIssuesParentIssueAddedParentIssue {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub active_lock_reason: Option<String>,
    pub assignee: DiscussionTransferredChangesNewRepositoryOrganization,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub assignees: Option<Vec<DiscussionTransferredChangesNewRepositoryOrganization>>,
    pub author_association: DiscussionAnsweredAnswerAuthorAssociation,
    #[doc = "<p>Contents of the issue</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body_html: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body_text: Option<String>,
    #[doc = ""]
    pub closed_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub closed_by: Option<DiscussionTransferredChangesNewRepositoryOrganization>,
    #[doc = ""]
    pub comments: i64,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = "<p>Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository</p>"]
    pub labels: Vec<::serde_json::Value>,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub locked: bool,
    pub milestone: DeploymentProtectionRuleRequestedPullRequestsMilestone,
    #[doc = ""]
    pub node_id: String,
    #[doc = "<p>Number uniquely identifying the issue within its repository</p>"]
    pub number: i64,
    #[doc = ""]
    #[serde(default)]
    pub performed_via_github_app: (),
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull_request: Option<SubIssuesParentIssueAddedParentIssuePullRequest>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reactions: Option<SubIssuesParentIssueAddedParentIssueReactions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<DeploymentProtectionRuleRequestedPullRequestsHeadRepo>,
    #[doc = ""]
    pub repository_url: String,
    #[doc = "<p>State of the issue; either 'open' or 'closed'</p>"]
    pub state: String,
    #[doc = "<p>The reason for the current state</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<SubIssuesParentIssueAddedParentIssueStateReason>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeline_url: Option<String>,
    #[doc = "<p>Title of the issue</p>"]
    pub title: String,
    #[doc = ""]
    pub updated_at: String,
    #[doc = "<p>URL for the issue</p>"]
    pub url: String,
    pub user: DiscussionTransferredChangesNewRepositoryOrganization,
}
impl From<&SubIssuesParentIssueAddedParentIssue> for SubIssuesParentIssueAddedParentIssue {
    fn from(value: &SubIssuesParentIssueAddedParentIssue) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SubIssuesParentIssueAddedParentIssuePullRequest\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"diff_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"patch_url\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"diff_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssuePullRequestDiffUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssuePullRequestHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"merged_at\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssuePullRequestMergedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"patch_url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssuePullRequestPatchUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssuePullRequestUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SubIssuesParentIssueAddedParentIssuePullRequest {
    #[doc = ""]
    pub diff_url: Option<String>,
    #[doc = ""]
    pub html_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub merged_at: Option<String>,
    #[doc = ""]
    pub patch_url: Option<String>,
    #[doc = ""]
    pub url: Option<String>,
}
impl From<&SubIssuesParentIssueAddedParentIssuePullRequest>
    for SubIssuesParentIssueAddedParentIssuePullRequest
{
    fn from(value: &SubIssuesParentIssueAddedParentIssuePullRequest) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"SubIssuesParentIssueAddedParentIssueReactions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"+1\","]
#[doc = "    \"-1\","]
#[doc = "    \"confused\","]
#[doc = "    \"eyes\","]
#[doc = "    \"heart\","]
#[doc = "    \"hooray\","]
#[doc = "    \"laugh\","]
#[doc = "    \"rocket\","]
#[doc = "    \"total_count\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"+1\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactions+1\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"-1\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactions1\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"confused\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactionsConfused\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"eyes\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactionsEyes\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"heart\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactionsHeart\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"hooray\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactionsHooray\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"laugh\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactionsLaugh\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"rocket\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactionsRocket\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"total_count\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactionsTotalCount\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"SubIssuesParentIssueAddedParentIssueReactionsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct SubIssuesParentIssueAddedParentIssueReactions {
    #[doc = ""]
    pub confused: i64,
    #[doc = ""]
    pub eyes: i64,
    #[doc = ""]
    pub heart: i64,
    #[doc = ""]
    pub hooray: i64,
    #[doc = ""]
    pub laugh: i64,
    #[doc = ""]
    #[serde(rename = "-1")]
    pub minus1: i64,
    #[doc = ""]
    #[serde(rename = "+1")]
    pub plus1: i64,
    #[doc = ""]
    pub rocket: i64,
    #[doc = ""]
    pub total_count: i64,
    #[doc = ""]
    pub url: String,
}
impl From<&SubIssuesParentIssueAddedParentIssueReactions>
    for SubIssuesParentIssueAddedParentIssueReactions
{
    fn from(value: &SubIssuesParentIssueAddedParentIssueReactions) -> Self {
        value.clone()
    }
}
#[doc = "SubIssuesParentIssueAddedParentIssueStateReason"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"not_planned\","]
#[doc = "    \"reopened\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum SubIssuesParentIssueAddedParentIssueStateReason {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "not_planned")]
    NotPlanned,
    #[serde(rename = "reopened")]
    Reopened,
}
impl From<&SubIssuesParentIssueAddedParentIssueStateReason>
    for SubIssuesParentIssueAddedParentIssueStateReason
{
    fn from(value: &SubIssuesParentIssueAddedParentIssueStateReason) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for SubIssuesParentIssueAddedParentIssueStateReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::NotPlanned => write!(f, "not_planned"),
            Self::Reopened => write!(f, "reopened"),
        }
    }
}
impl std::str::FromStr for SubIssuesParentIssueAddedParentIssueStateReason {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "not_planned" => Ok(Self::NotPlanned),
            "reopened" => Ok(Self::Reopened),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for SubIssuesParentIssueAddedParentIssueStateReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for SubIssuesParentIssueAddedParentIssueStateReason {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for SubIssuesParentIssueAddedParentIssueStateReason {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Team"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"team\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"TeamAddedToRepository\","]
#[doc = "      \"description\": \"<p>A team was granted access to a repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"team\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"TeamAddedToRepositoryAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"added_to_repository\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"team\": {"]
#[doc = "          \"$ref\": \"#/$defs/TeamAddDefaultTeam\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"TeamCreated\","]
#[doc = "      \"description\": \"<p>A team was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\","]
#[doc = "        \"team\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"TeamCreatedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"created\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"team\": {"]
#[doc = "          \"$ref\": \"#/$defs/TeamAddDefaultTeam\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"TeamDeleted\","]
#[doc = "      \"description\": \"<p>A team was deleted.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"team\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"TeamDeletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"deleted\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"team\": {"]
#[doc = "          \"$ref\": \"#/$defs/TeamAddDefaultTeam\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"TeamEdited\","]
#[doc = "      \"description\": \"<p>The name, description, or visibility of a team was changed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"changes\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\","]
#[doc = "        \"team\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"TeamEditedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"edited\""]
#[doc = "        },"]
#[doc = "        \"changes\": {"]
#[doc = "          \"$ref\": \"#/$defs/TeamEditedChanges\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"team\": {"]
#[doc = "          \"$ref\": \"#/$defs/TeamAddDefaultTeam\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"TeamRemovedFromRepository\","]
#[doc = "      \"description\": \"<p>A team's access to a repository was removed.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"organization\","]
#[doc = "        \"sender\","]
#[doc = "        \"team\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"TeamRemovedFromRepositoryAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"removed_from_repository\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"team\": {"]
#[doc = "          \"$ref\": \"#/$defs/TeamAddDefaultTeam\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Team {
    #[doc = "TeamAddedToRepository\n\n<p>A team was granted access to a repository.</p>"]
    #[serde(rename = "added_to_repository")]
    AddedToRepository {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        team: TeamAddDefaultTeam,
    },
    #[doc = "TeamCreated\n\n<p>A team was created.</p>"]
    #[serde(rename = "created")]
    Created {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
        team: TeamAddDefaultTeam,
    },
    #[doc = "TeamDeleted\n\n<p>A team was deleted.</p>"]
    #[serde(rename = "deleted")]
    Deleted {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        sender: Option<Untyped>,
        team: TeamAddDefaultTeam,
    },
    #[doc = "TeamEdited\n\n<p>The name, description, or visibility of a team was changed.</p>"]
    #[serde(rename = "edited")]
    Edited {
        changes: TeamEditedChanges,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
        team: TeamAddDefaultTeam,
    },
    #[doc = "TeamRemovedFromRepository\n\n<p>A team's access to a repository was removed.</p>"]
    #[serde(rename = "removed_from_repository")]
    RemovedFromRepository {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        organization: Untyped,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        repository: Option<SomethingWithAnId>,
        sender: Untyped,
        team: TeamAddDefaultTeam,
    },
}
impl From<&Team> for Team {
    fn from(value: &Team) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamAddDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"repository\","]
#[doc = "    \"sender\","]
#[doc = "    \"team\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"team\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamAddDefaultTeam\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct TeamAdd {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
    pub team: TeamAddDefaultTeam,
}
impl From<&TeamAdd> for TeamAdd {
    fn from(value: &TeamAdd) -> Self {
        value.clone()
    }
}
#[doc = "<p>Groups of organization members that gives permissions on specified repositories.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamAddDefaultTeam\","]
#[doc = "  \"description\": \"<p>Groups of organization members that gives permissions on specified repositories.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"id\","]
#[doc = "    \"name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"deleted\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamDeleted\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamDescription\","]
#[doc = "      \"description\": \"<p>Description of the team</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the team</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"members_url\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamName\","]
#[doc = "      \"description\": \"<p>Name of the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notification_setting\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamAddDefaultTeamParentNotificationSetting\""]
#[doc = "    },"]
#[doc = "    \"parent\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/TeamAddDefaultTeamParent\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"permission\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamPermission\","]
#[doc = "      \"description\": \"<p>Permission that the team will have for its repositories</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"privacy\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamAddDefaultTeamParentPrivacy\""]
#[doc = "    },"]
#[doc = "    \"repositories_url\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamRepositoriesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamSlug\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamUrl\","]
#[doc = "      \"description\": \"<p>URL for the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct TeamAddDefaultTeam {
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    #[doc = "<p>Description of the team</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub html_url: Option<String>,
    #[doc = "<p>Unique identifier of the team</p>"]
    pub id: i64,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub members_url: Option<String>,
    #[doc = "<p>Name of the team</p>"]
    pub name: String,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification_setting: Option<TeamAddDefaultTeamParentNotificationSetting>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parent: Option<TeamAddDefaultTeamParent>,
    #[doc = "<p>Permission that the team will have for its repositories</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permission: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privacy: Option<TeamAddDefaultTeamParentPrivacy>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repositories_url: Option<String>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    #[doc = "<p>URL for the team</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}
impl From<&TeamAddDefaultTeam> for TeamAddDefaultTeam {
    fn from(value: &TeamAddDefaultTeam) -> Self {
        value.clone()
    }
}
#[doc = "TeamAddDefaultTeamParent"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"members_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notification_setting\","]
#[doc = "    \"permission\","]
#[doc = "    \"privacy\","]
#[doc = "    \"repositories_url\","]
#[doc = "    \"slug\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentDescription\","]
#[doc = "      \"description\": \"<p>Description of the team</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the team</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"members_url\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentMembersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentName\","]
#[doc = "      \"description\": \"<p>Name of the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notification_setting\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamAddDefaultTeamParentNotificationSetting\""]
#[doc = "    },"]
#[doc = "    \"permission\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentPermission\","]
#[doc = "      \"description\": \"<p>Permission that the team will have for its repositories</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"privacy\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamAddDefaultTeamParentPrivacy\""]
#[doc = "    },"]
#[doc = "    \"repositories_url\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentRepositoriesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"slug\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentSlug\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"TeamAddDefaultTeamParentUrl\","]
#[doc = "      \"description\": \"<p>URL for the team</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct TeamAddDefaultTeamParent {
    #[doc = "<p>Description of the team</p>"]
    pub description: Option<String>,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the team</p>"]
    pub id: i64,
    #[doc = ""]
    pub members_url: String,
    #[doc = "<p>Name of the team</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    pub notification_setting: TeamAddDefaultTeamParentNotificationSetting,
    #[doc = "<p>Permission that the team will have for its repositories</p>"]
    pub permission: String,
    pub privacy: TeamAddDefaultTeamParentPrivacy,
    #[doc = ""]
    pub repositories_url: String,
    #[doc = ""]
    pub slug: String,
    #[doc = "<p>URL for the team</p>"]
    pub url: String,
}
impl From<&TeamAddDefaultTeamParent> for TeamAddDefaultTeamParent {
    fn from(value: &TeamAddDefaultTeamParent) -> Self {
        value.clone()
    }
}
#[doc = "<p>Whether team members will receive notifications when their team is @mentioned</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamAddDefaultTeamParentNotificationSetting\","]
#[doc = "  \"description\": \"<p>Whether team members will receive notifications when their team is @mentioned</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"notifications_disabled\","]
#[doc = "    \"notifications_enabled\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum TeamAddDefaultTeamParentNotificationSetting {
    #[serde(rename = "notifications_disabled")]
    NotificationsDisabled,
    #[serde(rename = "notifications_enabled")]
    NotificationsEnabled,
}
impl From<&TeamAddDefaultTeamParentNotificationSetting>
    for TeamAddDefaultTeamParentNotificationSetting
{
    fn from(value: &TeamAddDefaultTeamParentNotificationSetting) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for TeamAddDefaultTeamParentNotificationSetting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::NotificationsDisabled => write!(f, "notifications_disabled"),
            Self::NotificationsEnabled => write!(f, "notifications_enabled"),
        }
    }
}
impl std::str::FromStr for TeamAddDefaultTeamParentNotificationSetting {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "notifications_disabled" => Ok(Self::NotificationsDisabled),
            "notifications_enabled" => Ok(Self::NotificationsEnabled),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for TeamAddDefaultTeamParentNotificationSetting {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for TeamAddDefaultTeamParentNotificationSetting {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for TeamAddDefaultTeamParentNotificationSetting {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamAddDefaultTeamParentPrivacy\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"closed\","]
#[doc = "    \"open\","]
#[doc = "    \"secret\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum TeamAddDefaultTeamParentPrivacy {
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "secret")]
    Secret,
}
impl From<&TeamAddDefaultTeamParentPrivacy> for TeamAddDefaultTeamParentPrivacy {
    fn from(value: &TeamAddDefaultTeamParentPrivacy) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for TeamAddDefaultTeamParentPrivacy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Closed => write!(f, "closed"),
            Self::Open => write!(f, "open"),
            Self::Secret => write!(f, "secret"),
        }
    }
}
impl std::str::FromStr for TeamAddDefaultTeamParentPrivacy {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "closed" => Ok(Self::Closed),
            "open" => Ok(Self::Open),
            "secret" => Ok(Self::Secret),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for TeamAddDefaultTeamParentPrivacy {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for TeamAddDefaultTeamParentPrivacy {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for TeamAddDefaultTeamParentPrivacy {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The changes to the team if the action was <code>edited</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamEditedChanges\","]
#[doc = "  \"description\": \"<p>The changes to the team if the action was <code>edited</code>.</p>\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"notification_setting\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"privacy\": {"]
#[doc = "      \"$ref\": \"#/$defs/DiscussionEditedChangesBody\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamEditedChangesRepository\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct TeamEditedChanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification_setting: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privacy: Option<DiscussionEditedChangesBody>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<TeamEditedChangesRepository>,
}
impl From<&TeamEditedChanges> for TeamEditedChanges {
    fn from(value: &TeamEditedChanges) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamEditedChangesRepository\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"permissions\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamEditedChangesRepositoryPermissions\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct TeamEditedChangesRepository {
    pub permissions: TeamEditedChangesRepositoryPermissions,
}
impl From<&TeamEditedChangesRepository> for TeamEditedChangesRepository {
    fn from(value: &TeamEditedChangesRepository) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamEditedChangesRepositoryPermissions\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"from\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"from\": {"]
#[doc = "      \"$ref\": \"#/$defs/TeamEditedChangesRepositoryPermissionsFrom\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct TeamEditedChangesRepositoryPermissions {
    pub from: TeamEditedChangesRepositoryPermissionsFrom,
}
impl From<&TeamEditedChangesRepositoryPermissions> for TeamEditedChangesRepositoryPermissions {
    fn from(value: &TeamEditedChangesRepositoryPermissions) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamEditedChangesRepositoryPermissionsFrom\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"admin\": {"]
#[doc = "      \"title\": \"TeamEditedChangesRepositoryPermissionsFromAdmin\","]
#[doc = "      \"description\": \"<p>The previous version of the team member's <code>admin</code> permission on a repository, if the action was <code>edited</code>.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pull\": {"]
#[doc = "      \"title\": \"TeamEditedChangesRepositoryPermissionsFromPull\","]
#[doc = "      \"description\": \"<p>The previous version of the team member's <code>pull</code> permission on a repository, if the action was <code>edited</code>.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"push\": {"]
#[doc = "      \"title\": \"TeamEditedChangesRepositoryPermissionsFromPush\","]
#[doc = "      \"description\": \"<p>The previous version of the team member's <code>push</code> permission on a repository, if the action was <code>edited</code>.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct TeamEditedChangesRepositoryPermissionsFrom {
    #[doc = "<p>The previous version of the team member's <code>admin</code> permission on a repository, if the action was <code>edited</code>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub admin: Option<bool>,
    #[doc = "<p>The previous version of the team member's <code>pull</code> permission on a repository, if the action was <code>edited</code>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pull: Option<bool>,
    #[doc = "<p>The previous version of the team member's <code>push</code> permission on a repository, if the action was <code>edited</code>.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push: Option<bool>,
}
impl From<&TeamEditedChangesRepositoryPermissionsFrom>
    for TeamEditedChangesRepositoryPermissionsFrom
{
    fn from(value: &TeamEditedChangesRepositoryPermissionsFrom) -> Self {
        value.clone()
    }
}
#[doc = "<p>An enterprise on GitHub. Webhook payloads contain the <code>enterprise</code> property when the webhook is configured\non an enterprise account or an organization that's part of an enterprise account. For more information,\nsee \"<a href=\"https://docs.github.com/admin/overview/about-enterprise-accounts\">About enterprise accounts</a>.\"</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"TeamAddDefaultEnterprise\","]
#[doc = "  \"description\": \"<p>An enterprise on GitHub. Webhook payloads contain the <code>enterprise</code> property when the webhook is configured\\non an enterprise account or an organization that's part of an enterprise account. For more information,\\nsee \\\"<a href=\\\"https://docs.github.com/admin/overview/about-enterprise-accounts\\\">About enterprise accounts</a>.\\\"</p>\","]
#[doc = "  \"type\": \"object\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug, Default)]
pub struct Untyped(pub ::serde_json::Map<String, ::serde_json::Value>);
impl ::std::ops::Deref for Untyped {
    type Target = ::serde_json::Map<String, ::serde_json::Value>;
    fn deref(&self) -> &::serde_json::Map<String, ::serde_json::Value> {
        &self.0
    }
}
impl From<Untyped> for ::serde_json::Map<String, ::serde_json::Value> {
    fn from(value: Untyped) -> Self {
        value.0
    }
}
impl From<&Untyped> for Untyped {
    fn from(value: &Untyped) -> Self {
        value.clone()
    }
}
impl From<::serde_json::Map<String, ::serde_json::Value>> for Untyped {
    fn from(value: ::serde_json::Map<String, ::serde_json::Value>) -> Self {
        Self(value)
    }
}
#[doc = "Watch"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"watch\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"WatchStarted\","]
#[doc = "      \"description\": \"<p>Someone started watching the repository.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"WatchStartedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"started\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum Watch {
    #[doc = "WatchStarted\n\n<p>Someone started watching the repository.</p>"]
    #[serde(rename = "started")]
    Started {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
    },
}
impl From<&Watch> for Watch {
    fn from(value: &Watch) -> Self {
        value.clone()
    }
}
#[doc = "WebhookBody"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WebhookBody\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"team_add\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"team_add\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"team_add\": {"]
#[doc = "          \"$ref\": \"#/$defs/team_add\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"deployment_status\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"deployment_status\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployment_status\": {"]
#[doc = "          \"$ref\": \"#/$defs/deployment_status\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"discussion\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"discussion\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"discussion\": {"]
#[doc = "          \"$ref\": \"#/$defs/discussion\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"secret_scanning_alert_location\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"secret_scanning_alert_location\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"secret_scanning_alert_location\": {"]
#[doc = "          \"$ref\": \"#/$defs/secret_scanning_alert_location\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"delete\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"delete\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"delete\": {"]
#[doc = "          \"$ref\": \"#/$defs/delete\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"workflow_dispatch\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"workflow_dispatch\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"workflow_dispatch\": {"]
#[doc = "          \"$ref\": \"#/$defs/workflow_dispatch\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"repository_ruleset\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"repository_ruleset\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"repository_ruleset\": {"]
#[doc = "          \"$ref\": \"#/$defs/repository_ruleset\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"installation\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"installation\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/installation\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"deployment_protection_rule\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"deployment_protection_rule\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployment_protection_rule\": {"]
#[doc = "          \"$ref\": \"#/$defs/deployment_protection_rule\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"personal_access_token_request\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"personal_access_token_request\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"personal_access_token_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/personal_access_token_request\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"membership\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"membership\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"membership\": {"]
#[doc = "          \"$ref\": \"#/$defs/membership\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"milestone\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"milestone\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"milestone\": {"]
#[doc = "          \"$ref\": \"#/$defs/milestone\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"deployment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"deployment\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"$ref\": \"#/$defs/deployment\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"deployment_review\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"deployment_review\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deployment_review\": {"]
#[doc = "          \"$ref\": \"#/$defs/deployment_review\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"project\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"project\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"project\": {"]
#[doc = "          \"$ref\": \"#/$defs/project\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"issue_comment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"issue_comment\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"issue_comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/issue_comment\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"branch_protection_rule\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"branch_protection_rule\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"branch_protection_rule\": {"]
#[doc = "          \"$ref\": \"#/$defs/branch_protection_rule\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"pull_request_review_comment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"pull_request_review_comment\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"pull_request_review_comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/pull_request_review_comment\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"member\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"member\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"member\": {"]
#[doc = "          \"$ref\": \"#/$defs/member\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"repository\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"repository\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/repository\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"sub_issues\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"sub_issues\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"sub_issues\": {"]
#[doc = "          \"$ref\": \"#/$defs/sub_issues\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"branch_protection_configuration\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"branch_protection_configuration\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"branch_protection_configuration\": {"]
#[doc = "          \"$ref\": \"#/$defs/branch_protection_configuration\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"project_column\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"project_column\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"project_column\": {"]
#[doc = "          \"$ref\": \"#/$defs/project_column\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"repository_dispatch\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"repository_dispatch\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"repository_dispatch\": {"]
#[doc = "          \"$ref\": \"#/$defs/repository_dispatch\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"push\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"push\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"push\": {"]
#[doc = "          \"$ref\": \"#/$defs/push\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"installation_repositories\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"installation_repositories\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"installation_repositories\": {"]
#[doc = "          \"$ref\": \"#/$defs/installation_repositories\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"github_app_authorization\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"github_app_authorization\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"github_app_authorization\": {"]
#[doc = "          \"$ref\": \"#/$defs/github_app_authorization\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"discussion_comment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"discussion_comment\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"discussion_comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/discussion_comment\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"release\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"release\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"release\": {"]
#[doc = "          \"$ref\": \"#/$defs/release\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"org_block\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"org_block\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"org_block\": {"]
#[doc = "          \"$ref\": \"#/$defs/org_block\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"secret_scanning_alert\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"secret_scanning_alert\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"secret_scanning_alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/secret_scanning_alert\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"page_build\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"page_build\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"page_build\": {"]
#[doc = "          \"$ref\": \"#/$defs/page_build\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"issues\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"issues\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"issues\": {"]
#[doc = "          \"$ref\": \"#/$defs/issues\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"create\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"create\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"create\": {"]
#[doc = "          \"$ref\": \"#/$defs/create\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"repository_advisory\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"repository_advisory\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"repository_advisory\": {"]
#[doc = "          \"$ref\": \"#/$defs/repository_advisory\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"package\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"package\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"package\": {"]
#[doc = "          \"$ref\": \"#/$defs/package\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"pull_request_review\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"pull_request_review\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"pull_request_review\": {"]
#[doc = "          \"$ref\": \"#/$defs/pull_request_review\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"public\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"public\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"public\": {"]
#[doc = "          \"$ref\": \"#/$defs/public\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"code_scanning_alert\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"code_scanning_alert\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"code_scanning_alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/code_scanning_alert\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"watch\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"watch\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"watch\": {"]
#[doc = "          \"$ref\": \"#/$defs/watch\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"fork\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fork\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fork\": {"]
#[doc = "          \"$ref\": \"#/$defs/fork\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"commit_comment\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"commit_comment\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"commit_comment\": {"]
#[doc = "          \"$ref\": \"#/$defs/commit_comment\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"organization\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"organization\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/organization\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"workflow_run\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"workflow_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/workflow_run\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"custom_property_values\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"custom_property_values\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"custom_property_values\": {"]
#[doc = "          \"$ref\": \"#/$defs/custom_property_values\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"deploy_key\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"deploy_key\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"deploy_key\": {"]
#[doc = "          \"$ref\": \"#/$defs/deploy_key\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"star\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"star\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"star\": {"]
#[doc = "          \"$ref\": \"#/$defs/star\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"registry_package\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"registry_package\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"registry_package\": {"]
#[doc = "          \"$ref\": \"#/$defs/registry_package\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"merge_group\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"merge_group\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"merge_group\": {"]
#[doc = "          \"$ref\": \"#/$defs/merge_group\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"check_run\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"check_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"check_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/check_run\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"installation_target\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"installation_target\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"installation_target\": {"]
#[doc = "          \"$ref\": \"#/$defs/installation_target\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"security_and_analysis\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"security_and_analysis\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"security_and_analysis\": {"]
#[doc = "          \"$ref\": \"#/$defs/security_and_analysis\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"ping\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"ping\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"ping\": {"]
#[doc = "          \"$ref\": \"#/$defs/ping\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"label\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"label\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"label\": {"]
#[doc = "          \"$ref\": \"#/$defs/label\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"dependabot_alert\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"dependabot_alert\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"dependabot_alert\": {"]
#[doc = "          \"$ref\": \"#/$defs/dependabot_alert\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"project_card\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"project_card\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"project_card\": {"]
#[doc = "          \"$ref\": \"#/$defs/project_card\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"gollum\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"gollum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"gollum\": {"]
#[doc = "          \"$ref\": \"#/$defs/gollum\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"team\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"team\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"team\": {"]
#[doc = "          \"$ref\": \"#/$defs/team\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"status\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"status\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"status\": {"]
#[doc = "          \"$ref\": \"#/$defs/status\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"check_suite\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"check_suite\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"check_suite\": {"]
#[doc = "          \"$ref\": \"#/$defs/check_suite\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"workflow_job\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"workflow_job\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"workflow_job\": {"]
#[doc = "          \"$ref\": \"#/$defs/workflow_job\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"pull_request_review_thread\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"pull_request_review_thread\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"pull_request_review_thread\": {"]
#[doc = "          \"$ref\": \"#/$defs/pull_request_review_thread\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"pull_request\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"pull_request\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"pull_request\": {"]
#[doc = "          \"$ref\": \"#/$defs/pull_request\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"security_advisory\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"security_advisory\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"security_advisory\": {"]
#[doc = "          \"$ref\": \"#/$defs/security_advisory\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"meta\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"meta\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"meta\": {"]
#[doc = "          \"$ref\": \"#/$defs/meta\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"custom_property\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"custom_property\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"custom_property\": {"]
#[doc = "          \"$ref\": \"#/$defs/custom_property\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub enum WebhookBody {
    #[serde(rename = "team_add")]
    TeamAdd(TeamAdd),
    #[serde(rename = "deployment_status")]
    DeploymentStatus(DeploymentStatus),
    #[serde(rename = "discussion")]
    Discussion(Discussion),
    #[serde(rename = "secret_scanning_alert_location")]
    SecretScanningAlertLocation(SecretScanningAlertLocation),
    #[serde(rename = "delete")]
    Delete(Delete),
    #[serde(rename = "workflow_dispatch")]
    WorkflowDispatch(WorkflowDispatch),
    #[serde(rename = "repository_ruleset")]
    RepositoryRuleset(RepositoryRuleset),
    #[serde(rename = "installation")]
    Installation(Installation),
    #[serde(rename = "deployment_protection_rule")]
    DeploymentProtectionRule(DeploymentProtectionRule),
    #[serde(rename = "personal_access_token_request")]
    PersonalAccessTokenRequest(PersonalAccessTokenRequest),
    #[serde(rename = "membership")]
    Membership(Membership),
    #[serde(rename = "milestone")]
    Milestone(Milestone),
    #[serde(rename = "deployment")]
    Deployment(Deployment),
    #[serde(rename = "deployment_review")]
    DeploymentReview(DeploymentReview),
    #[serde(rename = "project")]
    Project(Project),
    #[serde(rename = "issue_comment")]
    IssueComment(IssueComment),
    #[serde(rename = "branch_protection_rule")]
    BranchProtectionRule(BranchProtectionRule),
    #[serde(rename = "pull_request_review_comment")]
    PullRequestReviewComment(PullRequestReviewComment),
    #[serde(rename = "member")]
    Member(Member),
    #[serde(rename = "repository")]
    Repository(Repository),
    #[serde(rename = "sub_issues")]
    SubIssues(SubIssues),
    #[serde(rename = "branch_protection_configuration")]
    BranchProtectionConfiguration(BranchProtectionConfiguration),
    #[serde(rename = "project_column")]
    ProjectColumn(ProjectColumn),
    #[serde(rename = "repository_dispatch")]
    RepositoryDispatch(RepositoryDispatch),
    #[serde(rename = "push")]
    Push(Push),
    #[serde(rename = "installation_repositories")]
    InstallationRepositories(InstallationRepositories),
    #[serde(rename = "github_app_authorization")]
    GithubAppAuthorization(GithubAppAuthorization),
    #[serde(rename = "discussion_comment")]
    DiscussionComment(DiscussionComment),
    #[serde(rename = "release")]
    Release(Release),
    #[serde(rename = "org_block")]
    OrgBlock(OrgBlock),
    #[serde(rename = "secret_scanning_alert")]
    SecretScanningAlert(SecretScanningAlert),
    #[serde(rename = "page_build")]
    PageBuild(PageBuild),
    #[serde(rename = "issues")]
    Issues(Issues),
    #[serde(rename = "create")]
    Create(Create),
    #[serde(rename = "repository_advisory")]
    RepositoryAdvisory(RepositoryAdvisory),
    #[serde(rename = "package")]
    Package(Package),
    #[serde(rename = "pull_request_review")]
    PullRequestReview(PullRequestReview),
    #[serde(rename = "public")]
    Public(Public),
    #[serde(rename = "code_scanning_alert")]
    CodeScanningAlert(CodeScanningAlert),
    #[serde(rename = "watch")]
    Watch(Watch),
    #[serde(rename = "fork")]
    Fork(Fork),
    #[serde(rename = "commit_comment")]
    CommitComment(CommitComment),
    #[serde(rename = "organization")]
    Organization(Organization),
    #[serde(rename = "workflow_run")]
    WorkflowRun(WorkflowRun),
    #[serde(rename = "custom_property_values")]
    CustomPropertyValues(CustomPropertyValues),
    #[serde(rename = "deploy_key")]
    DeployKey(DeployKey),
    #[serde(rename = "star")]
    Star(Star),
    #[serde(rename = "registry_package")]
    RegistryPackage(RegistryPackage),
    #[serde(rename = "merge_group")]
    MergeGroup(MergeGroup),
    #[serde(rename = "check_run")]
    CheckRun(CheckRun),
    #[serde(rename = "installation_target")]
    InstallationTarget(InstallationTarget),
    #[serde(rename = "security_and_analysis")]
    SecurityAndAnalysis(SecurityAndAnalysis),
    #[serde(rename = "ping")]
    Ping(Ping),
    #[serde(rename = "label")]
    Label(Label),
    #[serde(rename = "dependabot_alert")]
    DependabotAlert(DependabotAlert),
    #[serde(rename = "project_card")]
    ProjectCard(ProjectCard),
    #[serde(rename = "gollum")]
    Gollum(Gollum),
    #[serde(rename = "team")]
    Team(Team),
    #[serde(rename = "status")]
    Status(Status),
    #[serde(rename = "check_suite")]
    CheckSuite(CheckSuite),
    #[serde(rename = "workflow_job")]
    WorkflowJob(WorkflowJob),
    #[serde(rename = "pull_request_review_thread")]
    PullRequestReviewThread(PullRequestReviewThread),
    #[serde(rename = "pull_request")]
    PullRequest(PullRequest),
    #[serde(rename = "security_advisory")]
    SecurityAdvisory(SecurityAdvisory),
    #[serde(rename = "meta")]
    Meta(Meta),
    #[serde(rename = "custom_property")]
    CustomProperty(CustomProperty),
}
impl From<&WebhookBody> for WebhookBody {
    fn from(value: &WebhookBody) -> Self {
        value.clone()
    }
}
impl From<TeamAdd> for WebhookBody {
    fn from(value: TeamAdd) -> Self {
        Self::TeamAdd(value)
    }
}
impl From<DeploymentStatus> for WebhookBody {
    fn from(value: DeploymentStatus) -> Self {
        Self::DeploymentStatus(value)
    }
}
impl From<Discussion> for WebhookBody {
    fn from(value: Discussion) -> Self {
        Self::Discussion(value)
    }
}
impl From<SecretScanningAlertLocation> for WebhookBody {
    fn from(value: SecretScanningAlertLocation) -> Self {
        Self::SecretScanningAlertLocation(value)
    }
}
impl From<Delete> for WebhookBody {
    fn from(value: Delete) -> Self {
        Self::Delete(value)
    }
}
impl From<WorkflowDispatch> for WebhookBody {
    fn from(value: WorkflowDispatch) -> Self {
        Self::WorkflowDispatch(value)
    }
}
impl From<RepositoryRuleset> for WebhookBody {
    fn from(value: RepositoryRuleset) -> Self {
        Self::RepositoryRuleset(value)
    }
}
impl From<Installation> for WebhookBody {
    fn from(value: Installation) -> Self {
        Self::Installation(value)
    }
}
impl From<DeploymentProtectionRule> for WebhookBody {
    fn from(value: DeploymentProtectionRule) -> Self {
        Self::DeploymentProtectionRule(value)
    }
}
impl From<PersonalAccessTokenRequest> for WebhookBody {
    fn from(value: PersonalAccessTokenRequest) -> Self {
        Self::PersonalAccessTokenRequest(value)
    }
}
impl From<Membership> for WebhookBody {
    fn from(value: Membership) -> Self {
        Self::Membership(value)
    }
}
impl From<Milestone> for WebhookBody {
    fn from(value: Milestone) -> Self {
        Self::Milestone(value)
    }
}
impl From<Deployment> for WebhookBody {
    fn from(value: Deployment) -> Self {
        Self::Deployment(value)
    }
}
impl From<DeploymentReview> for WebhookBody {
    fn from(value: DeploymentReview) -> Self {
        Self::DeploymentReview(value)
    }
}
impl From<Project> for WebhookBody {
    fn from(value: Project) -> Self {
        Self::Project(value)
    }
}
impl From<IssueComment> for WebhookBody {
    fn from(value: IssueComment) -> Self {
        Self::IssueComment(value)
    }
}
impl From<BranchProtectionRule> for WebhookBody {
    fn from(value: BranchProtectionRule) -> Self {
        Self::BranchProtectionRule(value)
    }
}
impl From<PullRequestReviewComment> for WebhookBody {
    fn from(value: PullRequestReviewComment) -> Self {
        Self::PullRequestReviewComment(value)
    }
}
impl From<Member> for WebhookBody {
    fn from(value: Member) -> Self {
        Self::Member(value)
    }
}
impl From<Repository> for WebhookBody {
    fn from(value: Repository) -> Self {
        Self::Repository(value)
    }
}
impl From<SubIssues> for WebhookBody {
    fn from(value: SubIssues) -> Self {
        Self::SubIssues(value)
    }
}
impl From<BranchProtectionConfiguration> for WebhookBody {
    fn from(value: BranchProtectionConfiguration) -> Self {
        Self::BranchProtectionConfiguration(value)
    }
}
impl From<ProjectColumn> for WebhookBody {
    fn from(value: ProjectColumn) -> Self {
        Self::ProjectColumn(value)
    }
}
impl From<RepositoryDispatch> for WebhookBody {
    fn from(value: RepositoryDispatch) -> Self {
        Self::RepositoryDispatch(value)
    }
}
impl From<Push> for WebhookBody {
    fn from(value: Push) -> Self {
        Self::Push(value)
    }
}
impl From<InstallationRepositories> for WebhookBody {
    fn from(value: InstallationRepositories) -> Self {
        Self::InstallationRepositories(value)
    }
}
impl From<GithubAppAuthorization> for WebhookBody {
    fn from(value: GithubAppAuthorization) -> Self {
        Self::GithubAppAuthorization(value)
    }
}
impl From<DiscussionComment> for WebhookBody {
    fn from(value: DiscussionComment) -> Self {
        Self::DiscussionComment(value)
    }
}
impl From<Release> for WebhookBody {
    fn from(value: Release) -> Self {
        Self::Release(value)
    }
}
impl From<OrgBlock> for WebhookBody {
    fn from(value: OrgBlock) -> Self {
        Self::OrgBlock(value)
    }
}
impl From<SecretScanningAlert> for WebhookBody {
    fn from(value: SecretScanningAlert) -> Self {
        Self::SecretScanningAlert(value)
    }
}
impl From<PageBuild> for WebhookBody {
    fn from(value: PageBuild) -> Self {
        Self::PageBuild(value)
    }
}
impl From<Issues> for WebhookBody {
    fn from(value: Issues) -> Self {
        Self::Issues(value)
    }
}
impl From<Create> for WebhookBody {
    fn from(value: Create) -> Self {
        Self::Create(value)
    }
}
impl From<RepositoryAdvisory> for WebhookBody {
    fn from(value: RepositoryAdvisory) -> Self {
        Self::RepositoryAdvisory(value)
    }
}
impl From<Package> for WebhookBody {
    fn from(value: Package) -> Self {
        Self::Package(value)
    }
}
impl From<PullRequestReview> for WebhookBody {
    fn from(value: PullRequestReview) -> Self {
        Self::PullRequestReview(value)
    }
}
impl From<Public> for WebhookBody {
    fn from(value: Public) -> Self {
        Self::Public(value)
    }
}
impl From<CodeScanningAlert> for WebhookBody {
    fn from(value: CodeScanningAlert) -> Self {
        Self::CodeScanningAlert(value)
    }
}
impl From<Watch> for WebhookBody {
    fn from(value: Watch) -> Self {
        Self::Watch(value)
    }
}
impl From<Fork> for WebhookBody {
    fn from(value: Fork) -> Self {
        Self::Fork(value)
    }
}
impl From<CommitComment> for WebhookBody {
    fn from(value: CommitComment) -> Self {
        Self::CommitComment(value)
    }
}
impl From<Organization> for WebhookBody {
    fn from(value: Organization) -> Self {
        Self::Organization(value)
    }
}
impl From<WorkflowRun> for WebhookBody {
    fn from(value: WorkflowRun) -> Self {
        Self::WorkflowRun(value)
    }
}
impl From<CustomPropertyValues> for WebhookBody {
    fn from(value: CustomPropertyValues) -> Self {
        Self::CustomPropertyValues(value)
    }
}
impl From<DeployKey> for WebhookBody {
    fn from(value: DeployKey) -> Self {
        Self::DeployKey(value)
    }
}
impl From<Star> for WebhookBody {
    fn from(value: Star) -> Self {
        Self::Star(value)
    }
}
impl From<RegistryPackage> for WebhookBody {
    fn from(value: RegistryPackage) -> Self {
        Self::RegistryPackage(value)
    }
}
impl From<MergeGroup> for WebhookBody {
    fn from(value: MergeGroup) -> Self {
        Self::MergeGroup(value)
    }
}
impl From<CheckRun> for WebhookBody {
    fn from(value: CheckRun) -> Self {
        Self::CheckRun(value)
    }
}
impl From<InstallationTarget> for WebhookBody {
    fn from(value: InstallationTarget) -> Self {
        Self::InstallationTarget(value)
    }
}
impl From<SecurityAndAnalysis> for WebhookBody {
    fn from(value: SecurityAndAnalysis) -> Self {
        Self::SecurityAndAnalysis(value)
    }
}
impl From<Ping> for WebhookBody {
    fn from(value: Ping) -> Self {
        Self::Ping(value)
    }
}
impl From<Label> for WebhookBody {
    fn from(value: Label) -> Self {
        Self::Label(value)
    }
}
impl From<DependabotAlert> for WebhookBody {
    fn from(value: DependabotAlert) -> Self {
        Self::DependabotAlert(value)
    }
}
impl From<ProjectCard> for WebhookBody {
    fn from(value: ProjectCard) -> Self {
        Self::ProjectCard(value)
    }
}
impl From<Gollum> for WebhookBody {
    fn from(value: Gollum) -> Self {
        Self::Gollum(value)
    }
}
impl From<Team> for WebhookBody {
    fn from(value: Team) -> Self {
        Self::Team(value)
    }
}
impl From<Status> for WebhookBody {
    fn from(value: Status) -> Self {
        Self::Status(value)
    }
}
impl From<CheckSuite> for WebhookBody {
    fn from(value: CheckSuite) -> Self {
        Self::CheckSuite(value)
    }
}
impl From<WorkflowJob> for WebhookBody {
    fn from(value: WorkflowJob) -> Self {
        Self::WorkflowJob(value)
    }
}
impl From<PullRequestReviewThread> for WebhookBody {
    fn from(value: PullRequestReviewThread) -> Self {
        Self::PullRequestReviewThread(value)
    }
}
impl From<PullRequest> for WebhookBody {
    fn from(value: PullRequest) -> Self {
        Self::PullRequest(value)
    }
}
impl From<SecurityAdvisory> for WebhookBody {
    fn from(value: SecurityAdvisory) -> Self {
        Self::SecurityAdvisory(value)
    }
}
impl From<Meta> for WebhookBody {
    fn from(value: Meta) -> Self {
        Self::Meta(value)
    }
}
impl From<CustomProperty> for WebhookBody {
    fn from(value: CustomProperty) -> Self {
        Self::CustomProperty(value)
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowDispatchDefault\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"inputs\","]
#[doc = "    \"ref\","]
#[doc = "    \"repository\","]
#[doc = "    \"sender\","]
#[doc = "    \"workflow\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"enterprise\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"inputs\": {"]
#[doc = "      \"title\": \"WorkflowDispatchDefaultInputs\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"installation\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"organization\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"ref\": {"]
#[doc = "      \"title\": \"WorkflowDispatchDefaultRef\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "    },"]
#[doc = "    \"sender\": {"]
#[doc = "      \"$ref\": \"#/$defs/Untyped\""]
#[doc = "    },"]
#[doc = "    \"workflow\": {"]
#[doc = "      \"title\": \"WorkflowDispatchDefaultWorkflow\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowDispatch {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Untyped>,
    #[doc = ""]
    pub inputs: Option<Untyped>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub installation: Option<SomethingWithAnId>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub organization: Option<Untyped>,
    #[doc = ""]
    #[serde(rename = "ref")]
    pub ref_: String,
    pub repository: SomethingWithAnId,
    pub sender: Untyped,
    #[doc = ""]
    pub workflow: String,
}
impl From<&WorkflowDispatch> for WorkflowDispatch {
    fn from(value: &WorkflowDispatch) -> Self {
        value.clone()
    }
}
#[doc = "WorkflowJob"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"workflow_job\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"WorkflowJobCompleted\","]
#[doc = "      \"description\": \"<p>A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"workflow_job\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"WorkflowJobCompletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"completed\""]
#[doc = "        },"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedDeployment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow_job\": {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJob\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"WorkflowJobInProgress\","]
#[doc = "      \"description\": \"<p>A job in a workflow run started processing on a runner.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"workflow_job\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"WorkflowJobInProgressAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"in_progress\""]
#[doc = "        },"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedDeployment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow_job\": {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowJobInProgressWorkflowJob\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"WorkflowJobQueued\","]
#[doc = "      \"description\": \"<p>A job in a workflow run was created.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"workflow_job\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"WorkflowJobQueuedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"queued\""]
#[doc = "        },"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedDeployment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow_job\": {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowJobQueuedWorkflowJob\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"WorkflowJobWaiting\","]
#[doc = "      \"description\": \"<p>A job in a workflow run was created and is waiting for approvals.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"workflow_job\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"WorkflowJobWaitingAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"waiting\""]
#[doc = "        },"]
#[doc = "        \"deployment\": {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentProtectionRuleRequestedDeployment\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow_job\": {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowJobWaitingWorkflowJob\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum WorkflowJob {
    #[doc = "WorkflowJobCompleted\n\n<p>A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.</p>"]
    #[serde(rename = "completed")]
    Completed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        deployment: Option<DeploymentProtectionRuleRequestedDeployment>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        workflow_job: WorkflowJobCompletedWorkflowJob,
    },
    #[doc = "WorkflowJobInProgress\n\n<p>A job in a workflow run started processing on a runner.</p>"]
    #[serde(rename = "in_progress")]
    InProgress {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        deployment: Option<DeploymentProtectionRuleRequestedDeployment>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        workflow_job: WorkflowJobInProgressWorkflowJob,
    },
    #[doc = "WorkflowJobQueued\n\n<p>A job in a workflow run was created.</p>"]
    #[serde(rename = "queued")]
    Queued {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        deployment: Option<DeploymentProtectionRuleRequestedDeployment>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        workflow_job: WorkflowJobQueuedWorkflowJob,
    },
    #[doc = "WorkflowJobWaiting\n\n<p>A job in a workflow run was created and is waiting for approvals.</p>"]
    #[serde(rename = "waiting")]
    Waiting {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        deployment: Option<DeploymentProtectionRuleRequestedDeployment>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        workflow_job: WorkflowJobWaitingWorkflowJob,
    },
}
impl From<&WorkflowJob> for WorkflowJob {
    fn from(value: &WorkflowJob) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowJobCompletedWorkflowJob\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"check_run_url\","]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_id\","]
#[doc = "    \"run_url\","]
#[doc = "    \"runner_group_id\","]
#[doc = "    \"runner_group_name\","]
#[doc = "    \"runner_id\","]
#[doc = "    \"runner_name\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"steps\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"check_run_url\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobCheckRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"action_required\","]
#[doc = "            \"cancelled\","]
#[doc = "            \"failure\","]
#[doc = "            \"neutral\","]
#[doc = "            \"skipped\","]
#[doc = "            \"success\","]
#[doc = "            \"timed_out\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the job created.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobHeadBranch\","]
#[doc = "      \"description\": \"<p>The name of the current branch.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobLabels\","]
#[doc = "      \"description\": \"<p>Custom labels for the job. Specified by the <a href=\\\"https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on\\\"><code>\\\"runs-on\\\"</code> attribute</a> in the workflow YAML.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_id\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"run_url\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"runner_group_id\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobRunnerGroupId\","]
#[doc = "      \"description\": \"<p>The ID of the runner group that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_group_name\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobRunnerGroupName\","]
#[doc = "      \"description\": \"<p>The name of the runner group that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_id\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobRunnerId\","]
#[doc = "      \"description\": \"<p>The ID of the runner that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_name\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobRunnerName\","]
#[doc = "      \"description\": \"<p>The name of the runner that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobStatus\""]
#[doc = "    },"]
#[doc = "    \"steps\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobSteps\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobSteps\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_name\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobWorkflowName\","]
#[doc = "      \"description\": \"<p>The name of the workflow.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowJobCompletedWorkflowJob {
    #[doc = ""]
    pub check_run_url: String,
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = ""]
    pub conclusion: Option<WorkflowJobCompletedWorkflowJobConclusion>,
    #[doc = "<p>The time that the job created.</p>"]
    pub created_at: String,
    #[doc = "<p>The name of the current branch.</p>"]
    pub head_branch: Option<String>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = "<p>Custom labels for the job. Specified by the <a href=\"https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on\"><code>\"runs-on\"</code> attribute</a> in the workflow YAML.</p>"]
    pub labels: Vec<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub run_attempt: i64,
    pub run_id: f64,
    #[doc = ""]
    pub run_url: String,
    #[doc = "<p>The ID of the runner group that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>"]
    pub runner_group_id: Option<i64>,
    #[doc = "<p>The name of the runner group that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>"]
    pub runner_group_name: Option<String>,
    #[doc = "<p>The ID of the runner that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>"]
    pub runner_id: Option<i64>,
    #[doc = "<p>The name of the runner that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>"]
    pub runner_name: Option<String>,
    #[doc = ""]
    pub started_at: String,
    pub status: WorkflowJobCompletedWorkflowJobStatus,
    #[doc = ""]
    pub steps: Vec<WorkflowJobCompletedWorkflowJobSteps>,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>The name of the workflow.</p>"]
    pub workflow_name: Option<String>,
}
impl From<&WorkflowJobCompletedWorkflowJob> for WorkflowJobCompletedWorkflowJob {
    fn from(value: &WorkflowJobCompletedWorkflowJob) -> Self {
        value.clone()
    }
}
#[doc = "WorkflowJobCompletedWorkflowJobConclusion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"action_required\","]
#[doc = "    \"cancelled\","]
#[doc = "    \"failure\","]
#[doc = "    \"neutral\","]
#[doc = "    \"skipped\","]
#[doc = "    \"success\","]
#[doc = "    \"timed_out\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum WorkflowJobCompletedWorkflowJobConclusion {
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "timed_out")]
    TimedOut,
}
impl From<&WorkflowJobCompletedWorkflowJobConclusion>
    for WorkflowJobCompletedWorkflowJobConclusion
{
    fn from(value: &WorkflowJobCompletedWorkflowJobConclusion) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for WorkflowJobCompletedWorkflowJobConclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::ActionRequired => write!(f, "action_required"),
            Self::Cancelled => write!(f, "cancelled"),
            Self::Failure => write!(f, "failure"),
            Self::Neutral => write!(f, "neutral"),
            Self::Skipped => write!(f, "skipped"),
            Self::Success => write!(f, "success"),
            Self::TimedOut => write!(f, "timed_out"),
        }
    }
}
impl std::str::FromStr for WorkflowJobCompletedWorkflowJobConclusion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "action_required" => Ok(Self::ActionRequired),
            "cancelled" => Ok(Self::Cancelled),
            "failure" => Ok(Self::Failure),
            "neutral" => Ok(Self::Neutral),
            "skipped" => Ok(Self::Skipped),
            "success" => Ok(Self::Success),
            "timed_out" => Ok(Self::TimedOut),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for WorkflowJobCompletedWorkflowJobConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for WorkflowJobCompletedWorkflowJobConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for WorkflowJobCompletedWorkflowJobConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "<p>The current status of the job. Can be <code>queued</code>, <code>in_progress</code>, <code>waiting</code>, or <code>completed</code>.</p>"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowJobCompletedWorkflowJobStatus\","]
#[doc = "  \"description\": \"<p>The current status of the job. Can be <code>queued</code>, <code>in_progress</code>, <code>waiting</code>, or <code>completed</code>.</p>\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"in_progress\","]
#[doc = "    \"queued\","]
#[doc = "    \"waiting\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum WorkflowJobCompletedWorkflowJobStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "waiting")]
    Waiting,
}
impl From<&WorkflowJobCompletedWorkflowJobStatus> for WorkflowJobCompletedWorkflowJobStatus {
    fn from(value: &WorkflowJobCompletedWorkflowJobStatus) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for WorkflowJobCompletedWorkflowJobStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::InProgress => write!(f, "in_progress"),
            Self::Queued => write!(f, "queued"),
            Self::Waiting => write!(f, "waiting"),
        }
    }
}
impl std::str::FromStr for WorkflowJobCompletedWorkflowJobStatus {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "in_progress" => Ok(Self::InProgress),
            "queued" => Ok(Self::Queued),
            "waiting" => Ok(Self::Waiting),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for WorkflowJobCompletedWorkflowJobStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for WorkflowJobCompletedWorkflowJobStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for WorkflowJobCompletedWorkflowJobStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "WorkflowJobCompletedWorkflowJobSteps"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"name\","]
#[doc = "    \"number\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobStepsCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobStepsConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobStepsConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobStepsName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobStepsNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"WorkflowJobCompletedWorkflowJobStepsStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobStepsStatus\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowJobCompletedWorkflowJobSteps {
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = ""]
    pub conclusion: Option<WorkflowJobCompletedWorkflowJobStepsConclusion>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub started_at: Option<String>,
    pub status: WorkflowJobCompletedWorkflowJobStepsStatus,
}
impl From<&WorkflowJobCompletedWorkflowJobSteps> for WorkflowJobCompletedWorkflowJobSteps {
    fn from(value: &WorkflowJobCompletedWorkflowJobSteps) -> Self {
        value.clone()
    }
}
#[doc = "WorkflowJobCompletedWorkflowJobStepsConclusion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"cancelled\","]
#[doc = "    \"failure\","]
#[doc = "    \"skipped\","]
#[doc = "    \"success\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum WorkflowJobCompletedWorkflowJobStepsConclusion {
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "success")]
    Success,
}
impl From<&WorkflowJobCompletedWorkflowJobStepsConclusion>
    for WorkflowJobCompletedWorkflowJobStepsConclusion
{
    fn from(value: &WorkflowJobCompletedWorkflowJobStepsConclusion) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for WorkflowJobCompletedWorkflowJobStepsConclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Cancelled => write!(f, "cancelled"),
            Self::Failure => write!(f, "failure"),
            Self::Skipped => write!(f, "skipped"),
            Self::Success => write!(f, "success"),
        }
    }
}
impl std::str::FromStr for WorkflowJobCompletedWorkflowJobStepsConclusion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "cancelled" => Ok(Self::Cancelled),
            "failure" => Ok(Self::Failure),
            "skipped" => Ok(Self::Skipped),
            "success" => Ok(Self::Success),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for WorkflowJobCompletedWorkflowJobStepsConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for WorkflowJobCompletedWorkflowJobStepsConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for WorkflowJobCompletedWorkflowJobStepsConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowJobCompletedWorkflowJobStepsStatus\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"in_progress\","]
#[doc = "    \"queued\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum WorkflowJobCompletedWorkflowJobStepsStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "queued")]
    Queued,
}
impl From<&WorkflowJobCompletedWorkflowJobStepsStatus>
    for WorkflowJobCompletedWorkflowJobStepsStatus
{
    fn from(value: &WorkflowJobCompletedWorkflowJobStepsStatus) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for WorkflowJobCompletedWorkflowJobStepsStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::InProgress => write!(f, "in_progress"),
            Self::Queued => write!(f, "queued"),
        }
    }
}
impl std::str::FromStr for WorkflowJobCompletedWorkflowJobStepsStatus {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "in_progress" => Ok(Self::InProgress),
            "queued" => Ok(Self::Queued),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for WorkflowJobCompletedWorkflowJobStepsStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for WorkflowJobCompletedWorkflowJobStepsStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for WorkflowJobCompletedWorkflowJobStepsStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowJobInProgressWorkflowJob\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"check_run_url\","]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_id\","]
#[doc = "    \"run_url\","]
#[doc = "    \"runner_group_id\","]
#[doc = "    \"runner_group_name\","]
#[doc = "    \"runner_id\","]
#[doc = "    \"runner_name\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"steps\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"check_run_url\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobCheckRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"cancelled\","]
#[doc = "            \"failure\","]
#[doc = "            \"neutral\","]
#[doc = "            \"success\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the job created.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobHeadBranch\","]
#[doc = "      \"description\": \"<p>The name of the current branch.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobLabels\","]
#[doc = "      \"description\": \"<p>Custom labels for the job. Specified by the <a href=\\\"https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on\\\"><code>\\\"runs-on\\\"</code> attribute</a> in the workflow YAML.</p>\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_id\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"run_url\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"runner_group_id\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobRunnerGroupId\","]
#[doc = "      \"description\": \"<p>The ID of the runner group that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_group_name\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobRunnerGroupName\","]
#[doc = "      \"description\": \"<p>The name of the runner group that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_id\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobRunnerId\","]
#[doc = "      \"description\": \"<p>The ID of the runner that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_name\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobRunnerName\","]
#[doc = "      \"description\": \"<p>The name of the runner that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobStepsStatus\""]
#[doc = "    },"]
#[doc = "    \"steps\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobSteps\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/WorkflowJobInProgressWorkflowJobSteps\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_name\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobWorkflowName\","]
#[doc = "      \"description\": \"<p>The name of the workflow.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowJobInProgressWorkflowJob {
    #[doc = ""]
    pub check_run_url: String,
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = ""]
    pub conclusion: Option<WorkflowJobInProgressWorkflowJobConclusion>,
    #[doc = "<p>The time that the job created.</p>"]
    pub created_at: String,
    #[doc = "<p>The name of the current branch.</p>"]
    pub head_branch: Option<String>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = "<p>Custom labels for the job. Specified by the <a href=\"https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on\"><code>\"runs-on\"</code> attribute</a> in the workflow YAML.</p>"]
    pub labels: Vec<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub run_attempt: i64,
    pub run_id: f64,
    #[doc = ""]
    pub run_url: String,
    #[doc = "<p>The ID of the runner group that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>"]
    pub runner_group_id: Option<i64>,
    #[doc = "<p>The name of the runner group that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>"]
    pub runner_group_name: Option<String>,
    #[doc = "<p>The ID of the runner that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>"]
    pub runner_id: Option<i64>,
    #[doc = "<p>The name of the runner that is running this job. This will be <code>null</code> as long as <code>workflow_job[status]</code> is <code>queued</code>.</p>"]
    pub runner_name: Option<String>,
    #[doc = ""]
    pub started_at: String,
    pub status: WorkflowJobCompletedWorkflowJobStepsStatus,
    #[doc = ""]
    pub steps: Vec<WorkflowJobInProgressWorkflowJobSteps>,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>The name of the workflow.</p>"]
    pub workflow_name: Option<String>,
}
impl From<&WorkflowJobInProgressWorkflowJob> for WorkflowJobInProgressWorkflowJob {
    fn from(value: &WorkflowJobInProgressWorkflowJob) -> Self {
        value.clone()
    }
}
#[doc = "WorkflowJobInProgressWorkflowJobConclusion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"cancelled\","]
#[doc = "    \"failure\","]
#[doc = "    \"neutral\","]
#[doc = "    \"success\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum WorkflowJobInProgressWorkflowJobConclusion {
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "success")]
    Success,
}
impl From<&WorkflowJobInProgressWorkflowJobConclusion>
    for WorkflowJobInProgressWorkflowJobConclusion
{
    fn from(value: &WorkflowJobInProgressWorkflowJobConclusion) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for WorkflowJobInProgressWorkflowJobConclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Cancelled => write!(f, "cancelled"),
            Self::Failure => write!(f, "failure"),
            Self::Neutral => write!(f, "neutral"),
            Self::Success => write!(f, "success"),
        }
    }
}
impl std::str::FromStr for WorkflowJobInProgressWorkflowJobConclusion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "cancelled" => Ok(Self::Cancelled),
            "failure" => Ok(Self::Failure),
            "neutral" => Ok(Self::Neutral),
            "success" => Ok(Self::Success),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for WorkflowJobInProgressWorkflowJobConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for WorkflowJobInProgressWorkflowJobConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for WorkflowJobInProgressWorkflowJobConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "WorkflowJobInProgressWorkflowJobSteps"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"name\","]
#[doc = "    \"number\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobStepsCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobStepsConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobStepsConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobStepsName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobStepsNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"WorkflowJobInProgressWorkflowJobStepsStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/CheckRunCompletedCheckRunStatus\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowJobInProgressWorkflowJobSteps {
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = ""]
    pub conclusion: Option<WorkflowJobCompletedWorkflowJobStepsConclusion>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub started_at: Option<String>,
    pub status: CheckRunCompletedCheckRunStatus,
}
impl From<&WorkflowJobInProgressWorkflowJobSteps> for WorkflowJobInProgressWorkflowJobSteps {
    fn from(value: &WorkflowJobInProgressWorkflowJobSteps) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowJobQueuedWorkflowJob\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"check_run_url\","]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_id\","]
#[doc = "    \"run_url\","]
#[doc = "    \"runner_group_id\","]
#[doc = "    \"runner_group_name\","]
#[doc = "    \"runner_id\","]
#[doc = "    \"runner_name\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"steps\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"check_run_url\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobCheckRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the job created.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobHeadBranch\","]
#[doc = "      \"description\": \"<p>The name of the current branch.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_id\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"run_url\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"runner_group_id\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobRunnerGroupId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_group_name\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobRunnerGroupName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_id\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobRunnerId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_name\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobRunnerName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobStatus\""]
#[doc = "    },"]
#[doc = "    \"steps\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobSteps\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/WorkflowJobInProgressWorkflowJobSteps\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_name\": {"]
#[doc = "      \"title\": \"WorkflowJobQueuedWorkflowJobWorkflowName\","]
#[doc = "      \"description\": \"<p>The name of the workflow.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowJobQueuedWorkflowJob {
    #[doc = ""]
    pub check_run_url: String,
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = ""]
    pub conclusion: Option<String>,
    #[doc = "<p>The time that the job created.</p>"]
    pub created_at: String,
    #[doc = "<p>The name of the current branch.</p>"]
    pub head_branch: Option<String>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub labels: Vec<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub run_attempt: i64,
    pub run_id: f64,
    #[doc = ""]
    pub run_url: String,
    #[doc = ""]
    pub runner_group_id: Option<i64>,
    #[doc = ""]
    pub runner_group_name: Option<String>,
    #[doc = ""]
    pub runner_id: Option<i64>,
    #[doc = ""]
    pub runner_name: Option<String>,
    #[doc = ""]
    pub started_at: String,
    pub status: WorkflowJobCompletedWorkflowJobStatus,
    #[doc = ""]
    pub steps: Vec<WorkflowJobInProgressWorkflowJobSteps>,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>The name of the workflow.</p>"]
    pub workflow_name: Option<String>,
}
impl From<&WorkflowJobQueuedWorkflowJob> for WorkflowJobQueuedWorkflowJob {
    fn from(value: &WorkflowJobQueuedWorkflowJob) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowJobWaitingWorkflowJob\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"check_run_url\","]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"labels\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_id\","]
#[doc = "    \"run_url\","]
#[doc = "    \"runner_group_id\","]
#[doc = "    \"runner_group_name\","]
#[doc = "    \"runner_id\","]
#[doc = "    \"runner_name\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"steps\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_name\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"check_run_url\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobCheckRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobCreatedAt\","]
#[doc = "      \"description\": \"<p>The time that the job created.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobHeadBranch\","]
#[doc = "      \"description\": \"<p>The name of the current branch.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"labels\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobLabels\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_id\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"run_url\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"runner_group_id\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobRunnerGroupId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_group_name\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobRunnerGroupName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_id\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobRunnerId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"runner_name\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobRunnerName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobStatus\""]
#[doc = "    },"]
#[doc = "    \"steps\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobSteps\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/WorkflowJobWaitingWorkflowJobSteps\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_name\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobWorkflowName\","]
#[doc = "      \"description\": \"<p>The name of the workflow.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowJobWaitingWorkflowJob {
    #[doc = ""]
    pub check_run_url: String,
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = ""]
    pub conclusion: Option<String>,
    #[doc = "<p>The time that the job created.</p>"]
    pub created_at: String,
    #[doc = "<p>The name of the current branch.</p>"]
    pub head_branch: Option<String>,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub labels: Vec<String>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub run_attempt: i64,
    pub run_id: f64,
    #[doc = ""]
    pub run_url: String,
    #[doc = ""]
    pub runner_group_id: Option<i64>,
    #[doc = ""]
    pub runner_group_name: Option<String>,
    #[doc = ""]
    pub runner_id: Option<i64>,
    #[doc = ""]
    pub runner_name: Option<String>,
    #[doc = ""]
    pub started_at: String,
    pub status: WorkflowJobCompletedWorkflowJobStatus,
    #[doc = ""]
    pub steps: Vec<WorkflowJobWaitingWorkflowJobSteps>,
    #[doc = ""]
    pub url: String,
    #[doc = "<p>The name of the workflow.</p>"]
    pub workflow_name: Option<String>,
}
impl From<&WorkflowJobWaitingWorkflowJob> for WorkflowJobWaitingWorkflowJob {
    fn from(value: &WorkflowJobWaitingWorkflowJob) -> Self {
        value.clone()
    }
}
#[doc = "WorkflowJobWaitingWorkflowJobSteps"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"completed_at\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"name\","]
#[doc = "    \"number\","]
#[doc = "    \"started_at\","]
#[doc = "    \"status\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobStepsCompletedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobStepsConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowJobCompletedWorkflowJobStepsConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobStepsName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobStepsNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"started_at\": {"]
#[doc = "      \"title\": \"WorkflowJobWaitingWorkflowJobStepsStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedCheckRunStatus\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowJobWaitingWorkflowJobSteps {
    #[doc = ""]
    pub completed_at: Option<String>,
    #[doc = ""]
    pub conclusion: Option<WorkflowJobCompletedWorkflowJobStepsConclusion>,
    #[doc = ""]
    pub name: String,
    #[doc = ""]
    pub number: i64,
    #[doc = ""]
    pub started_at: Option<String>,
    pub status: DeploymentStatusCreatedCheckRunStatus,
}
impl From<&WorkflowJobWaitingWorkflowJobSteps> for WorkflowJobWaitingWorkflowJobSteps {
    fn from(value: &WorkflowJobWaitingWorkflowJobSteps) -> Self {
        value.clone()
    }
}
#[doc = "WorkflowRun"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"workflow_run\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"title\": \"WorkflowRunCompleted\","]
#[doc = "      \"description\": \"<p>A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"workflow\","]
#[doc = "        \"workflow_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"WorkflowRunCompletedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"completed\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow\": {"]
#[doc = "          \"title\": \"WorkflowRunCompletedWorkflow\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflow\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRun\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"WorkflowRunInProgress\","]
#[doc = "      \"description\": \"<p>A workflow run started processing on a runner.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"workflow\","]
#[doc = "        \"workflow_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"WorkflowRunInProgressAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"in_progress\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow\": {"]
#[doc = "          \"title\": \"WorkflowRunInProgressWorkflow\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflow\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowRunInProgressWorkflowRun\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"title\": \"WorkflowRunRequested\","]
#[doc = "      \"description\": \"<p>A workflow run was triggered.</p>\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"action\","]
#[doc = "        \"repository\","]
#[doc = "        \"sender\","]
#[doc = "        \"workflow\","]
#[doc = "        \"workflow_run\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"action\": {"]
#[doc = "          \"title\": \"WorkflowRunRequestedAction\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"const\": \"requested\""]
#[doc = "        },"]
#[doc = "        \"enterprise\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"installation\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"organization\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"repository\": {"]
#[doc = "          \"$ref\": \"#/$defs/SomethingWithAnId\""]
#[doc = "        },"]
#[doc = "        \"sender\": {"]
#[doc = "          \"$ref\": \"#/$defs/Untyped\""]
#[doc = "        },"]
#[doc = "        \"workflow\": {"]
#[doc = "          \"title\": \"WorkflowRunRequestedWorkflow\","]
#[doc = "          \"description\": \"\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflow\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"type\": \"null\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"workflow_run\": {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowRunRequestedWorkflowRun\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(tag = "action")]
pub enum WorkflowRun {
    #[doc = "WorkflowRunCompleted\n\n<p>A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.</p>"]
    #[serde(rename = "completed")]
    Completed {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        #[doc = ""]
        workflow: Option<DeploymentStatusCreatedWorkflow>,
        workflow_run: WorkflowRunCompletedWorkflowRun,
    },
    #[doc = "WorkflowRunInProgress\n\n<p>A workflow run started processing on a runner.</p>"]
    #[serde(rename = "in_progress")]
    InProgress {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        #[doc = ""]
        workflow: Option<DeploymentStatusCreatedWorkflow>,
        workflow_run: WorkflowRunInProgressWorkflowRun,
    },
    #[doc = "WorkflowRunRequested\n\n<p>A workflow run was triggered.</p>"]
    #[serde(rename = "requested")]
    Requested {
        #[serde(default, skip_serializing_if = "Option::is_none")]
        enterprise: Option<Untyped>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        installation: Option<SomethingWithAnId>,
        #[serde(default, skip_serializing_if = "Option::is_none")]
        organization: Option<Untyped>,
        repository: SomethingWithAnId,
        sender: Untyped,
        #[doc = ""]
        workflow: Option<DeploymentStatusCreatedWorkflow>,
        workflow_run: WorkflowRunRequestedWorkflowRun,
    },
}
impl From<&WorkflowRun> for WorkflowRun {
    fn from(value: &WorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowRunCompletedWorkflowRun\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor\","]
#[doc = "    \"artifacts_url\","]
#[doc = "    \"cancel_url\","]
#[doc = "    \"check_suite_id\","]
#[doc = "    \"check_suite_node_id\","]
#[doc = "    \"check_suite_url\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"event\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_commit\","]
#[doc = "    \"head_repository\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"jobs_url\","]
#[doc = "    \"logs_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"previous_attempt_url\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"repository\","]
#[doc = "    \"rerun_url\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_number\","]
#[doc = "    \"run_started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"triggering_actor\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_id\","]
#[doc = "    \"workflow_url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"artifacts_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunArtifactsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cancel_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunCancelUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"check_suite_node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"display_title\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunDisplayTitle\","]
#[doc = "      \"description\": \"<p>The event-specific title associated with the run or the run-name if set, or the value of <code>run-name</code> if it is set in the workflow.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunEvent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadCommit\""]
#[doc = "    },"]
#[doc = "    \"head_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"jobs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunJobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"logs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunLogsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"previous_attempt_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunPreviousAttemptUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"referenced_workflows\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunReferencedWorkflows\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunReferencedWorkflows\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"rerun_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunRerunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_number\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunRunNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_started_at\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunStatus\""]
#[doc = "    },"]
#[doc = "    \"triggering_actor\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunTriggeringActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"workflow_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowRunCompletedWorkflowRun {
    #[doc = ""]
    pub actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub artifacts_url: String,
    #[doc = ""]
    pub cancel_url: String,
    #[doc = ""]
    pub check_suite_id: i64,
    #[doc = ""]
    pub check_suite_node_id: String,
    #[doc = ""]
    pub check_suite_url: String,
    #[doc = ""]
    pub conclusion: Option<WorkflowRunCompletedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = "<p>The event-specific title associated with the run or the run-name if set, or the value of <code>run-name</code> if it is set in the workflow.</p>"]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub display_title: Option<String>,
    #[doc = ""]
    pub event: String,
    #[doc = ""]
    pub head_branch: Option<String>,
    pub head_commit: WorkflowRunCompletedWorkflowRunHeadCommit,
    pub head_repository: WorkflowRunCompletedWorkflowRunHeadRepository,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub jobs_url: String,
    #[doc = ""]
    pub logs_url: String,
    #[doc = ""]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    pub previous_attempt_url: Option<String>,
    #[doc = ""]
    pub pull_requests: Vec<Option<Untyped>>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub referenced_workflows: Option<Vec<DeploymentStatusCreatedWorkflowRunReferencedWorkflows>>,
    pub repository: WorkflowRunCompletedWorkflowRunHeadRepository,
    #[doc = ""]
    pub rerun_url: String,
    #[doc = ""]
    pub run_attempt: i64,
    #[doc = ""]
    pub run_number: i64,
    #[doc = ""]
    pub run_started_at: String,
    pub status: DeploymentStatusCreatedWorkflowRunStatus,
    #[doc = ""]
    pub triggering_actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub workflow_id: i64,
    #[doc = ""]
    pub workflow_url: String,
}
impl From<&WorkflowRunCompletedWorkflowRun> for WorkflowRunCompletedWorkflowRun {
    fn from(value: &WorkflowRunCompletedWorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = "WorkflowRunCompletedWorkflowRunConclusion"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"action_required\","]
#[doc = "    \"cancelled\","]
#[doc = "    \"failure\","]
#[doc = "    \"neutral\","]
#[doc = "    \"skipped\","]
#[doc = "    \"stale\","]
#[doc = "    \"startup_failure\","]
#[doc = "    \"success\","]
#[doc = "    \"timed_out\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum WorkflowRunCompletedWorkflowRunConclusion {
    #[serde(rename = "action_required")]
    ActionRequired,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failure")]
    Failure,
    #[serde(rename = "neutral")]
    Neutral,
    #[serde(rename = "skipped")]
    Skipped,
    #[serde(rename = "stale")]
    Stale,
    #[serde(rename = "startup_failure")]
    StartupFailure,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "timed_out")]
    TimedOut,
}
impl From<&WorkflowRunCompletedWorkflowRunConclusion>
    for WorkflowRunCompletedWorkflowRunConclusion
{
    fn from(value: &WorkflowRunCompletedWorkflowRunConclusion) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for WorkflowRunCompletedWorkflowRunConclusion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::ActionRequired => write!(f, "action_required"),
            Self::Cancelled => write!(f, "cancelled"),
            Self::Failure => write!(f, "failure"),
            Self::Neutral => write!(f, "neutral"),
            Self::Skipped => write!(f, "skipped"),
            Self::Stale => write!(f, "stale"),
            Self::StartupFailure => write!(f, "startup_failure"),
            Self::Success => write!(f, "success"),
            Self::TimedOut => write!(f, "timed_out"),
        }
    }
}
impl std::str::FromStr for WorkflowRunCompletedWorkflowRunConclusion {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "action_required" => Ok(Self::ActionRequired),
            "cancelled" => Ok(Self::Cancelled),
            "failure" => Ok(Self::Failure),
            "neutral" => Ok(Self::Neutral),
            "skipped" => Ok(Self::Skipped),
            "stale" => Ok(Self::Stale),
            "startup_failure" => Ok(Self::StartupFailure),
            "success" => Ok(Self::Success),
            "timed_out" => Ok(Self::TimedOut),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for WorkflowRunCompletedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for WorkflowRunCompletedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for WorkflowRunCompletedWorkflowRunConclusion {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowRunCompletedWorkflowRunHeadCommit\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"author\","]
#[doc = "    \"committer\","]
#[doc = "    \"id\","]
#[doc = "    \"message\","]
#[doc = "    \"timestamp\","]
#[doc = "    \"tree_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"author\": {"]
#[doc = "      \"$ref\": \"#/$defs/PushDefaultCommitsAuthor\""]
#[doc = "    },"]
#[doc = "    \"committer\": {"]
#[doc = "      \"$ref\": \"#/$defs/PushDefaultCommitsAuthor\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadCommitId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"message\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadCommitMessage\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"timestamp\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadCommitTimestamp\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tree_id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadCommitTreeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowRunCompletedWorkflowRunHeadCommit {
    pub author: PushDefaultCommitsAuthor,
    pub committer: PushDefaultCommitsAuthor,
    #[doc = ""]
    pub id: String,
    #[doc = ""]
    pub message: String,
    #[doc = ""]
    pub timestamp: String,
    #[doc = ""]
    pub tree_id: String,
}
impl From<&WorkflowRunCompletedWorkflowRunHeadCommit>
    for WorkflowRunCompletedWorkflowRunHeadCommit
{
    fn from(value: &WorkflowRunCompletedWorkflowRunHeadCommit) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepository\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowRunCompletedWorkflowRunHeadRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowRunCompletedWorkflowRunHeadRepository {
    #[doc = ""]
    pub archive_url: String,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub owner: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub url: String,
}
impl From<&WorkflowRunCompletedWorkflowRunHeadRepository>
    for WorkflowRunCompletedWorkflowRunHeadRepository
{
    fn from(value: &WorkflowRunCompletedWorkflowRunHeadRepository) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowRunInProgressWorkflowRun\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor\","]
#[doc = "    \"artifacts_url\","]
#[doc = "    \"cancel_url\","]
#[doc = "    \"check_suite_id\","]
#[doc = "    \"check_suite_node_id\","]
#[doc = "    \"check_suite_url\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"event\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_commit\","]
#[doc = "    \"head_repository\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"jobs_url\","]
#[doc = "    \"logs_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"previous_attempt_url\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"repository\","]
#[doc = "    \"rerun_url\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_number\","]
#[doc = "    \"run_started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"triggering_actor\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_id\","]
#[doc = "    \"workflow_url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"artifacts_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunArtifactsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cancel_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunCancelUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"check_suite_node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedCheckRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunEvent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadCommit\""]
#[doc = "    },"]
#[doc = "    \"head_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunInProgressWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"jobs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunJobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"logs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunLogsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"previous_attempt_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunPreviousAttemptUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"oneOf\": ["]
#[doc = "          {"]
#[doc = "            \"$ref\": \"#/$defs/Untyped\""]
#[doc = "          },"]
#[doc = "          {"]
#[doc = "            \"type\": \"null\""]
#[doc = "          }"]
#[doc = "        ]"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"referenced_workflows\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunReferencedWorkflows\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunReferencedWorkflows\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunInProgressWorkflowRunRepository\""]
#[doc = "    },"]
#[doc = "    \"rerun_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRerunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_number\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRunNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_started_at\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunInProgressWorkflowRunStatus\""]
#[doc = "    },"]
#[doc = "    \"triggering_actor\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunTriggeringActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"workflow_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowRunInProgressWorkflowRun {
    #[doc = ""]
    pub actor: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = ""]
    pub artifacts_url: String,
    #[doc = ""]
    pub cancel_url: String,
    #[doc = ""]
    pub check_suite_id: i64,
    #[doc = ""]
    pub check_suite_node_id: String,
    #[doc = ""]
    pub check_suite_url: String,
    #[doc = ""]
    pub conclusion: Option<DeploymentStatusCreatedCheckRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub event: String,
    #[doc = ""]
    pub head_branch: Option<String>,
    pub head_commit: WorkflowRunCompletedWorkflowRunHeadCommit,
    pub head_repository: WorkflowRunInProgressWorkflowRunHeadRepository,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub jobs_url: String,
    #[doc = ""]
    pub logs_url: String,
    #[doc = ""]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    pub previous_attempt_url: Option<String>,
    #[doc = ""]
    pub pull_requests: Vec<Option<Untyped>>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub referenced_workflows: Option<Vec<DeploymentStatusCreatedWorkflowRunReferencedWorkflows>>,
    pub repository: WorkflowRunInProgressWorkflowRunRepository,
    #[doc = ""]
    pub rerun_url: String,
    #[doc = ""]
    pub run_attempt: i64,
    #[doc = ""]
    pub run_number: i64,
    #[doc = ""]
    pub run_started_at: String,
    pub status: WorkflowRunInProgressWorkflowRunStatus,
    #[doc = ""]
    pub triggering_actor: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub workflow_id: i64,
    #[doc = ""]
    pub workflow_url: String,
}
impl From<&WorkflowRunInProgressWorkflowRun> for WorkflowRunInProgressWorkflowRun {
    fn from(value: &WorkflowRunInProgressWorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepository\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunHeadRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowRunInProgressWorkflowRunHeadRepository {
    #[doc = ""]
    pub archive_url: String,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub owner: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub url: String,
}
impl From<&WorkflowRunInProgressWorkflowRunHeadRepository>
    for WorkflowRunInProgressWorkflowRunHeadRepository
{
    fn from(value: &WorkflowRunInProgressWorkflowRunHeadRepository) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowRunInProgressWorkflowRunRepository\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"archive_url\","]
#[doc = "    \"assignees_url\","]
#[doc = "    \"blobs_url\","]
#[doc = "    \"branches_url\","]
#[doc = "    \"collaborators_url\","]
#[doc = "    \"comments_url\","]
#[doc = "    \"commits_url\","]
#[doc = "    \"compare_url\","]
#[doc = "    \"contents_url\","]
#[doc = "    \"contributors_url\","]
#[doc = "    \"deployments_url\","]
#[doc = "    \"description\","]
#[doc = "    \"downloads_url\","]
#[doc = "    \"events_url\","]
#[doc = "    \"fork\","]
#[doc = "    \"forks_url\","]
#[doc = "    \"full_name\","]
#[doc = "    \"git_commits_url\","]
#[doc = "    \"git_refs_url\","]
#[doc = "    \"git_tags_url\","]
#[doc = "    \"hooks_url\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"issue_comment_url\","]
#[doc = "    \"issue_events_url\","]
#[doc = "    \"issues_url\","]
#[doc = "    \"keys_url\","]
#[doc = "    \"labels_url\","]
#[doc = "    \"languages_url\","]
#[doc = "    \"merges_url\","]
#[doc = "    \"milestones_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"notifications_url\","]
#[doc = "    \"owner\","]
#[doc = "    \"private\","]
#[doc = "    \"pulls_url\","]
#[doc = "    \"releases_url\","]
#[doc = "    \"stargazers_url\","]
#[doc = "    \"statuses_url\","]
#[doc = "    \"subscribers_url\","]
#[doc = "    \"subscription_url\","]
#[doc = "    \"tags_url\","]
#[doc = "    \"teams_url\","]
#[doc = "    \"trees_url\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"archive_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryArchiveUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"assignees_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryAssigneesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"blobs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryBlobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"branches_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryBranchesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"collaborators_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryCollaboratorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"comments_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryCommentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"commits_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"compare_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryCompareUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contents_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryContentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"contributors_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryContributorsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"deployments_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryDeploymentsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryDescription\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"downloads_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryDownloadsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"events_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fork\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryFork\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"forks_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryForksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"full_name\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryFullName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_commits_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryGitCommitsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_refs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryGitRefsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"git_tags_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryGitTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"hooks_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryHooksUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryId\","]
#[doc = "      \"description\": \"<p>Unique identifier of the repository</p>\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"issue_comment_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryIssueCommentUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issue_events_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryIssueEventsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"issues_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryIssuesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"keys_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryKeysUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"labels_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryLabelsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"languages_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryLanguagesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"merges_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryMergesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"milestones_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryMilestonesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryName\","]
#[doc = "      \"description\": \"<p>The name of the repository.</p>\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"notifications_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryNotificationsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"owner\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryOwner\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentReviewApprovedReviewersReviewer\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"private\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryPrivate\","]
#[doc = "      \"description\": \"<p>Whether the repository is private or public.</p>\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"pulls_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryPullsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"releases_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryReleasesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"stargazers_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryStargazersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"statuses_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryStatusesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscribers_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositorySubscribersUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"subscription_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositorySubscriptionUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"tags_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryTagsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"teams_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryTeamsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"trees_url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryTreesUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowRunInProgressWorkflowRunRepositoryUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowRunInProgressWorkflowRunRepository {
    #[doc = ""]
    pub archive_url: String,
    #[doc = ""]
    pub assignees_url: String,
    #[doc = ""]
    pub blobs_url: String,
    #[doc = ""]
    pub branches_url: String,
    #[doc = ""]
    pub collaborators_url: String,
    #[doc = ""]
    pub comments_url: String,
    #[doc = ""]
    pub commits_url: String,
    #[doc = ""]
    pub compare_url: String,
    #[doc = ""]
    pub contents_url: String,
    #[doc = ""]
    pub contributors_url: String,
    #[doc = ""]
    pub deployments_url: String,
    #[doc = ""]
    pub description: Option<String>,
    #[doc = ""]
    pub downloads_url: String,
    #[doc = ""]
    pub events_url: String,
    #[doc = ""]
    pub fork: bool,
    #[doc = ""]
    pub forks_url: String,
    #[doc = ""]
    pub full_name: String,
    #[doc = ""]
    pub git_commits_url: String,
    #[doc = ""]
    pub git_refs_url: String,
    #[doc = ""]
    pub git_tags_url: String,
    #[doc = ""]
    pub hooks_url: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = "<p>Unique identifier of the repository</p>"]
    pub id: i64,
    #[doc = ""]
    pub issue_comment_url: String,
    #[doc = ""]
    pub issue_events_url: String,
    #[doc = ""]
    pub issues_url: String,
    #[doc = ""]
    pub keys_url: String,
    #[doc = ""]
    pub labels_url: String,
    #[doc = ""]
    pub languages_url: String,
    #[doc = ""]
    pub merges_url: String,
    #[doc = ""]
    pub milestones_url: String,
    #[doc = "<p>The name of the repository.</p>"]
    pub name: String,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub notifications_url: String,
    #[doc = ""]
    pub owner: Option<DeploymentReviewApprovedReviewersReviewer>,
    #[doc = "<p>Whether the repository is private or public.</p>"]
    pub private: bool,
    #[doc = ""]
    pub pulls_url: String,
    #[doc = ""]
    pub releases_url: String,
    #[doc = ""]
    pub stargazers_url: String,
    #[doc = ""]
    pub statuses_url: String,
    #[doc = ""]
    pub subscribers_url: String,
    #[doc = ""]
    pub subscription_url: String,
    #[doc = ""]
    pub tags_url: String,
    #[doc = ""]
    pub teams_url: String,
    #[doc = ""]
    pub trees_url: String,
    #[doc = ""]
    pub url: String,
}
impl From<&WorkflowRunInProgressWorkflowRunRepository>
    for WorkflowRunInProgressWorkflowRunRepository
{
    fn from(value: &WorkflowRunInProgressWorkflowRunRepository) -> Self {
        value.clone()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowRunInProgressWorkflowRunStatus\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"completed\","]
#[doc = "    \"in_progress\","]
#[doc = "    \"pending\","]
#[doc = "    \"queued\","]
#[doc = "    \"requested\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum WorkflowRunInProgressWorkflowRunStatus {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "requested")]
    Requested,
}
impl From<&WorkflowRunInProgressWorkflowRunStatus> for WorkflowRunInProgressWorkflowRunStatus {
    fn from(value: &WorkflowRunInProgressWorkflowRunStatus) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for WorkflowRunInProgressWorkflowRunStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Completed => write!(f, "completed"),
            Self::InProgress => write!(f, "in_progress"),
            Self::Pending => write!(f, "pending"),
            Self::Queued => write!(f, "queued"),
            Self::Requested => write!(f, "requested"),
        }
    }
}
impl std::str::FromStr for WorkflowRunInProgressWorkflowRunStatus {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> Result<Self, self::error::ConversionError> {
        match value {
            "completed" => Ok(Self::Completed),
            "in_progress" => Ok(Self::InProgress),
            "pending" => Ok(Self::Pending),
            "queued" => Ok(Self::Queued),
            "requested" => Ok(Self::Requested),
            _ => Err("invalid value".into()),
        }
    }
}
impl std::convert::TryFrom<&str> for WorkflowRunInProgressWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String> for WorkflowRunInProgressWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: &String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl std::convert::TryFrom<String> for WorkflowRunInProgressWorkflowRunStatus {
    type Error = self::error::ConversionError;
    fn try_from(value: String) -> Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = ""]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"WorkflowRunRequestedWorkflowRun\","]
#[doc = "  \"description\": \"\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"actor\","]
#[doc = "    \"artifacts_url\","]
#[doc = "    \"cancel_url\","]
#[doc = "    \"check_suite_id\","]
#[doc = "    \"check_suite_node_id\","]
#[doc = "    \"check_suite_url\","]
#[doc = "    \"conclusion\","]
#[doc = "    \"created_at\","]
#[doc = "    \"display_title\","]
#[doc = "    \"event\","]
#[doc = "    \"head_branch\","]
#[doc = "    \"head_commit\","]
#[doc = "    \"head_repository\","]
#[doc = "    \"head_sha\","]
#[doc = "    \"html_url\","]
#[doc = "    \"id\","]
#[doc = "    \"jobs_url\","]
#[doc = "    \"logs_url\","]
#[doc = "    \"name\","]
#[doc = "    \"node_id\","]
#[doc = "    \"path\","]
#[doc = "    \"previous_attempt_url\","]
#[doc = "    \"pull_requests\","]
#[doc = "    \"repository\","]
#[doc = "    \"rerun_url\","]
#[doc = "    \"run_attempt\","]
#[doc = "    \"run_number\","]
#[doc = "    \"run_started_at\","]
#[doc = "    \"status\","]
#[doc = "    \"triggering_actor\","]
#[doc = "    \"updated_at\","]
#[doc = "    \"url\","]
#[doc = "    \"workflow_id\","]
#[doc = "    \"workflow_url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"actor\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"artifacts_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunArtifactsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"cancel_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunCancelUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_id\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunCheckSuiteId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"check_suite_node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunCheckSuiteNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"check_suite_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunCheckSuiteUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"conclusion\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunConclusion\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunConclusion\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"created_at\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunCreatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"display_title\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunDisplayTitle\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"event\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunEvent\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"head_branch\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunHeadBranch\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"head_commit\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadCommit\""]
#[doc = "    },"]
#[doc = "    \"head_repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"head_sha\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunHeadSha\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"html_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunHtmlUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"jobs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunJobsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"logs_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunLogsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunName\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"node_id\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunNodeId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"path\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunPath\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"previous_attempt_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunPreviousAttemptUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"pull_requests\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunPullRequests\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$ref\": \"#/$defs/WorkflowRunRequestedWorkflowRunPullRequests\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"referenced_workflows\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunReferencedWorkflows\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunReferencedWorkflows\""]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"repository\": {"]
#[doc = "      \"$ref\": \"#/$defs/WorkflowRunCompletedWorkflowRunHeadRepository\""]
#[doc = "    },"]
#[doc = "    \"rerun_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunRerunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"run_attempt\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunRunAttempt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_number\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunRunNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"run_started_at\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunRunStartedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunStatus\""]
#[doc = "    },"]
#[doc = "    \"triggering_actor\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunTriggeringActor\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$ref\": \"#/$defs/DeploymentStatusCreatedDeploymentCreator\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"type\": \"null\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"updated_at\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunUpdatedAt\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"workflow_id\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunWorkflowId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"workflow_url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunWorkflowUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowRunRequestedWorkflowRun {
    #[doc = ""]
    pub actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub artifacts_url: String,
    #[doc = ""]
    pub cancel_url: String,
    #[doc = ""]
    pub check_suite_id: i64,
    #[doc = ""]
    pub check_suite_node_id: String,
    #[doc = ""]
    pub check_suite_url: String,
    #[doc = ""]
    pub conclusion: Option<WorkflowRunCompletedWorkflowRunConclusion>,
    #[doc = ""]
    pub created_at: String,
    #[doc = ""]
    pub display_title: String,
    #[doc = ""]
    pub event: String,
    #[doc = ""]
    pub head_branch: Option<String>,
    pub head_commit: WorkflowRunCompletedWorkflowRunHeadCommit,
    pub head_repository: WorkflowRunCompletedWorkflowRunHeadRepository,
    #[doc = ""]
    pub head_sha: String,
    #[doc = ""]
    pub html_url: String,
    #[doc = ""]
    pub id: i64,
    #[doc = ""]
    pub jobs_url: String,
    #[doc = ""]
    pub logs_url: String,
    #[doc = ""]
    pub name: Option<String>,
    #[doc = ""]
    pub node_id: String,
    #[doc = ""]
    pub path: String,
    #[doc = ""]
    pub previous_attempt_url: Option<String>,
    #[doc = ""]
    pub pull_requests: Vec<WorkflowRunRequestedWorkflowRunPullRequests>,
    #[doc = ""]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub referenced_workflows: Option<Vec<DeploymentStatusCreatedWorkflowRunReferencedWorkflows>>,
    pub repository: WorkflowRunCompletedWorkflowRunHeadRepository,
    #[doc = ""]
    pub rerun_url: String,
    #[doc = ""]
    pub run_attempt: i64,
    #[doc = ""]
    pub run_number: i64,
    #[doc = ""]
    pub run_started_at: String,
    pub status: DeploymentStatusCreatedWorkflowRunStatus,
    #[doc = ""]
    pub triggering_actor: Option<DeploymentStatusCreatedDeploymentCreator>,
    #[doc = ""]
    pub updated_at: String,
    #[doc = ""]
    pub url: String,
    #[doc = ""]
    pub workflow_id: i64,
    #[doc = ""]
    pub workflow_url: String,
}
impl From<&WorkflowRunRequestedWorkflowRun> for WorkflowRunRequestedWorkflowRun {
    fn from(value: &WorkflowRunRequestedWorkflowRun) -> Self {
        value.clone()
    }
}
#[doc = "WorkflowRunRequestedWorkflowRunPullRequests"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"base\","]
#[doc = "    \"head\","]
#[doc = "    \"id\","]
#[doc = "    \"number\","]
#[doc = "    \"url\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"base\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequestsBase\""]
#[doc = "    },"]
#[doc = "    \"head\": {"]
#[doc = "      \"$ref\": \"#/$defs/DeploymentStatusCreatedWorkflowRunPullRequestsBase\""]
#[doc = "    },"]
#[doc = "    \"id\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunPullRequestsId\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"number\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunPullRequestsNumber\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"url\": {"]
#[doc = "      \"title\": \"WorkflowRunRequestedWorkflowRunPullRequestsUrl\","]
#[doc = "      \"description\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct WorkflowRunRequestedWorkflowRunPullRequests {
    pub base: DeploymentStatusCreatedWorkflowRunPullRequestsBase,
    pub head: DeploymentStatusCreatedWorkflowRunPullRequestsBase,
    pub id: f64,
    pub number: f64,
    #[doc = ""]
    pub url: String,
}
impl From<&WorkflowRunRequestedWorkflowRunPullRequests>
    for WorkflowRunRequestedWorkflowRunPullRequests
{
    fn from(value: &WorkflowRunRequestedWorkflowRunPullRequests) -> Self {
        value.clone()
    }
}
#[doc = r" Generation of default values for serde."]
pub mod defaults {
    pub(super) fn default_bool<const V: bool>() -> bool {
        V
    }
    pub(super) fn deployment_protection_rule_requested_pull_requests_head_repo_visibility() -> String
    {
        "public".to_string()
    }
    pub(super) fn discussion_transferred_changes_new_repository_visibility() -> String {
        "public".to_string()
    }
}
