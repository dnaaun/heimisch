use reqwest_wiremock::GetClientWithMock;
use serde::{Deserialize, Serialize};
use shared::{
    endpoints::defns::api::auth::finish::GithubAccessToken,
    types::{installation::InstallationId, installation_access_token_row::InstallationAccessToken},
};
use url::Url;
use utils::{ExecuteNicely, JsonNicely};

use crate::error::Result;

pub fn get_user_access_token_request(
    github_non_api_root: &Url,
    code: &str,
    client_id: &str,
    client_secret: &str,
) -> reqwest_wiremock::Builder {
    let mut github_url = github_non_api_root
        .join("/login/oauth/access_token")
        .expect("");
    github_url.query_pairs_mut().extend_pairs([
        ("client_id", client_id),
        ("client_secret", client_secret),
        ("code", code),
    ]);

    reqwest::Client::new()
        .with_mock()
        .get(github_url)
        .header("Accept", "application/json")
}

#[derive(Serialize, Deserialize)]
pub struct ATResp {
    pub access_token: GithubAccessToken,
}

pub async fn get_user_access_token(
    github_non_api_root: &Url,
    code: &str,
    client_id: &str,
    client_secret: &str,
) -> Result<GithubAccessToken> {
    let client = reqwest::Client::new();
    let ATResp { access_token } = client
        .execute_nicely(
            get_user_access_token_request(github_non_api_root, code, client_id, client_secret)
                .build()
                .unwrap(),
        )
        .await?
        .json_nicely::<ATResp>()
        .await?;

    Ok(access_token)
}

/// NOTE: Use autogenerated API instead of this.
pub async fn get_installation_access_token(
    api_root: &Url,
    installation_id: InstallationId,
    signed_bearer_token: &str,
) -> Result<InstallationAccessToken> {
    let github_url = api_root
        .join(&format!(
            "/app/installations/{installation_id}/access_tokens"
        ))
        .expect("");
    let client = reqwest::Client::new();
    let req = client
        .post(github_url)
        .header(
            http::header::AUTHORIZATION,
            format!("Bearer {signed_bearer_token}"),
        )
        .header(http::header::USER_AGENT, "Heimisch")
        .body("{}") // body cpied unquestioningly from what octocrab does.
        .build()
        .expect("");

    Ok(client.execute_nicely(req).await?.json_nicely().await?)
}
