/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use super::AuthorAssociation;

/// IssueComment : The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IssueComment {
    /// How the author is associated with the repository.
    #[serde(rename = "author_association")]
    pub author_association: AuthorAssociation,
    /// Contents of the issue comment
    #[serde(rename = "body")]
    pub body: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "html_url")]
    pub html_url: String,
    /// Unique identifier of the issue comment
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "issue_url")]
    pub issue_url: String,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(
        rename = "performed_via_github_app",
        deserialize_with = "Option::deserialize"
    )]
    pub performed_via_github_app: Option<Box<models::NullableIntegration>>,
    #[serde(rename = "reactions")]
    pub reactions: Box<models::Reactions>,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// URL for the issue comment
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "user", deserialize_with = "Option::deserialize")]
    pub user: Option<Box<models::User1>>,
}
