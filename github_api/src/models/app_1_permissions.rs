/*
 * GitHub v3 REST API
 *
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use super::IntegrationPermissions;

/// App1Permissions : The set of permissions for the GitHub app
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct App1Permissions {
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<ReadOrWrite>,
    #[serde(rename = "administration", skip_serializing_if = "Option::is_none")]
    pub administration: Option<ReadOrWrite>,
    #[serde(rename = "checks", skip_serializing_if = "Option::is_none")]
    pub checks: Option<ReadOrWrite>,
    #[serde(rename = "content_references", skip_serializing_if = "Option::is_none")]
    pub content_references: Option<ReadOrWrite>,
    #[serde(rename = "contents", skip_serializing_if = "Option::is_none")]
    pub contents: Option<ReadOrWrite>,
    #[serde(rename = "deployments", skip_serializing_if = "Option::is_none")]
    pub deployments: Option<ReadOrWrite>,
    #[serde(rename = "discussions", skip_serializing_if = "Option::is_none")]
    pub discussions: Option<ReadOrWrite>,
    #[serde(rename = "emails", skip_serializing_if = "Option::is_none")]
    pub emails: Option<ReadOrWrite>,
    #[serde(rename = "environments", skip_serializing_if = "Option::is_none")]
    pub environments: Option<ReadOrWrite>,
    #[serde(rename = "issues", skip_serializing_if = "Option::is_none")]
    pub issues: Option<ReadOrWrite>,
    #[serde(rename = "keys", skip_serializing_if = "Option::is_none")]
    pub keys: Option<ReadOrWrite>,
    #[serde(rename = "members", skip_serializing_if = "Option::is_none")]
    pub members: Option<ReadOrWrite>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ReadOrWrite>,
    #[serde(
        rename = "organization_administration",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_administration: Option<ReadOrWrite>,
    #[serde(rename = "organization_hooks", skip_serializing_if = "Option::is_none")]
    pub organization_hooks: Option<ReadOrWrite>,
    #[serde(
        rename = "organization_packages",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_packages: Option<ReadOrWrite>,
    #[serde(rename = "organization_plan", skip_serializing_if = "Option::is_none")]
    pub organization_plan: Option<ReadOrWrite>,
    #[serde(
        rename = "organization_projects",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_projects: Option<ReadOrWrite>,
    #[serde(
        rename = "organization_secrets",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_secrets: Option<ReadOrWrite>,
    #[serde(
        rename = "organization_self_hosted_runners",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_self_hosted_runners: Option<ReadOrWrite>,
    #[serde(
        rename = "organization_user_blocking",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_user_blocking: Option<ReadOrWrite>,
    #[serde(rename = "packages", skip_serializing_if = "Option::is_none")]
    pub packages: Option<ReadOrWrite>,
    #[serde(rename = "pages", skip_serializing_if = "Option::is_none")]
    pub pages: Option<ReadOrWrite>,
    #[serde(rename = "pull_requests", skip_serializing_if = "Option::is_none")]
    pub pull_requests: Option<ReadOrWrite>,
    #[serde(rename = "repository_hooks", skip_serializing_if = "Option::is_none")]
    pub repository_hooks: Option<ReadOrWrite>,
    #[serde(
        rename = "repository_projects",
        skip_serializing_if = "Option::is_none"
    )]
    pub repository_projects: Option<ReadOrWrite>,
    #[serde(
        rename = "secret_scanning_alerts",
        skip_serializing_if = "Option::is_none"
    )]
    pub secret_scanning_alerts: Option<ReadOrWrite>,
    #[serde(rename = "secrets", skip_serializing_if = "Option::is_none")]
    pub secrets: Option<ReadOrWrite>,
    #[serde(rename = "security_events", skip_serializing_if = "Option::is_none")]
    pub security_events: Option<ReadOrWrite>,
    #[serde(
        rename = "security_scanning_alert",
        skip_serializing_if = "Option::is_none"
    )]
    pub security_scanning_alert: Option<ReadOrWrite>,
    #[serde(rename = "single_file", skip_serializing_if = "Option::is_none")]
    pub single_file: Option<ReadOrWrite>,
    #[serde(rename = "statuses", skip_serializing_if = "Option::is_none")]
    pub statuses: Option<ReadOrWrite>,
    #[serde(rename = "team_discussions", skip_serializing_if = "Option::is_none")]
    pub team_discussions: Option<ReadOrWrite>,
    #[serde(
        rename = "vulnerability_alerts",
        skip_serializing_if = "Option::is_none"
    )]
    pub vulnerability_alerts: Option<ReadOrWrite>,
    #[serde(rename = "workflows", skip_serializing_if = "Option::is_none")]
    pub workflows: Option<ReadOrWrite>,
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReadOrWrite {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}

impl Default for ReadOrWrite {
    fn default() -> ReadOrWrite {
        Self::Read
    }
}

impl From<IntegrationPermissions> for App1Permissions {
    fn from(value: IntegrationPermissions) -> Self {
        let IntegrationPermissions {
            issues,
            checks,
            metadata,
            contents,
            deployments,
        } = value;
        Self {
            issues,
            checks,
            metadata,
            contents,
            deployments,
            ..Default::default()
        }
    }
}
